
c:/Users/aiden/Desktop/IoT-Engineering/VisualStudioCodeProjects/IoT_FundamentalsFinalProject/target/3.3.0/argon/IoT_FundamentalsFinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006580  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000ba5a0  000ba5a0  0000a5a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000ba5c4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  2003e524  000ba5c8  0001e524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000260  2003e590  2003e590  0002e590  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000ba634  000ba634  0002a634  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000ba65c  000ba65c  0002a65c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00167d65  00000000  00000000  0002a660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00019ca3  00000000  00000000  001923c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0004ad2f  00000000  00000000  001ac068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000036e0  00000000  00000000  001f6d97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000be28  00000000  00000000  001fa477  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00046ee4  00000000  00000000  0020629f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00059f8d  00000000  00000000  0024d183  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013c119  00000000  00000000  002a7110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000a2b0  00000000  00000000  003e322c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f004 fe3b 	bl	b8cac <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f004 fe43 	bl	b8cc8 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e524 	.word	0x2003e524
   b404c:	000ba5c8 	.word	0x000ba5c8
   b4050:	2003e590 	.word	0x2003e590
   b4054:	2003e590 	.word	0x2003e590
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f003 f9fb 	bl	b745c <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000ba574 	.word	0x000ba574
   b4080:	000ba598 	.word	0x000ba598

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 bce8 	b.w	b4a58 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 fed9 	bl	b4e40 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f003 b99b 	b.w	b73cc <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f002 bde9 	b.w	b6c6c <malloc>

000b409a <_Znaj>:
   b409a:	f002 bde7 	b.w	b6c6c <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f002 bded 	b.w	b6c7c <free>
	...

000b40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f002 fd32 	bl	b6b14 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b6815 	.word	0x000b6815
   b40b8:	000b8f88 	.word	0x000b8f88

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
   b40cc:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b40ce:	f002 fba9 	bl	b6824 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b40d2:	4b03      	ldr	r3, [pc, #12]	; (b40e0 <_ZN10CloudClass7processEv+0x14>)
   b40d4:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
   b40d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    		spark_process();
   b40da:	f002 bdb7 	b.w	b6c4c <spark_process>
   b40de:	bf00      	nop
   b40e0:	2003e740 	.word	0x2003e740

000b40e4 <_ZNK10BlynkParam8iterator5asIntEv>:
#endif
#if !defined(BLYNK_NO_FLOAT)
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b40e4:	6803      	ldr	r3, [r0, #0]
   b40e6:	b12b      	cbz	r3, b40f4 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
   b40e8:	6842      	ldr	r2, [r0, #4]
   b40ea:	4293      	cmp	r3, r2
   b40ec:	d202      	bcs.n	b40f4 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
   b40ee:	4618      	mov	r0, r3
   b40f0:	f004 bdd4 	b.w	b8c9c <atoi>
   b40f4:	2000      	movs	r0, #0
   b40f6:	4770      	bx	lr

000b40f8 <_ZN10BlynkParam8iteratorppEv>:
        bool isEmpty() const            { if(!isValid()) return true; return *ptr == '\0'; }

        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
   b40f8:	b538      	push	{r3, r4, r5, lr}
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b40fa:	6805      	ldr	r5, [r0, #0]
        iterator& operator ++() {
   b40fc:	4604      	mov	r4, r0
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b40fe:	b145      	cbz	r5, b4112 <_ZN10BlynkParam8iteratorppEv+0x1a>
   b4100:	6843      	ldr	r3, [r0, #4]
   b4102:	429d      	cmp	r5, r3
   b4104:	d205      	bcs.n	b4112 <_ZN10BlynkParam8iteratorppEv+0x1a>
            if(isValid()) {
                ptr += strlen(ptr) + 1;
   b4106:	4628      	mov	r0, r5
   b4108:	f004 fe26 	bl	b8d58 <strlen>
   b410c:	3001      	adds	r0, #1
   b410e:	4405      	add	r5, r0
   b4110:	6025      	str	r5, [r4, #0]
            }
            return *this;
        }
   b4112:	4620      	mov	r0, r4
   b4114:	bd38      	pop	{r3, r4, r5, pc}

000b4116 <_ZN10BlynkParam3addEPKc>:
    len += l;
}

inline
void BlynkParam::add(const char* str)
{
   b4116:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4118:	4604      	mov	r4, r0
   b411a:	6847      	ldr	r7, [r0, #4]
    if (str == NULL) {
   b411c:	460d      	mov	r5, r1
   b411e:	b921      	cbnz	r1, b412a <_ZN10BlynkParam3addEPKc+0x14>
        buff[len++] = '\0';
   b4120:	6803      	ldr	r3, [r0, #0]
   b4122:	1c7a      	adds	r2, r7, #1
   b4124:	6042      	str	r2, [r0, #4]
   b4126:	55d9      	strb	r1, [r3, r7]
        return;
    }
    add(str, strlen(str)+1);
}
   b4128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    add(str, strlen(str)+1);
   b412a:	4608      	mov	r0, r1
   b412c:	f004 fe14 	bl	b8d58 <strlen>
    if (len + l > buff_size)
   b4130:	68a3      	ldr	r3, [r4, #8]
    add(str, strlen(str)+1);
   b4132:	1c46      	adds	r6, r0, #1
    if (len + l > buff_size)
   b4134:	19f2      	adds	r2, r6, r7
   b4136:	429a      	cmp	r2, r3
   b4138:	d8f6      	bhi.n	b4128 <_ZN10BlynkParam3addEPKc+0x12>
    memcpy(buff+len, b, l);
   b413a:	6820      	ldr	r0, [r4, #0]
   b413c:	4632      	mov	r2, r6
   b413e:	4629      	mov	r1, r5
   b4140:	4438      	add	r0, r7
   b4142:	f004 fdb3 	bl	b8cac <memcpy>
    len += l;
   b4146:	6860      	ldr	r0, [r4, #4]
   b4148:	4430      	add	r0, r6
   b414a:	6060      	str	r0, [r4, #4]
   b414c:	e7ec      	b.n	b4128 <_ZN10BlynkParam3addEPKc+0x12>
	...

000b4150 <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
   b4150:	b538      	push	{r3, r4, r5, lr}
   b4152:	4604      	mov	r4, r0
   b4154:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
   b4156:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   b415a:	6825      	ldr	r5, [r4, #0]
   b415c:	4a04      	ldr	r2, [pc, #16]	; (b4170 <_ZN10BlynkParam3addEi+0x20>)
   b415e:	1a09      	subs	r1, r1, r0
   b4160:	4428      	add	r0, r5
   b4162:	f002 fd9b 	bl	b6c9c <snprintf>
   b4166:	6863      	ldr	r3, [r4, #4]
   b4168:	3001      	adds	r0, #1
   b416a:	4403      	add	r3, r0
   b416c:	6063      	str	r3, [r4, #4]
    }
   b416e:	bd38      	pop	{r3, r4, r5, pc}
   b4170:	000b8f9d 	.word	0x000b8f9d

000b4174 <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
   b4174:	b538      	push	{r3, r4, r5, lr}
   b4176:	4604      	mov	r4, r0
   b4178:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
   b417a:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   b417e:	6825      	ldr	r5, [r4, #0]
   b4180:	4a04      	ldr	r2, [pc, #16]	; (b4194 <_ZN10BlynkParam3addEl+0x20>)
   b4182:	1a09      	subs	r1, r1, r0
   b4184:	4428      	add	r0, r5
   b4186:	f002 fd89 	bl	b6c9c <snprintf>
   b418a:	6863      	ldr	r3, [r4, #4]
   b418c:	3001      	adds	r0, #1
   b418e:	4403      	add	r3, r0
   b4190:	6063      	str	r3, [r4, #4]
    }
   b4192:	bd38      	pop	{r3, r4, r5, pc}
   b4194:	000b8fa0 	.word	0x000b8fa0

000b4198 <_Z9displayALv>:
 }
}

//Displays the ambient light to the OLED display
void displayAL()
{
   b4198:	b538      	push	{r3, r4, r5, lr}
  ambientLight = proximitySensor.getAmbient();
   b419a:	4812      	ldr	r0, [pc, #72]	; (b41e4 <_Z9displayALv+0x4c>)

  display.clearDisplay();
   b419c:	4d12      	ldr	r5, [pc, #72]	; (b41e8 <_Z9displayALv+0x50>)
  ambientLight = proximitySensor.getAmbient();
   b419e:	4c13      	ldr	r4, [pc, #76]	; (b41ec <_Z9displayALv+0x54>)
   b41a0:	f001 fd2b 	bl	b5bfa <_ZN8VCNL404010getAmbientEv>
   b41a4:	6020      	str	r0, [r4, #0]
  display.clearDisplay();
   b41a6:	4628      	mov	r0, r5
   b41a8:	f001 ffb0 	bl	b610c <_ZN16Adafruit_SSD130612clearDisplayEv>
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b41ac:	2300      	movs	r3, #0
  display.setCursor(0, 0);
  display.println("Ambient Light Level:");
   b41ae:	4910      	ldr	r1, [pc, #64]	; (b41f0 <_Z9displayALv+0x58>)
   b41b0:	612b      	str	r3, [r5, #16]
   b41b2:	4628      	mov	r0, r5
   b41b4:	f003 f827 	bl	b7206 <_ZN5Print7printlnEPKc>
  display.println(ambientLight);
   b41b8:	6824      	ldr	r4, [r4, #0]
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b41ba:	2c00      	cmp	r4, #0
   b41bc:	da10      	bge.n	b41e0 <_Z9displayALv+0x48>
            t = print('-');
   b41be:	212d      	movs	r1, #45	; 0x2d
   b41c0:	4628      	mov	r0, r5
   b41c2:	f003 f811 	bl	b71e8 <_ZN5Print5printEc>
            val = -n;
   b41c6:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b41c8:	220a      	movs	r2, #10
   b41ca:	4807      	ldr	r0, [pc, #28]	; (b41e8 <_Z9displayALv+0x50>)
   b41cc:	f003 f825 	bl	b721a <_ZN5Print11printNumberEmh>
        n += println();
   b41d0:	4805      	ldr	r0, [pc, #20]	; (b41e8 <_Z9displayALv+0x50>)
   b41d2:	f003 f80c 	bl	b71ee <_ZN5Print7printlnEv>
  display.display();
}
   b41d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  display.display();
   b41da:	4803      	ldr	r0, [pc, #12]	; (b41e8 <_Z9displayALv+0x50>)
   b41dc:	f002 ba04 	b.w	b65e8 <_ZN16Adafruit_SSD13067displayEv>
            val = n;
   b41e0:	4621      	mov	r1, r4
   b41e2:	e7f1      	b.n	b41c8 <_Z9displayALv+0x30>
   b41e4:	2003e694 	.word	0x2003e694
   b41e8:	2003e600 	.word	0x2003e600
   b41ec:	2003e5fc 	.word	0x2003e5fc
   b41f0:	000b8fa4 	.word	0x000b8fa4

000b41f4 <_Z11displayTempv>:

//displays temperature to the OLED
void displayTemp()
{
   b41f4:	b510      	push	{r4, lr}
  display.clearDisplay();
   b41f6:	4c24      	ldr	r4, [pc, #144]	; (b4288 <_Z11displayTempv+0x94>)
{
   b41f8:	b088      	sub	sp, #32
  display.clearDisplay();
   b41fa:	4620      	mov	r0, r4
   b41fc:	f001 ff86 	bl	b610c <_ZN16Adafruit_SSD130612clearDisplayEv>
   b4200:	2300      	movs	r3, #0
  display.setCursor(0, 0);
  display.println("Temperature:");
   b4202:	4922      	ldr	r1, [pc, #136]	; (b428c <_Z11displayTempv+0x98>)
   b4204:	6123      	str	r3, [r4, #16]
   b4206:	4620      	mov	r0, r4
   b4208:	f002 fffd 	bl	b7206 <_ZN5Print7printlnEPKc>
  display.println(String(int(tempC)) + " Celsius,");
   b420c:	4b20      	ldr	r3, [pc, #128]	; (b4290 <_Z11displayTempv+0x9c>)
   b420e:	e9d3 0100 	ldrd	r0, r1, [r3]
   b4212:	f004 fd15 	bl	b8c40 <__aeabi_d2iz>
   b4216:	220a      	movs	r2, #10
   b4218:	4601      	mov	r1, r0
   b421a:	4668      	mov	r0, sp
   b421c:	f002 ff3f 	bl	b709e <_ZN6StringC1Eih>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b4220:	4669      	mov	r1, sp
   b4222:	a804      	add	r0, sp, #16
   b4224:	f002 ff1e 	bl	b7064 <_ZN6StringC1ERKS_>
   b4228:	491a      	ldr	r1, [pc, #104]	; (b4294 <_Z11displayTempv+0xa0>)
   b422a:	a804      	add	r0, sp, #16
   b422c:	f002 ff6d 	bl	b710a <_ZplRK15StringSumHelperPKc>
   b4230:	6801      	ldr	r1, [r0, #0]
   b4232:	4620      	mov	r0, r4
   b4234:	f002 ffe7 	bl	b7206 <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b4238:	a804      	add	r0, sp, #16
   b423a:	f002 fea5 	bl	b6f88 <_ZN6StringD1Ev>
   b423e:	4668      	mov	r0, sp
   b4240:	f002 fea2 	bl	b6f88 <_ZN6StringD1Ev>
  display.println(String(int(tempF)) + " Fahrenheit.");
   b4244:	4b14      	ldr	r3, [pc, #80]	; (b4298 <_Z11displayTempv+0xa4>)
   b4246:	e9d3 0100 	ldrd	r0, r1, [r3]
   b424a:	f004 fcf9 	bl	b8c40 <__aeabi_d2iz>
   b424e:	220a      	movs	r2, #10
   b4250:	4601      	mov	r1, r0
   b4252:	4668      	mov	r0, sp
   b4254:	f002 ff23 	bl	b709e <_ZN6StringC1Eih>
	StringSumHelper(const String &s) : String(s) {}
   b4258:	4669      	mov	r1, sp
   b425a:	a804      	add	r0, sp, #16
   b425c:	f002 ff02 	bl	b7064 <_ZN6StringC1ERKS_>
   b4260:	490e      	ldr	r1, [pc, #56]	; (b429c <_Z11displayTempv+0xa8>)
   b4262:	a804      	add	r0, sp, #16
   b4264:	f002 ff51 	bl	b710a <_ZplRK15StringSumHelperPKc>
   b4268:	6801      	ldr	r1, [r0, #0]
   b426a:	4620      	mov	r0, r4
   b426c:	f002 ffcb 	bl	b7206 <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b4270:	a804      	add	r0, sp, #16
   b4272:	f002 fe89 	bl	b6f88 <_ZN6StringD1Ev>
   b4276:	4668      	mov	r0, sp
   b4278:	f002 fe86 	bl	b6f88 <_ZN6StringD1Ev>
  display.display();
   b427c:	4620      	mov	r0, r4
}
   b427e:	b008      	add	sp, #32
   b4280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  display.display();
   b4284:	f002 b9b0 	b.w	b65e8 <_ZN16Adafruit_SSD13067displayEv>
   b4288:	2003e600 	.word	0x2003e600
   b428c:	000b8fb9 	.word	0x000b8fb9
   b4290:	2003e6a0 	.word	0x2003e6a0
   b4294:	000b8fc6 	.word	0x000b8fc6
   b4298:	2003e6a8 	.word	0x2003e6a8
   b429c:	000b8fd0 	.word	0x000b8fd0

000b42a0 <_Z9setPointsv>:

//guides the user through the point setting process
void setPoints()
{
   b42a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b42a4:	f8df 8180 	ldr.w	r8, [pc, #384]	; b4428 <_Z9setPointsv+0x188>
   b42a8:	b08b      	sub	sp, #44	; 0x2c
  while (isSet == false)
  {
    //wont allow for 0 or 65535 as set points
    //this is so the set points actually do anything
    //as well as to not confuse the argon
    int dialValue = map(analogRead(DIAL_PIN), 0, 4095, 1, 65534);
   b42aa:	f04f 0900 	mov.w	r9, #0
   b42ae:	2010      	movs	r0, #16
   b42b0:	f003 ff2b 	bl	b810a <analogRead>
   b42b4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   b42b8:	9300      	str	r3, [sp, #0]
   b42ba:	f640 72ff 	movw	r2, #4095	; 0xfff
   b42be:	2301      	movs	r3, #1
   b42c0:	2100      	movs	r1, #0
   b42c2:	f003 f835 	bl	b7330 <_Z3mapiiiii>
   b42c6:	4606      	mov	r6, r0

    if (digitalRead(BUTTON) == HIGH && pointOne < 1)
   b42c8:	2005      	movs	r0, #5
   b42ca:	f003 ff0b 	bl	b80e4 <digitalRead>
   b42ce:	2801      	cmp	r0, #1
   b42d0:	4f4b      	ldr	r7, [pc, #300]	; (b4400 <_Z9setPointsv+0x160>)
   b42d2:	d10a      	bne.n	b42ea <_Z9setPointsv+0x4a>
   b42d4:	f8d8 3000 	ldr.w	r3, [r8]
   b42d8:	2b00      	cmp	r3, #0
   b42da:	dc06      	bgt.n	b42ea <_Z9setPointsv+0x4a>
    {
      pointOne = dialValue;
      delay(200); // added a delay because a human would
   b42dc:	20c8      	movs	r0, #200	; 0xc8
      pointOne = dialValue;
   b42de:	f8c8 6000 	str.w	r6, [r8]
      delay(200); // added a delay because a human would
   b42e2:	f003 f831 	bl	b7348 <delay>
   b42e6:	2500      	movs	r5, #0
   b42e8:	e00c      	b.n	b4304 <_Z9setPointsv+0x64>
      // press the button for multiple cycles of loop(),
      // thus setting both points in one press
    }
    else if (digitalRead(BUTTON) == HIGH && pointTwo < 1)
   b42ea:	2005      	movs	r0, #5
   b42ec:	f003 fefa 	bl	b80e4 <digitalRead>
   b42f0:	2801      	cmp	r0, #1
   b42f2:	4605      	mov	r5, r0
   b42f4:	d1f7      	bne.n	b42e6 <_Z9setPointsv+0x46>
   b42f6:	683b      	ldr	r3, [r7, #0]
   b42f8:	2b00      	cmp	r3, #0
   b42fa:	dcf4      	bgt.n	b42e6 <_Z9setPointsv+0x46>
    {
      pointTwo = dialValue;
      delay(200);
   b42fc:	20c8      	movs	r0, #200	; 0xc8
      pointTwo = dialValue;
   b42fe:	603e      	str	r6, [r7, #0]
      delay(200);
   b4300:	f003 f822 	bl	b7348 <delay>
      isSet = true;
    }

    //need to find the larger and smaller points for future comparisons
    lowPoint = min(pointOne, pointTwo);
   b4304:	493f      	ldr	r1, [pc, #252]	; (b4404 <_Z9setPointsv+0x164>)
   b4306:	683b      	ldr	r3, [r7, #0]
    highPoint = max(pointOne, pointTwo);

    //communicating with the user throught the OLED
    display.clearDisplay();
   b4308:	4c3f      	ldr	r4, [pc, #252]	; (b4408 <_Z9setPointsv+0x168>)
    lowPoint = min(pointOne, pointTwo);
   b430a:	f8d8 2000 	ldr.w	r2, [r8]
   b430e:	429a      	cmp	r2, r3
   b4310:	bfd4      	ite	le
   b4312:	600a      	strle	r2, [r1, #0]
   b4314:	600b      	strgt	r3, [r1, #0]
    highPoint = max(pointOne, pointTwo);
   b4316:	493d      	ldr	r1, [pc, #244]	; (b440c <_Z9setPointsv+0x16c>)
    display.clearDisplay();
   b4318:	4620      	mov	r0, r4
    highPoint = max(pointOne, pointTwo);
   b431a:	429a      	cmp	r2, r3
   b431c:	bfac      	ite	ge
   b431e:	600a      	strge	r2, [r1, #0]
   b4320:	600b      	strlt	r3, [r1, #0]
    display.clearDisplay();
   b4322:	f001 fef3 	bl	b610c <_ZN16Adafruit_SSD130612clearDisplayEv>
    display.setCursor(0, 0);
    display.println("Set your points.");
   b4326:	493a      	ldr	r1, [pc, #232]	; (b4410 <_Z9setPointsv+0x170>)
   b4328:	f8c4 9010 	str.w	r9, [r4, #16]
   b432c:	4620      	mov	r0, r4
   b432e:	f002 ff6a 	bl	b7206 <_ZN5Print7printlnEPKc>
	StringSumHelper(const char *p) : String(p) {}
   b4332:	4938      	ldr	r1, [pc, #224]	; (b4414 <_Z9setPointsv+0x174>)
   b4334:	a806      	add	r0, sp, #24
   b4336:	f002 fe72 	bl	b701e <_ZN6StringC1EPK19__FlashStringHelper>
    display.println("Potentiometer:" + String(dialValue));
   b433a:	220a      	movs	r2, #10
   b433c:	4631      	mov	r1, r6
   b433e:	a802      	add	r0, sp, #8
   b4340:	f002 fead 	bl	b709e <_ZN6StringC1Eih>
   b4344:	a902      	add	r1, sp, #8
   b4346:	a806      	add	r0, sp, #24
   b4348:	f002 fed3 	bl	b70f2 <_ZplRK15StringSumHelperRK6String>
   b434c:	6801      	ldr	r1, [r0, #0]
   b434e:	4620      	mov	r0, r4
   b4350:	f002 ff59 	bl	b7206 <_ZN5Print7printlnEPKc>
   b4354:	a802      	add	r0, sp, #8
   b4356:	f002 fe17 	bl	b6f88 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b435a:	a806      	add	r0, sp, #24
   b435c:	f002 fe14 	bl	b6f88 <_ZN6StringD1Ev>
	StringSumHelper(const char *p) : String(p) {}
   b4360:	492d      	ldr	r1, [pc, #180]	; (b4418 <_Z9setPointsv+0x178>)
   b4362:	a806      	add	r0, sp, #24
   b4364:	f002 fe5b 	bl	b701e <_ZN6StringC1EPK19__FlashStringHelper>
    display.println("Point One:" + String(pointOne));
   b4368:	220a      	movs	r2, #10
   b436a:	f8d8 1000 	ldr.w	r1, [r8]
   b436e:	a802      	add	r0, sp, #8
   b4370:	f002 fe95 	bl	b709e <_ZN6StringC1Eih>
   b4374:	a902      	add	r1, sp, #8
   b4376:	a806      	add	r0, sp, #24
   b4378:	f002 febb 	bl	b70f2 <_ZplRK15StringSumHelperRK6String>
   b437c:	6801      	ldr	r1, [r0, #0]
   b437e:	4620      	mov	r0, r4
   b4380:	f002 ff41 	bl	b7206 <_ZN5Print7printlnEPKc>
   b4384:	a802      	add	r0, sp, #8
   b4386:	f002 fdff 	bl	b6f88 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b438a:	a806      	add	r0, sp, #24
   b438c:	f002 fdfc 	bl	b6f88 <_ZN6StringD1Ev>
	StringSumHelper(const char *p) : String(p) {}
   b4390:	4922      	ldr	r1, [pc, #136]	; (b441c <_Z9setPointsv+0x17c>)
   b4392:	a806      	add	r0, sp, #24
   b4394:	f002 fe43 	bl	b701e <_ZN6StringC1EPK19__FlashStringHelper>
    display.println("Point Two:" + String(pointTwo));
   b4398:	220a      	movs	r2, #10
   b439a:	6839      	ldr	r1, [r7, #0]
   b439c:	a802      	add	r0, sp, #8
   b439e:	f002 fe7e 	bl	b709e <_ZN6StringC1Eih>
   b43a2:	a902      	add	r1, sp, #8
   b43a4:	a806      	add	r0, sp, #24
   b43a6:	f002 fea4 	bl	b70f2 <_ZplRK15StringSumHelperRK6String>
   b43aa:	6801      	ldr	r1, [r0, #0]
   b43ac:	4620      	mov	r0, r4
   b43ae:	f002 ff2a 	bl	b7206 <_ZN5Print7printlnEPKc>
   b43b2:	a802      	add	r0, sp, #8
   b43b4:	f002 fde8 	bl	b6f88 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b43b8:	a806      	add	r0, sp, #24
   b43ba:	f002 fde5 	bl	b6f88 <_ZN6StringD1Ev>
    display.display();
   b43be:	4620      	mov	r0, r4
   b43c0:	f002 f912 	bl	b65e8 <_ZN16Adafruit_SSD13067displayEv>
  while (isSet == false)
   b43c4:	2d00      	cmp	r5, #0
   b43c6:	f43f af72 	beq.w	b42ae <_Z9setPointsv+0xe>
  }

  delay(500);
   b43ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b43ce:	f002 ffbb 	bl	b7348 <delay>
  display.clearDisplay();
   b43d2:	4620      	mov	r0, r4
   b43d4:	f001 fe9a 	bl	b610c <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setCursor(0, 0);
  display.println("Thank you for setting");
   b43d8:	4911      	ldr	r1, [pc, #68]	; (b4420 <_Z9setPointsv+0x180>)
   b43da:	f8c4 9010 	str.w	r9, [r4, #16]
   b43de:	4620      	mov	r0, r4
   b43e0:	f002 ff11 	bl	b7206 <_ZN5Print7printlnEPKc>
  display.println("your points.");
   b43e4:	490f      	ldr	r1, [pc, #60]	; (b4424 <_Z9setPointsv+0x184>)
   b43e6:	4620      	mov	r0, r4
   b43e8:	f002 ff0d 	bl	b7206 <_ZN5Print7printlnEPKc>
  display.display();
   b43ec:	4620      	mov	r0, r4
   b43ee:	f002 f8fb 	bl	b65e8 <_ZN16Adafruit_SSD13067displayEv>
  delay(1500);
   b43f2:	f240 50dc 	movw	r0, #1500	; 0x5dc
}
   b43f6:	b00b      	add	sp, #44	; 0x2c
   b43f8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  delay(1500);
   b43fc:	f002 bfa4 	b.w	b7348 <delay>
   b4400:	2003e690 	.word	0x2003e690
   b4404:	2003e684 	.word	0x2003e684
   b4408:	2003e600 	.word	0x2003e600
   b440c:	2003e670 	.word	0x2003e670
   b4410:	000b8fdd 	.word	0x000b8fdd
   b4414:	000b8fee 	.word	0x000b8fee
   b4418:	000b8ffd 	.word	0x000b8ffd
   b441c:	000b9008 	.word	0x000b9008
   b4420:	000b9013 	.word	0x000b9013
   b4424:	000b8fe1 	.word	0x000b8fe1
   b4428:	2003e68c 	.word	0x2003e68c

000b442c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:
#endif
    }

private:

    void internalReconnect() {
   b442c:	b508      	push	{r3, lr}
        state = CONNECTING;
   b442e:	2300      	movs	r3, #0
   b4430:	7743      	strb	r3, [r0, #29]
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   b4432:	6800      	ldr	r0, [r0, #0]
   b4434:	f003 fca0 	bl	b7d78 <_ZN9TCPClient4stopEv>
        conn.disconnect();
        BlynkOnDisconnected();
    }
   b4438:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        BlynkOnDisconnected();
   b443c:	f002 b974 	b.w	b6728 <BlynkNoOpCbk>

000b4440 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   b4440:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    iterator begin() const { return iterator(buff, buff+len); }
   b4444:	eb01 0902 	add.w	r9, r1, r2
   b4448:	b08f      	sub	sp, #60	; 0x3c
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   b444a:	4549      	cmp	r1, r9
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b444c:	e9cd 1905 	strd	r1, r9, [sp, #20]
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   b4450:	4680      	mov	r8, r0
   b4452:	460d      	mov	r5, r1
   b4454:	4616      	mov	r6, r2
    if (it >= param.end())
   b4456:	f080 8092 	bcs.w	b457e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
    if (++it >= param.end())
   b445a:	a805      	add	r0, sp, #20
   b445c:	880f      	ldrh	r7, [r1, #0]
   b445e:	f7ff fe4b 	bl	b40f8 <_ZN10BlynkParam8iteratorppEv>
   b4462:	6803      	ldr	r3, [r0, #0]
   b4464:	454b      	cmp	r3, r9
   b4466:	f080 808a 	bcs.w	b457e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        return;

    const uint8_t pin = BLYNK_DECODE_PIN(it);
   b446a:	a805      	add	r0, sp, #20
   b446c:	f7ff fe3a 	bl	b40e4 <_ZNK10BlynkParam8iterator5asIntEv>

    switch(cmd16) {
   b4470:	f247 2376 	movw	r3, #29302	; 0x7276
   b4474:	429f      	cmp	r7, r3
    const uint8_t pin = BLYNK_DECODE_PIN(it);
   b4476:	b2c4      	uxtb	r4, r0
    switch(cmd16) {
   b4478:	f000 80a9 	beq.w	b45ce <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x18e>
   b447c:	d827      	bhi.n	b44ce <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x8e>
   b447e:	f247 2361 	movw	r3, #29281	; 0x7261
   b4482:	429f      	cmp	r7, r3
   b4484:	d07e      	beq.n	b4584 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x144>
   b4486:	f247 2364 	movw	r3, #29284	; 0x7264
   b448a:	429f      	cmp	r7, r3
   b448c:	d042      	beq.n	b4514 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xd4>
   b448e:	f646 5370 	movw	r3, #28016	; 0x6d70
   b4492:	429f      	cmp	r7, r3
   b4494:	d128      	bne.n	b44e8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xa8>

    case BLYNK_HW_PM: {
        while (it < param.end()) {
            const uint8_t pin = BLYNK_DECODE_PIN(it);
            ++it;
            if (!strcmp(it.asStr(), "in")) {
   b4496:	4e63      	ldr	r6, [pc, #396]	; (b4624 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1e4>)
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   b4498:	4f63      	ldr	r7, [pc, #396]	; (b4628 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1e8>)
   b449a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; b463c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1fc>
        while (it < param.end()) {
   b449e:	9b05      	ldr	r3, [sp, #20]
   b44a0:	4599      	cmp	r9, r3
   b44a2:	d96c      	bls.n	b457e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   b44a4:	a805      	add	r0, sp, #20
   b44a6:	f7ff fe1d 	bl	b40e4 <_ZNK10BlynkParam8iterator5asIntEv>
   b44aa:	b2c4      	uxtb	r4, r0
            ++it;
   b44ac:	a805      	add	r0, sp, #20
   b44ae:	f7ff fe23 	bl	b40f8 <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b44b2:	9d05      	ldr	r5, [sp, #20]
            if (!strcmp(it.asStr(), "in")) {
   b44b4:	4631      	mov	r1, r6
   b44b6:	4628      	mov	r0, r5
   b44b8:	f004 fc3c 	bl	b8d34 <strcmp>
   b44bc:	4601      	mov	r1, r0
   b44be:	b9e0      	cbnz	r0, b44fa <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xba>
                pinMode(pin, OUTPUT);
   b44c0:	4620      	mov	r0, r4
   b44c2:	f003 fde5 	bl	b8090 <pinMode>
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
#endif
            }
            ++it;
   b44c6:	a805      	add	r0, sp, #20
   b44c8:	f7ff fe16 	bl	b40f8 <_ZN10BlynkParam8iteratorppEv>
        while (it < param.end()) {
   b44cc:	e7e7      	b.n	b449e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x5e>
    switch(cmd16) {
   b44ce:	f247 7364 	movw	r3, #30564	; 0x7764
   b44d2:	429f      	cmp	r7, r3
   b44d4:	d03f      	beq.n	b4556 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x116>
   b44d6:	f247 7376 	movw	r3, #30582	; 0x7776
   b44da:	429f      	cmp	r7, r3
   b44dc:	f000 8087 	beq.w	b45ee <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ae>
   b44e0:	f247 7361 	movw	r3, #30561	; 0x7761
   b44e4:	429f      	cmp	r7, r3
   b44e6:	d05f      	beq.n	b45a8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x168>
        BlynkParam param2(start, len - (start - (char*)buff));
        callWriteHandler(pin, param2);
    } break;
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   b44e8:	2300      	movs	r3, #0
   b44ea:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b44ee:	2202      	movs	r2, #2
   b44f0:	9200      	str	r2, [sp, #0]
   b44f2:	f8b8 201a 	ldrh.w	r2, [r8, #26]
   b44f6:	4619      	mov	r1, r3
   b44f8:	e029      	b.n	b454e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x10e>
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   b44fa:	4639      	mov	r1, r7
   b44fc:	4628      	mov	r0, r5
   b44fe:	f004 fc19 	bl	b8d34 <strcmp>
   b4502:	b128      	cbz	r0, b4510 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xd0>
   b4504:	4641      	mov	r1, r8
   b4506:	4628      	mov	r0, r5
   b4508:	f004 fc14 	bl	b8d34 <strcmp>
   b450c:	2800      	cmp	r0, #0
   b450e:	d1da      	bne.n	b44c6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x86>
                pinMode(pin, OUTPUT);
   b4510:	2101      	movs	r1, #1
   b4512:	e7d5      	b.n	b44c0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x80>
        : buff((char*)addr), len(length), buff_size(buffsize)
   b4514:	ab0a      	add	r3, sp, #40	; 0x28
        rsp.add("dw");
   b4516:	4945      	ldr	r1, [pc, #276]	; (b462c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ec>)
   b4518:	9307      	str	r3, [sp, #28]
   b451a:	a807      	add	r0, sp, #28
   b451c:	2310      	movs	r3, #16
   b451e:	2500      	movs	r5, #0
   b4520:	e9cd 5308 	strd	r5, r3, [sp, #32]
   b4524:	f7ff fdf7 	bl	b4116 <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   b4528:	a807      	add	r0, sp, #28
   b452a:	4621      	mov	r1, r4
   b452c:	f7ff fe10 	bl	b4150 <_ZN10BlynkParam3addEi>
        rsp.add(digitalRead(pin));
   b4530:	4620      	mov	r0, r4
   b4532:	f003 fdd7 	bl	b80e4 <digitalRead>
        rsp.add(analogRead(pin));
   b4536:	4601      	mov	r1, r0
   b4538:	a807      	add	r0, sp, #28
   b453a:	f7ff fe1b 	bl	b4174 <_ZN10BlynkParam3addEl>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
   b453e:	9b08      	ldr	r3, [sp, #32]
   b4540:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b4544:	3b01      	subs	r3, #1
   b4546:	9300      	str	r3, [sp, #0]
   b4548:	9b07      	ldr	r3, [sp, #28]
   b454a:	462a      	mov	r2, r5
   b454c:	2114      	movs	r1, #20
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   b454e:	4640      	mov	r0, r8
   b4550:	f000 fb0e 	bl	b4b70 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
   b4554:	e013      	b.n	b457e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        if (++it >= param.end())
   b4556:	a805      	add	r0, sp, #20
   b4558:	f7ff fdce 	bl	b40f8 <_ZN10BlynkParam8iteratorppEv>
   b455c:	6803      	ldr	r3, [r0, #0]
   b455e:	4599      	cmp	r9, r3
   b4560:	d90d      	bls.n	b457e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        pinMode(pin, OUTPUT);
   b4562:	b2a4      	uxth	r4, r4
   b4564:	2101      	movs	r1, #1
   b4566:	4620      	mov	r0, r4
   b4568:	f003 fd92 	bl	b8090 <pinMode>
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
   b456c:	a805      	add	r0, sp, #20
   b456e:	f7ff fdb9 	bl	b40e4 <_ZNK10BlynkParam8iterator5asIntEv>
   b4572:	1e01      	subs	r1, r0, #0
   b4574:	bf18      	it	ne
   b4576:	2101      	movne	r1, #1
   b4578:	4620      	mov	r0, r4
   b457a:	f003 fd9a 	bl	b80b2 <digitalWrite>
    }
}
   b457e:	b00f      	add	sp, #60	; 0x3c
   b4580:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b4584:	ab0a      	add	r3, sp, #40	; 0x28
   b4586:	9307      	str	r3, [sp, #28]
        rsp.add("aw");
   b4588:	a807      	add	r0, sp, #28
   b458a:	2310      	movs	r3, #16
   b458c:	4928      	ldr	r1, [pc, #160]	; (b4630 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f0>)
   b458e:	2500      	movs	r5, #0
   b4590:	e9cd 5308 	strd	r5, r3, [sp, #32]
   b4594:	f7ff fdbf 	bl	b4116 <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   b4598:	a807      	add	r0, sp, #28
   b459a:	4621      	mov	r1, r4
   b459c:	f7ff fdd8 	bl	b4150 <_ZN10BlynkParam3addEi>
        rsp.add(analogRead(pin));
   b45a0:	4620      	mov	r0, r4
   b45a2:	f003 fdb2 	bl	b810a <analogRead>
   b45a6:	e7c6      	b.n	b4536 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xf6>
        if (++it >= param.end())
   b45a8:	a805      	add	r0, sp, #20
   b45aa:	f7ff fda5 	bl	b40f8 <_ZN10BlynkParam8iteratorppEv>
   b45ae:	6803      	ldr	r3, [r0, #0]
   b45b0:	4599      	cmp	r9, r3
   b45b2:	d9e4      	bls.n	b457e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        pinMode(pin, OUTPUT);
   b45b4:	b2a4      	uxth	r4, r4
   b45b6:	2101      	movs	r1, #1
   b45b8:	4620      	mov	r0, r4
   b45ba:	f003 fd69 	bl	b8090 <pinMode>
        analogWrite(pin, it.asInt());
   b45be:	a805      	add	r0, sp, #20
   b45c0:	f7ff fd90 	bl	b40e4 <_ZNK10BlynkParam8iterator5asIntEv>
   b45c4:	4601      	mov	r1, r0
   b45c6:	4620      	mov	r0, r4
   b45c8:	f003 fdb6 	bl	b8138 <_Z11analogWritetm>
    } break;
   b45cc:	e7d7      	b.n	b457e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        }
    }

    void callReadHandler(int pin) {
        BlynkReq req = { (uint8_t)pin };
        WidgetReadHandler handler = GetReadHandler(pin);
   b45ce:	4620      	mov	r0, r4
        BlynkReq req = { (uint8_t)pin };
   b45d0:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
        WidgetReadHandler handler = GetReadHandler(pin);
   b45d4:	f002 f8aa 	bl	b672c <GetReadHandler>
        if (handler && (handler != BlynkWidgetRead)) {
   b45d8:	4603      	mov	r3, r0
            handler(req);
   b45da:	a80a      	add	r0, sp, #40	; 0x28
        if (handler && (handler != BlynkWidgetRead)) {
   b45dc:	b123      	cbz	r3, b45e8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a8>
   b45de:	4a15      	ldr	r2, [pc, #84]	; (b4634 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>)
   b45e0:	4293      	cmp	r3, r2
   b45e2:	d001      	beq.n	b45e8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a8>
            handler(req);
   b45e4:	4798      	blx	r3
   b45e6:	e7ca      	b.n	b457e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        } else {
            BlynkWidgetReadDefault(req);
   b45e8:	f002 f89c 	bl	b6724 <BlynkWidgetRead>
        }
    }
   b45ec:	e7c7      	b.n	b457e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        ++it;
   b45ee:	a805      	add	r0, sp, #20
   b45f0:	f7ff fd82 	bl	b40f8 <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b45f4:	9b05      	ldr	r3, [sp, #20]
        BlynkReq req = { (uint8_t)pin };
   b45f6:	f88d 401c 	strb.w	r4, [sp, #28]
        BlynkParam param2(start, len - (start - (char*)buff));
   b45fa:	1b5d      	subs	r5, r3, r5
   b45fc:	1b75      	subs	r5, r6, r5
        WidgetWriteHandler handler = GetWriteHandler(pin);
   b45fe:	4620      	mov	r0, r4
        : buff((char*)addr), len(length), buff_size(length)
   b4600:	e9cd 350a 	strd	r3, r5, [sp, #40]	; 0x28
   b4604:	950c      	str	r5, [sp, #48]	; 0x30
   b4606:	f002 f89b 	bl	b6740 <GetWriteHandler>
        if (handler && (handler != BlynkWidgetWrite)) {
   b460a:	4603      	mov	r3, r0
            handler(req, param);
   b460c:	a90a      	add	r1, sp, #40	; 0x28
   b460e:	a807      	add	r0, sp, #28
        if (handler && (handler != BlynkWidgetWrite)) {
   b4610:	b123      	cbz	r3, b461c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1dc>
   b4612:	4a09      	ldr	r2, [pc, #36]	; (b4638 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f8>)
   b4614:	4293      	cmp	r3, r2
   b4616:	d001      	beq.n	b461c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1dc>
            handler(req, param);
   b4618:	4798      	blx	r3
   b461a:	e7b0      	b.n	b457e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
            BlynkWidgetWriteDefault(req, param);
   b461c:	f002 f883 	bl	b6726 <BlynkWidgetWrite>
    } break;
   b4620:	e7ad      	b.n	b457e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
   b4622:	bf00      	nop
   b4624:	000b9029 	.word	0x000b9029
   b4628:	000b902c 	.word	0x000b902c
   b462c:	000b9034 	.word	0x000b9034
   b4630:	000b9037 	.word	0x000b9037
   b4634:	000b6725 	.word	0x000b6725
   b4638:	000b6727 	.word	0x000b6727
   b463c:	000b9030 	.word	0x000b9030

000b4640 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
    return true;
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
   b4640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4644:	b08c      	sub	sp, #48	; 0x30
   b4646:	af04      	add	r7, sp, #16
   b4648:	4604      	mov	r4, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
   b464a:	2205      	movs	r2, #5
   b464c:	6800      	ldr	r0, [r0, #0]
   b464e:	1d39      	adds	r1, r7, #4
   b4650:	f002 fe47 	bl	b72e2 <_ZN6Stream9readBytesEPcj>

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
   b4654:	b398      	cbz	r0, b46be <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x7e>
        return 0;
    }

    if (sizeof(hdr) != rlen) {
   b4656:	2805      	cmp	r0, #5
   b4658:	d004      	beq.n	b4664 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24>
        return false;
   b465a:	2000      	movs	r0, #0
}
   b465c:	3720      	adds	r7, #32
   b465e:	46bd      	mov	sp, r7
   b4660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
   b4664:	f8b7 3005 	ldrh.w	r3, [r7, #5]
   b4668:	ba5b      	rev16	r3, r3
   b466a:	b29a      	uxth	r2, r3
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   b466c:	f8a7 3005 	strh.w	r3, [r7, #5]
   b4670:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   b4674:	ba5b      	rev16	r3, r3
   b4676:	fa1f f883 	uxth.w	r8, r3
    hdr.length = ntohs(hdr.length);
   b467a:	f8a7 3007 	strh.w	r3, [r7, #7]
    if (ret < 0 || hdr.msg_id == 0) {
   b467e:	2a00      	cmp	r2, #0
   b4680:	d0eb      	beq.n	b465a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a>
    if (hdr.type == BLYNK_CMD_RESPONSE) {
   b4682:	793b      	ldrb	r3, [r7, #4]
   b4684:	bb23      	cbnz	r3, b46d0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x90>
        lastActivityIn = BlynkMillis();
   b4686:	f002 f84b 	bl	b6720 <_Z11BlynkMillisv>
   b468a:	4602      	mov	r2, r0
   b468c:	60e0      	str	r0, [r4, #12]
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   b468e:	7f60      	ldrb	r0, [r4, #29]
   b4690:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   b4694:	b9c0      	cbnz	r0, b46c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x88>
   b4696:	f8b7 1005 	ldrh.w	r1, [r7, #5]
   b469a:	2901      	cmp	r1, #1
   b469c:	d114      	bne.n	b46c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x88>
            switch (hdr.length) {
   b469e:	2b09      	cmp	r3, #9
   b46a0:	d00f      	beq.n	b46c2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x82>
   b46a2:	2bc8      	cmp	r3, #200	; 0xc8
   b46a4:	d001      	beq.n	b46aa <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x6a>
   b46a6:	2b04      	cmp	r3, #4
   b46a8:	d1d8      	bne.n	b465c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = CONNECTED;
   b46aa:	2501      	movs	r5, #1
                lastHeartbeat = lastActivityIn;
   b46ac:	6162      	str	r2, [r4, #20]
                this->sendInfo();
   b46ae:	4620      	mov	r0, r4
                state = CONNECTED;
   b46b0:	7765      	strb	r5, [r4, #29]
                this->sendInfo();
   b46b2:	f000 fb57 	bl	b4d64 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                BLYNK_RUN_YIELD();
   b46b6:	f7ff fd09 	bl	b40cc <_ZN10CloudClass7processEv>
                BlynkOnConnected();
   b46ba:	f002 f835 	bl	b6728 <BlynkNoOpCbk>
        return true; // Considered OK (no data on input)
   b46be:	2001      	movs	r0, #1
   b46c0:	e7cc      	b.n	b465c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = TOKEN_INVALID;
   b46c2:	2303      	movs	r3, #3
   b46c4:	7763      	strb	r3, [r4, #29]
                break;
   b46c6:	e7c9      	b.n	b465c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
   b46c8:	1f58      	subs	r0, r3, #5
   b46ca:	bf18      	it	ne
   b46cc:	2001      	movne	r0, #1
   b46ce:	e7c5      	b.n	b465c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
    if (hdr.length > BLYNK_MAX_READBYTES) {
   b46d0:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
   b46d4:	d903      	bls.n	b46de <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x9e>
        internalReconnect();
   b46d6:	4620      	mov	r0, r4
   b46d8:	f7ff fea8 	bl	b442c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   b46dc:	e7ef      	b.n	b46be <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x7e>
    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
   b46de:	f108 0308 	add.w	r3, r8, #8
   b46e2:	466e      	mov	r6, sp
   b46e4:	08db      	lsrs	r3, r3, #3
   b46e6:	eba6 03c3 	sub.w	r3, r6, r3, lsl #3
   b46ea:	469d      	mov	sp, r3
   b46ec:	ad04      	add	r5, sp, #16
   b46ee:	6820      	ldr	r0, [r4, #0]
   b46f0:	4642      	mov	r2, r8
   b46f2:	4629      	mov	r1, r5
   b46f4:	f002 fdf5 	bl	b72e2 <_ZN6Stream9readBytesEPcj>
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
   b46f8:	4580      	cmp	r8, r0
   b46fa:	f04f 0000 	mov.w	r0, #0
   b46fe:	d17f      	bne.n	b4800 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c0>
    inputBuffer[hdr.length] = '\0';
   b4700:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   b4704:	54e8      	strb	r0, [r5, r3]
    lastActivityIn = BlynkMillis();
   b4706:	f002 f80b 	bl	b6720 <_Z11BlynkMillisv>
    switch (hdr.type)
   b470a:	793b      	ldrb	r3, [r7, #4]
    lastActivityIn = BlynkMillis();
   b470c:	60e0      	str	r0, [r4, #12]
    switch (hdr.type)
   b470e:	2b14      	cmp	r3, #20
   b4710:	f000 80a6 	beq.w	b4860 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x220>
   b4714:	d848      	bhi.n	b47a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x168>
   b4716:	2b0f      	cmp	r3, #15
   b4718:	f000 80a2 	beq.w	b4860 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x220>
   b471c:	d807      	bhi.n	b472e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xee>
   b471e:	2b02      	cmp	r3, #2
   b4720:	d048      	beq.n	b47b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x174>
   b4722:	2b06      	cmp	r3, #6
   b4724:	d051      	beq.n	b47ca <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18a>
        internalReconnect();
   b4726:	4620      	mov	r0, r4
   b4728:	f7ff fe80 	bl	b442c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   b472c:	e058      	b.n	b47e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a0>
    switch (hdr.type)
   b472e:	2b11      	cmp	r3, #17
   b4730:	d1f9      	bne.n	b4726 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xe6>
        BlynkReq req = { 0 };
   b4732:	2300      	movs	r3, #0
   b4734:	703b      	strb	r3, [r7, #0]
        BlynkParam param(inputBuffer, hdr.length);
   b4736:	f8b7 3007 	ldrh.w	r3, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   b473a:	442b      	add	r3, r5
        if (it >= param.end())
   b473c:	429d      	cmp	r5, r3
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b473e:	e9c7 5303 	strd	r5, r3, [r7, #12]
   b4742:	d24d      	bcs.n	b47e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a0>
        ++it;
   b4744:	f107 000c 	add.w	r0, r7, #12
   b4748:	f8d5 8000 	ldr.w	r8, [r5]
   b474c:	f7ff fcd4 	bl	b40f8 <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b4750:	68fb      	ldr	r3, [r7, #12]
        unsigned length = hdr.length - (start - (char*)inputBuffer);
   b4752:	f8b7 1007 	ldrh.w	r1, [r7, #7]
   b4756:	1b5d      	subs	r5, r3, r5
   b4758:	1b4d      	subs	r5, r1, r5
        : buff((char*)addr), len(length), buff_size(length)
   b475a:	e9c7 3505 	strd	r3, r5, [r7, #20]
        msgIdOutOverride = hdr.msg_id;
   b475e:	687b      	ldr	r3, [r7, #4]
   b4760:	61fd      	str	r5, [r7, #28]
   b4762:	f3c3 230f 	ubfx	r3, r3, #8, #16
   b4766:	8363      	strh	r3, [r4, #26]
   b4768:	4b64      	ldr	r3, [pc, #400]	; (b48fc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2bc>)
   b476a:	4598      	cmp	r8, r3
   b476c:	f000 80bf 	beq.w	b48ee <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2ae>
   b4770:	f200 808c 	bhi.w	b488c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24c>
   b4774:	f5a3 237f 	sub.w	r3, r3, #1044480	; 0xff000
   b4778:	f46f 7200 	mvn.w	r2, #512	; 0x200
   b477c:	4413      	add	r3, r2
   b477e:	4598      	cmp	r8, r3
   b4780:	f000 809d 	beq.w	b48be <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x27e>
   b4784:	d879      	bhi.n	b487a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23a>
   b4786:	f5a3 3300 	sub.w	r3, r3, #131072	; 0x20000
   b478a:	3b06      	subs	r3, #6
   b478c:	4598      	cmp	r8, r3
   b478e:	f000 809c 	beq.w	b48ca <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x28a>
   b4792:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   b4796:	3303      	adds	r3, #3
   b4798:	4598      	cmp	r8, r3
   b479a:	d16b      	bne.n	b4874 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
   b479c:	f107 0114 	add.w	r1, r7, #20
   b47a0:	4638      	mov	r0, r7
   b47a2:	f001 ffc0 	bl	b6726 <BlynkWidgetWrite>
   b47a6:	e065      	b.n	b4874 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
    switch (hdr.type)
   b47a8:	2b29      	cmp	r3, #41	; 0x29
   b47aa:	d01b      	beq.n	b47e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a4>
   b47ac:	2b37      	cmp	r3, #55	; 0x37
   b47ae:	d017      	beq.n	b47e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a0>
   b47b0:	2b1d      	cmp	r3, #29
   b47b2:	d1b8      	bne.n	b4726 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xe6>
        if (state == CONNECTING) {
   b47b4:	7f63      	ldrb	r3, [r4, #29]
   b47b6:	b943      	cbnz	r3, b47ca <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18a>
            state = CONNECTED;
   b47b8:	2301      	movs	r3, #1
   b47ba:	7763      	strb	r3, [r4, #29]
            this->sendInfo();
   b47bc:	4620      	mov	r0, r4
   b47be:	f000 fad1 	bl	b4d64 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            BLYNK_RUN_YIELD();
   b47c2:	f7ff fc83 	bl	b40cc <_ZN10CloudClass7processEv>
            BlynkOnConnected();
   b47c6:	f001 ffaf 	bl	b6728 <BlynkNoOpCbk>
        sendCmd(BLYNK_CMD_RESPONSE, id, NULL, rsp);
   b47ca:	2300      	movs	r3, #0
   b47cc:	21c8      	movs	r1, #200	; 0xc8
   b47ce:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   b47d2:	9100      	str	r1, [sp, #0]
   b47d4:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b47d8:	4619      	mov	r1, r3
   b47da:	4620      	mov	r0, r4
   b47dc:	f000 f9c8 	bl	b4b70 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    switch (hdr.type)
   b47e0:	2001      	movs	r0, #1
   b47e2:	e00d      	b.n	b4800 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c0>
        if (!redir_serv) {
   b47e4:	68a3      	ldr	r3, [r4, #8]
   b47e6:	b91b      	cbnz	r3, b47f0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1b0>
             redir_serv = (char*)malloc(64);
   b47e8:	2040      	movs	r0, #64	; 0x40
   b47ea:	f002 fa3f 	bl	b6c6c <malloc>
   b47ee:	60a0      	str	r0, [r4, #8]
        BlynkParam param(inputBuffer, hdr.length);
   b47f0:	f8b7 8007 	ldrh.w	r8, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   b47f4:	44a8      	add	r8, r5
        if (it >= param.end())
   b47f6:	4545      	cmp	r5, r8
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b47f8:	e9c7 5805 	strd	r5, r8, [r7, #20]
   b47fc:	d302      	bcc.n	b4804 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c4>
            return false;
   b47fe:	2000      	movs	r0, #0
   b4800:	46b5      	mov	sp, r6
   b4802:	e72b      	b.n	b465c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        strncpy(redir_serv, it.asStr(), 64);
   b4804:	4629      	mov	r1, r5
   b4806:	2240      	movs	r2, #64	; 0x40
   b4808:	68a0      	ldr	r0, [r4, #8]
   b480a:	f004 faad 	bl	b8d68 <strncpy>
        redir_serv[63] = '\0';
   b480e:	68a3      	ldr	r3, [r4, #8]
   b4810:	2500      	movs	r5, #0
   b4812:	f883 503f 	strb.w	r5, [r3, #63]	; 0x3f
        if (++it < param.end())
   b4816:	f107 0014 	add.w	r0, r7, #20
   b481a:	f7ff fc6d 	bl	b40f8 <_ZN10BlynkParam8iteratorppEv>
   b481e:	6803      	ldr	r3, [r0, #0]
   b4820:	4598      	cmp	r8, r3
   b4822:	d91b      	bls.n	b485c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x21c>
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b4824:	6978      	ldr	r0, [r7, #20]
   b4826:	b120      	cbz	r0, b4832 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1f2>
   b4828:	69bb      	ldr	r3, [r7, #24]
   b482a:	4298      	cmp	r0, r3
   b482c:	d214      	bcs.n	b4858 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x218>
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   b482e:	f004 fa39 	bl	b8ca4 <atol>
            redir_port = it.asLong();
   b4832:	b285      	uxth	r5, r0
    void disconnect() { client.stop(); }
   b4834:	6820      	ldr	r0, [r4, #0]
   b4836:	f003 fa9f 	bl	b7d78 <_ZN9TCPClient4stopEv>
        conn.begin(redir_serv, redir_port);
   b483a:	6823      	ldr	r3, [r4, #0]
   b483c:	68a2      	ldr	r2, [r4, #8]
        domain = d;
   b483e:	635a      	str	r2, [r3, #52]	; 0x34
        port = p;
   b4840:	871d      	strh	r5, [r3, #56]	; 0x38
        state = CONNECTING;
   b4842:	2300      	movs	r3, #0
   b4844:	7763      	strb	r3, [r4, #29]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   b4846:	f001 ff6b 	bl	b6720 <_Z11BlynkMillisv>
   b484a:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   b484e:	3808      	subs	r0, #8
   b4850:	e9c4 0003 	strd	r0, r0, [r4, #12]
   b4854:	6160      	str	r0, [r4, #20]
   b4856:	e7c3      	b.n	b47e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a0>
   b4858:	4628      	mov	r0, r5
   b485a:	e7ea      	b.n	b4832 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1f2>
        uint16_t redir_port = BLYNK_DEFAULT_PORT;
   b485c:	2550      	movs	r5, #80	; 0x50
   b485e:	e7e9      	b.n	b4834 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1f4>
        msgIdOutOverride = hdr.msg_id;
   b4860:	687b      	ldr	r3, [r7, #4]
        this->processCmd(inputBuffer, hdr.length);
   b4862:	f8b7 2007 	ldrh.w	r2, [r7, #7]
        msgIdOutOverride = hdr.msg_id;
   b4866:	f3c3 230f 	ubfx	r3, r3, #8, #16
   b486a:	8363      	strh	r3, [r4, #26]
        this->processCmd(inputBuffer, hdr.length);
   b486c:	4629      	mov	r1, r5
   b486e:	4620      	mov	r0, r4
   b4870:	f7ff fde6 	bl	b4440 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        msgIdOutOverride = 0;
   b4874:	2300      	movs	r3, #0
   b4876:	8363      	strh	r3, [r4, #26]
   b4878:	e7b2      	b.n	b47e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a0>
   b487a:	4b21      	ldr	r3, [pc, #132]	; (b4900 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c0>)
   b487c:	4598      	cmp	r8, r3
   b487e:	d1f9      	bne.n	b4874 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_DBG:  BlynkWidgetWriteInternalPinDBG(req, param2);    break;
   b4880:	f107 0114 	add.w	r1, r7, #20
   b4884:	4638      	mov	r0, r7
   b4886:	f001 ff4e 	bl	b6726 <BlynkWidgetWrite>
   b488a:	e7f3      	b.n	b4874 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
   b488c:	4b1d      	ldr	r3, [pc, #116]	; (b4904 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c4>)
   b488e:	4598      	cmp	r8, r3
   b4890:	d021      	beq.n	b48d6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x296>
   b4892:	f103 639f 	add.w	r3, r3, #83361792	; 0x4f80000
   b4896:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   b489a:	f503 7380 	add.w	r3, r3, #256	; 0x100
   b489e:	4598      	cmp	r8, r3
   b48a0:	d01f      	beq.n	b48e2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2a2>
   b48a2:	f103 436e 	add.w	r3, r3, #3992977408	; 0xee000000
   b48a6:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   b48aa:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   b48ae:	4598      	cmp	r8, r3
   b48b0:	d1e0      	bne.n	b4874 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_META: BlynkWidgetWriteInternalPinMETA(req, param2);   break;
   b48b2:	f107 0114 	add.w	r1, r7, #20
   b48b6:	4638      	mov	r0, r7
   b48b8:	f001 ff35 	bl	b6726 <BlynkWidgetWrite>
   b48bc:	e7da      	b.n	b4874 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_UTC:  BlynkWidgetWriteInternalPinUTC(req, param2);    break;
   b48be:	f107 0114 	add.w	r1, r7, #20
   b48c2:	4638      	mov	r0, r7
   b48c4:	f001 ff2f 	bl	b6726 <BlynkWidgetWrite>
   b48c8:	e7d4      	b.n	b4874 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
   b48ca:	f107 0114 	add.w	r1, r7, #20
   b48ce:	4638      	mov	r0, r7
   b48d0:	f001 ff29 	bl	b6726 <BlynkWidgetWrite>
   b48d4:	e7ce      	b.n	b4874 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
   b48d6:	f107 0114 	add.w	r1, r7, #20
   b48da:	4638      	mov	r0, r7
   b48dc:	f001 ff23 	bl	b6726 <BlynkWidgetWrite>
   b48e0:	e7c8      	b.n	b4874 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
   b48e2:	f107 0114 	add.w	r1, r7, #20
   b48e6:	4638      	mov	r0, r7
   b48e8:	f001 ff1d 	bl	b6726 <BlynkWidgetWrite>
   b48ec:	e7c2      	b.n	b4874 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_VFS:  BlynkWidgetWriteInternalPinVFS(req, param2);    break;
   b48ee:	f107 0114 	add.w	r1, r7, #20
   b48f2:	4638      	mov	r0, r7
   b48f4:	f001 ff17 	bl	b6726 <BlynkWidgetWrite>
   b48f8:	e7bc      	b.n	b4874 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
   b48fa:	bf00      	nop
   b48fc:	00736676 	.word	0x00736676
   b4900:	00676264 	.word	0x00676264
   b4904:	6e6f6361 	.word	0x6e6f6361

000b4908 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>:
bool BlynkProtocol<Transp>::run(bool avail)
   b4908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b490c:	4604      	mov	r4, r0
   b490e:	b08c      	sub	sp, #48	; 0x30
   b4910:	460d      	mov	r5, r1
    BLYNK_RUN_YIELD();
   b4912:	f7ff fbdb 	bl	b40cc <_ZN10CloudClass7processEv>
    if (state == DISCONNECTED) {
   b4916:	7f63      	ldrb	r3, [r4, #29]
   b4918:	2b02      	cmp	r3, #2
   b491a:	d01e      	beq.n	b495a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x52>
    return false;
}

class BlynkHelperAutoInc {
public:
    BlynkHelperAutoInc(uint8_t& counter) : c(counter) { ++c; }
   b491c:	7f23      	ldrb	r3, [r4, #28]
    if (msgIdOutOverride || nesting > 2) {
   b491e:	8b62      	ldrh	r2, [r4, #26]
   b4920:	3301      	adds	r3, #1
   b4922:	b2db      	uxtb	r3, r3
   b4924:	7723      	strb	r3, [r4, #28]
   b4926:	b9aa      	cbnz	r2, b4954 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
   b4928:	2b02      	cmp	r3, #2
   b492a:	d813      	bhi.n	b4954 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   b492c:	6820      	ldr	r0, [r4, #0]
   b492e:	f003 f8eb 	bl	b7b08 <_ZN9TCPClient9connectedEv>
    if (conn.connected()) {
   b4932:	b1a8      	cbz	r0, b4960 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x58>
        while (avail || conn.available() > 0) {
   b4934:	b925      	cbnz	r5, b4940 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x38>
    int available() { return client.available(); }
   b4936:	6820      	ldr	r0, [r4, #0]
   b4938:	f003 f9c4 	bl	b7cc4 <_ZN9TCPClient9availableEv>
   b493c:	2800      	cmp	r0, #0
   b493e:	dd0f      	ble.n	b4960 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x58>
            if (!processInput()) {
   b4940:	4620      	mov	r0, r4
   b4942:	f7ff fe7d 	bl	b4640 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
   b4946:	2800      	cmp	r0, #0
   b4948:	d1f5      	bne.n	b4936 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x2e>
    void disconnect() { client.stop(); }
   b494a:	6820      	ldr	r0, [r4, #0]
   b494c:	f003 fa14 	bl	b7d78 <_ZN9TCPClient4stopEv>
                BlynkOnDisconnected();
   b4950:	f001 feea 	bl	b6728 <BlynkNoOpCbk>
    ~BlynkHelperAutoInc() { --c; }
   b4954:	7f23      	ldrb	r3, [r4, #28]
   b4956:	3b01      	subs	r3, #1
   b4958:	7723      	strb	r3, [r4, #28]
}
   b495a:	b00c      	add	sp, #48	; 0x30
   b495c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    const millis_time_t t = BlynkMillis();
   b4960:	f001 fede 	bl	b6720 <_Z11BlynkMillisv>
   b4964:	4605      	mov	r5, r0
    bool connected() { return client.connected(); }
   b4966:	6820      	ldr	r0, [r4, #0]
   b4968:	f003 f8ce 	bl	b7b08 <_ZN9TCPClient9connectedEv>
    if (state == CONNECTED) {
   b496c:	7f67      	ldrb	r7, [r4, #29]
   b496e:	2f01      	cmp	r7, #1
   b4970:	4606      	mov	r6, r0
   b4972:	d124      	bne.n	b49be <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xb6>
        if (!tconn) {
   b4974:	b920      	cbnz	r0, b4980 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x78>
            lastHeartbeat = t;
   b4976:	6165      	str	r5, [r4, #20]
            internalReconnect();
   b4978:	4620      	mov	r0, r4
   b497a:	f7ff fd57 	bl	b442c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   b497e:	e7e9      	b.n	b4954 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
   b4980:	68e3      	ldr	r3, [r4, #12]
   b4982:	f24f 6218 	movw	r2, #63000	; 0xf618
   b4986:	1aeb      	subs	r3, r5, r3
   b4988:	4293      	cmp	r3, r2
   b498a:	d8f5      	bhi.n	b4978 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x70>
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   b498c:	f64a 72c8 	movw	r2, #45000	; 0xafc8
   b4990:	4293      	cmp	r3, r2
   b4992:	d803      	bhi.n	b499c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x94>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b4994:	6923      	ldr	r3, [r4, #16]
   b4996:	1aeb      	subs	r3, r5, r3
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   b4998:	4293      	cmp	r3, r2
   b499a:	d9db      	bls.n	b4954 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b499c:	6963      	ldr	r3, [r4, #20]
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b499e:	f241 7270 	movw	r2, #6000	; 0x1770
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b49a2:	1aeb      	subs	r3, r5, r3
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b49a4:	4293      	cmp	r3, r2
   b49a6:	d9d5      	bls.n	b4954 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
            sendCmd(BLYNK_CMD_PING);
   b49a8:	2300      	movs	r3, #0
   b49aa:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b49ae:	9300      	str	r3, [sp, #0]
   b49b0:	461a      	mov	r2, r3
   b49b2:	2106      	movs	r1, #6
   b49b4:	4620      	mov	r0, r4
   b49b6:	f000 f8db 	bl	b4b70 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
                lastLogin = t;
   b49ba:	6165      	str	r5, [r4, #20]
                return false;
   b49bc:	e7ca      	b.n	b4954 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
    } else if (state == CONNECTING) {
   b49be:	2f00      	cmp	r7, #0
   b49c0:	d1c8      	bne.n	b4954 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b49c2:	6963      	ldr	r3, [r4, #20]
   b49c4:	1aeb      	subs	r3, r5, r3
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
   b49c6:	b140      	cbz	r0, b49da <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xd2>
   b49c8:	f241 7270 	movw	r2, #6000	; 0x1770
   b49cc:	4293      	cmp	r3, r2
   b49ce:	d9c1      	bls.n	b4954 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
    void disconnect() { client.stop(); }
   b49d0:	6820      	ldr	r0, [r4, #0]
   b49d2:	f003 f9d1 	bl	b7d78 <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   b49d6:	7767      	strb	r7, [r4, #29]
            return false;
   b49d8:	e7bc      	b.n	b4954 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
   b49da:	f241 3288 	movw	r2, #5000	; 0x1388
   b49de:	4293      	cmp	r3, r2
   b49e0:	d9b8      	bls.n	b4954 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
   b49e2:	6820      	ldr	r0, [r4, #0]
   b49e4:	f003 f9c8 	bl	b7d78 <_ZN9TCPClient4stopEv>
            if (!conn.connect()) {
   b49e8:	f8d4 c000 	ldr.w	ip, [r4]
        if (domain) {
   b49ec:	f8dc e034 	ldr.w	lr, [ip, #52]	; 0x34
   b49f0:	f8bc 8038 	ldrh.w	r8, [ip, #56]	; 0x38
   b49f4:	f1be 0f00 	cmp.w	lr, #0
   b49f8:	d01b      	beq.n	b4a32 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x12a>
            return (1 == client.connect(domain, port));
   b49fa:	4633      	mov	r3, r6
   b49fc:	4642      	mov	r2, r8
   b49fe:	4671      	mov	r1, lr
   b4a00:	4660      	mov	r0, ip
   b4a02:	f003 f803 	bl	b7a0c <_ZN9TCPClient7connectEPKctm>
   b4a06:	2801      	cmp	r0, #1
   b4a08:	d1d7      	bne.n	b49ba <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xb2>
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b4a0a:	6863      	ldr	r3, [r4, #4]
   b4a0c:	9305      	str	r3, [sp, #20]
            msgIdOut = 1;
   b4a0e:	2501      	movs	r5, #1
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b4a10:	4618      	mov	r0, r3
            msgIdOut = 1;
   b4a12:	8325      	strh	r5, [r4, #24]
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b4a14:	f004 f9a0 	bl	b8d58 <strlen>
   b4a18:	2200      	movs	r2, #0
   b4a1a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b4a1e:	9b05      	ldr	r3, [sp, #20]
   b4a20:	9000      	str	r0, [sp, #0]
   b4a22:	462a      	mov	r2, r5
   b4a24:	211d      	movs	r1, #29
   b4a26:	4620      	mov	r0, r4
   b4a28:	f000 f8a2 	bl	b4b70 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastLogin = lastActivityOut;
   b4a2c:	6923      	ldr	r3, [r4, #16]
   b4a2e:	6163      	str	r3, [r4, #20]
            return true;
   b4a30:	e790      	b.n	b4954 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b4a32:	4b08      	ldr	r3, [pc, #32]	; (b4a54 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x14c>)
   b4a34:	9306      	str	r3, [sp, #24]
   b4a36:	f10c 0720 	add.w	r7, ip, #32
   b4a3a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b4a3c:	ae07      	add	r6, sp, #28
   b4a3e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b4a40:	683b      	ldr	r3, [r7, #0]
   b4a42:	7033      	strb	r3, [r6, #0]
            return (1 == client.connect(addr, port));
   b4a44:	4642      	mov	r2, r8
   b4a46:	4673      	mov	r3, lr
   b4a48:	a906      	add	r1, sp, #24
   b4a4a:	4660      	mov	r0, ip
   b4a4c:	f003 f8be 	bl	b7bcc <_ZN9TCPClient7connectE9IPAddresstm>
   b4a50:	e7d9      	b.n	b4a06 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xfe>
   b4a52:	bf00      	nop
   b4a54:	000ba15c 	.word	0x000ba15c

000b4a58 <setup>:

void setup()
{
   b4a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4a5c:	b094      	sub	sp, #80	; 0x50
  //initiating everything
  Blynk.begin("ReeKDrWOFRmLjVs3W3Uz6jWYITSo2D5J", IPAddress(167, 172, 234, 162), 8080);
   b4a5e:	23a2      	movs	r3, #162	; 0xa2
   b4a60:	22ac      	movs	r2, #172	; 0xac
   b4a62:	21a7      	movs	r1, #167	; 0xa7
   b4a64:	9300      	str	r3, [sp, #0]
   b4a66:	a802      	add	r0, sp, #8
   b4a68:	23ea      	movs	r3, #234	; 0xea
   b4a6a:	f002 fda7 	bl	b75bc <_ZN9IPAddressC1Ehhhh>
   b4a6e:	ac03      	add	r4, sp, #12

    void begin( const char* auth,
                IPAddress addr,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
   b4a70:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4a74:	f001 fe52 	bl	b671c <_Z10BlynkDelaym>
   b4a78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b4a7a:	af09      	add	r7, sp, #36	; 0x24
   b4a7c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
        this->authkey = auth;
   b4a7e:	4d38      	ldr	r5, [pc, #224]	; (b4b60 <setup+0x108>)
   b4a80:	6823      	ldr	r3, [r4, #0]
   b4a82:	703b      	strb	r3, [r7, #0]
   b4a84:	4b37      	ldr	r3, [pc, #220]	; (b4b64 <setup+0x10c>)
   b4a86:	606b      	str	r3, [r5, #4]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   b4a88:	f001 fe4a 	bl	b6720 <_Z11BlynkMillisv>
   b4a8c:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   b4a90:	3808      	subs	r0, #8
   b4a92:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
   b4a96:	e9c5 0003 	strd	r0, r0, [r5, #12]
   b4a9a:	6168      	str	r0, [r5, #20]
   b4a9c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b4aa0:	ae0f      	add	r6, sp, #60	; 0x3c
   b4aa2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
        this->conn.begin(addr, port);
   b4aa4:	682c      	ldr	r4, [r5, #0]
   b4aa6:	683b      	ldr	r3, [r7, #0]
   b4aa8:	7033      	strb	r3, [r6, #0]
   b4aaa:	af0f      	add	r7, sp, #60	; 0x3c
        port = p;
   b4aac:	f641 7390 	movw	r3, #8080	; 0x1f90
   b4ab0:	8723      	strh	r3, [r4, #56]	; 0x38
   b4ab2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
        domain = NULL;
   b4ab4:	f04f 0800 	mov.w	r8, #0
   b4ab8:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
   b4abc:	3420      	adds	r4, #32
   b4abe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4ac0:	6833      	ldr	r3, [r6, #0]
   b4ac2:	7023      	strb	r3, [r4, #0]
        while ((state != CONNECTED) &&
   b4ac4:	f244 664f 	movw	r6, #17999	; 0x464f
    void disconnect() { client.stop(); }
   b4ac8:	6828      	ldr	r0, [r5, #0]
   b4aca:	f003 f955 	bl	b7d78 <_ZN9TCPClient4stopEv>
        state = CONNECTING;
   b4ace:	f885 801d 	strb.w	r8, [r5, #29]
        millis_time_t started = BlynkMillis();
   b4ad2:	f001 fe25 	bl	b6720 <_Z11BlynkMillisv>
   b4ad6:	4604      	mov	r4, r0
        while ((state != CONNECTED) &&
   b4ad8:	7f6b      	ldrb	r3, [r5, #29]
   b4ada:	2b01      	cmp	r3, #1
   b4adc:	d00c      	beq.n	b4af8 <setup+0xa0>
               (BlynkMillis() - started < timeout))
   b4ade:	f001 fe1f 	bl	b6720 <_Z11BlynkMillisv>
   b4ae2:	1b00      	subs	r0, r0, r4
        while ((state != CONNECTED) &&
   b4ae4:	42b0      	cmp	r0, r6
   b4ae6:	d804      	bhi.n	b4af2 <setup+0x9a>
            run();
   b4ae8:	2100      	movs	r1, #0
   b4aea:	4628      	mov	r0, r5
   b4aec:	f7ff ff0c 	bl	b4908 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
        while ((state != CONNECTED) &&
   b4af0:	e7f2      	b.n	b4ad8 <setup+0x80>
        config(auth, addr, port);
        while(this->connect() != true) {}
   b4af2:	7f6b      	ldrb	r3, [r5, #29]
   b4af4:	2b01      	cmp	r3, #1
   b4af6:	d1e7      	bne.n	b4ac8 <setup+0x70>

  Wire.begin();
   b4af8:	f003 fb9c 	bl	b8234 <_Z19__fetch_global_Wirev>
   b4afc:	f002 fe8e 	bl	b781c <_ZN7TwoWire5beginEv>

  proximitySensor.begin();
   b4b00:	f003 fb98 	bl	b8234 <_Z19__fetch_global_Wirev>
   b4b04:	4601      	mov	r1, r0
   b4b06:	4818      	ldr	r0, [pc, #96]	; (b4b68 <setup+0x110>)
   b4b08:	f001 f962 	bl	b5dd0 <_ZN8VCNL40405beginER7TwoWire>
  proximitySensor.powerOnAmbient();
   b4b0c:	4816      	ldr	r0, [pc, #88]	; (b4b68 <setup+0x110>)
   b4b0e:	f001 f8f2 	bl	b5cf6 <_ZN8VCNL404014powerOnAmbientEv>

  display.setup();
   b4b12:	4816      	ldr	r0, [pc, #88]	; (b4b6c <setup+0x114>)
   b4b14:	f000 ff7e 	bl	b5a14 <_ZN16OledWingAdafruit5setupEv>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b4b18:	4814      	ldr	r0, [pc, #80]	; (b4b6c <setup+0x114>)
   b4b1a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b4b1e:	6143      	str	r3, [r0, #20]
  display.setTextColor(WHITE);
  display.setTextSize(1);
   b4b20:	2101      	movs	r1, #1
   b4b22:	f000 ff28 	bl	b5976 <_ZN12Adafruit_GFX11setTextSizeEh>

  pinMode(DIAL_PIN, INPUT);
   b4b26:	2100      	movs	r1, #0
   b4b28:	2010      	movs	r0, #16
   b4b2a:	f003 fab1 	bl	b8090 <pinMode>
  pinMode(BUTTON, INPUT);
   b4b2e:	2100      	movs	r1, #0
   b4b30:	2005      	movs	r0, #5
   b4b32:	f003 faad 	bl	b8090 <pinMode>
  pinMode(TEMP_IN, INPUT);
   b4b36:	2100      	movs	r1, #0
   b4b38:	200e      	movs	r0, #14
   b4b3a:	f003 faa9 	bl	b8090 <pinMode>

  pinMode(RED_LED, OUTPUT);
   b4b3e:	2101      	movs	r1, #1
   b4b40:	2006      	movs	r0, #6
   b4b42:	f003 faa5 	bl	b8090 <pinMode>
  pinMode(BLUE_LED, OUTPUT);
   b4b46:	2101      	movs	r1, #1
   b4b48:	2008      	movs	r0, #8
   b4b4a:	f003 faa1 	bl	b8090 <pinMode>
  pinMode(GREEN_LED, OUTPUT);
   b4b4e:	2101      	movs	r1, #1
   b4b50:	2007      	movs	r0, #7
   b4b52:	f003 fa9d 	bl	b8090 <pinMode>

  //Initially sets the points
  setPoints();
}
   b4b56:	b014      	add	sp, #80	; 0x50
   b4b58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  setPoints();
   b4b5c:	f7ff bba0 	b.w	b42a0 <_Z9setPointsv>
   b4b60:	2003e590 	.word	0x2003e590
   b4b64:	000b903a 	.word	0x000b903a
   b4b68:	2003e694 	.word	0x2003e694
   b4b6c:	2003e600 	.word	0x2003e600

000b4b70 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:
#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
   b4b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4b74:	b083      	sub	sp, #12
   b4b76:	af00      	add	r7, sp, #0
   b4b78:	4604      	mov	r4, r0
    bool connected() { return client.connected(); }
   b4b7a:	6800      	ldr	r0, [r0, #0]
   b4b7c:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   b4b7e:	4688      	mov	r8, r1
   b4b80:	4616      	mov	r6, r2
   b4b82:	4699      	mov	r9, r3
#endif
        internalReconnect();
        return;
    }

    lastActivityOut = BlynkMillis();
   b4b84:	46eb      	mov	fp, sp
   b4b86:	f002 ffbf 	bl	b7b08 <_ZN9TCPClient9connectedEv>
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && cmd != BLYNK_CMD_HW_LOGIN && state != CONNECTED) ) {
   b4b8a:	2800      	cmp	r0, #0
   b4b8c:	d07f      	beq.n	b4c8e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
   b4b8e:	f1b8 0f1d 	cmp.w	r8, #29
   b4b92:	d804      	bhi.n	b4b9e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x2e>
   b4b94:	4b4c      	ldr	r3, [pc, #304]	; (b4cc8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x158>)
   b4b96:	fa23 f308 	lsr.w	r3, r3, r8
   b4b9a:	07db      	lsls	r3, r3, #31
   b4b9c:	d402      	bmi.n	b4ba4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x34>
   b4b9e:	7f63      	ldrb	r3, [r4, #29]
   b4ba0:	2b01      	cmp	r3, #1
   b4ba2:	d174      	bne.n	b4c8e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
    if (0 == id) {
   b4ba4:	b946      	cbnz	r6, b4bb8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x48>
}

template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
   b4ba6:	8b66      	ldrh	r6, [r4, #26]
   b4ba8:	b936      	cbnz	r6, b4bb8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x48>
        return msgIdOutOverride;
    if (++msgIdOut == 0)
   b4baa:	8b23      	ldrh	r3, [r4, #24]
   b4bac:	3301      	adds	r3, #1
   b4bae:	b29b      	uxth	r3, r3
   b4bb0:	2b00      	cmp	r3, #0
   b4bb2:	d071      	beq.n	b4c98 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x128>
        msgIdOut = 1;
   b4bb4:	8323      	strh	r3, [r4, #24]
    return msgIdOut;
   b4bb6:	8b26      	ldrh	r6, [r4, #24]
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
   b4bb8:	f1a8 030c 	sub.w	r3, r8, #12
   b4bbc:	2b08      	cmp	r3, #8
   b4bbe:	d816      	bhi.n	b4bee <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
   b4bc0:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   b4bc4:	4293      	cmp	r3, r2
   b4bc6:	bf38      	it	cc
   b4bc8:	4613      	movcc	r3, r2
   b4bca:	f103 0a42 	add.w	sl, r3, #66	; 0x42
        int32_t wait_time = allowed_time - BlynkMillis();
   b4bce:	f001 fda7 	bl	b6720 <_Z11BlynkMillisv>
   b4bd2:	ebaa 0000 	sub.w	r0, sl, r0
        if (wait_time >= 0) {
   b4bd6:	2800      	cmp	r0, #0
   b4bd8:	db60      	blt.n	b4c9c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x12c>
                run();
   b4bda:	2100      	movs	r1, #0
   b4bdc:	4620      	mov	r0, r4
   b4bde:	f7ff fe93 	bl	b4908 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
                wait_time = allowed_time - BlynkMillis();
   b4be2:	f001 fd9d 	bl	b6720 <_Z11BlynkMillisv>
   b4be6:	ebaa 0000 	sub.w	r0, sl, r0
            while (wait_time >= 0) {
   b4bea:	2800      	cmp	r0, #0
   b4bec:	daf5      	bge.n	b4bda <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x6a>
    const size_t full_length = (sizeof(BlynkHeader)) +
   b4bee:	f1b9 0f00 	cmp.w	r9, #0
   b4bf2:	d05a      	beq.n	b4caa <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13a>
   b4bf4:	1d6b      	adds	r3, r5, #5
                               (data2 ? length2 : 0);
   b4bf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   b4bf8:	2a00      	cmp	r2, #0
   b4bfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
   b4bfc:	bf08      	it	eq
   b4bfe:	2200      	moveq	r2, #0
    const size_t full_length = (sizeof(BlynkHeader)) +
   b4c00:	eb03 0a02 	add.w	sl, r3, r2
    uint8_t buff[full_length];
   b4c04:	f10a 0307 	add.w	r3, sl, #7
   b4c08:	f023 0307 	bic.w	r3, r3, #7
   b4c0c:	ebad 0d03 	sub.w	sp, sp, r3
    hdr->length = htons(length+length2);
   b4c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    uint8_t buff[full_length];
   b4c12:	f8c7 d004 	str.w	sp, [r7, #4]
    hdr->length = htons(length+length2);
   b4c16:	18ea      	adds	r2, r5, r3
   b4c18:	f3c2 2307 	ubfx	r3, r2, #8, #8
    hdr->msg_id = htons(id);
   b4c1c:	ba76      	rev16	r6, r6
    hdr->length = htons(length+length2);
   b4c1e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hdr->type = cmd;
   b4c22:	f88d 8000 	strb.w	r8, [sp]
    hdr->msg_id = htons(id);
   b4c26:	f8ad 6001 	strh.w	r6, [sp, #1]
    hdr->length = htons(length+length2);
   b4c2a:	f8ad 3003 	strh.w	r3, [sp, #3]
    if (data && length) {
   b4c2e:	f1b9 0f00 	cmp.w	r9, #0
   b4c32:	d03c      	beq.n	b4cae <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
   b4c34:	2d00      	cmp	r5, #0
   b4c36:	d03a      	beq.n	b4cae <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
        memcpy(buff + pos, data, length);
   b4c38:	462a      	mov	r2, r5
   b4c3a:	4649      	mov	r1, r9
   b4c3c:	f10d 0005 	add.w	r0, sp, #5
   b4c40:	f004 f834 	bl	b8cac <memcpy>
        pos += length;
   b4c44:	1d68      	adds	r0, r5, #5
    if (data2 && length2) {
   b4c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   b4c48:	b13b      	cbz	r3, b4c5a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
   b4c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   b4c4c:	b12b      	cbz	r3, b4c5a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
        memcpy(buff + pos, data2, length2);
   b4c4e:	461a      	mov	r2, r3
   b4c50:	687b      	ldr	r3, [r7, #4]
   b4c52:	6b79      	ldr	r1, [r7, #52]	; 0x34
   b4c54:	4418      	add	r0, r3
   b4c56:	f004 f829 	bl	b8cac <memcpy>
    size_t pos = sizeof(BlynkHeader);
   b4c5a:	2500      	movs	r5, #0
    while (wlen < full_length) {
   b4c5c:	4555      	cmp	r5, sl
   b4c5e:	d22a      	bcs.n	b4cb6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x146>
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
   b4c60:	ebaa 0205 	sub.w	r2, sl, r5
        return client.write((const uint8_t*)buf, len);
   b4c64:	687b      	ldr	r3, [r7, #4]
   b4c66:	6820      	ldr	r0, [r4, #0]
   b4c68:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   b4c6c:	bf28      	it	cs
   b4c6e:	f44f 6280 	movcs.w	r2, #1024	; 0x400
   b4c72:	1959      	adds	r1, r3, r5
   b4c74:	f002 fe1f 	bl	b78b6 <_ZN9TCPClient5writeEPKhj>
   b4c78:	4606      	mov	r6, r0
        BlynkDelay(BLYNK_SEND_THROTTLE);
   b4c7a:	2000      	movs	r0, #0
   b4c7c:	f001 fd4e 	bl	b671c <_Z10BlynkDelaym>
        if (w == 0) {
   b4c80:	b9be      	cbnz	r6, b4cb2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x142>
    void disconnect() { client.stop(); }
   b4c82:	6820      	ldr	r0, [r4, #0]
   b4c84:	f003 f878 	bl	b7d78 <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   b4c88:	7766      	strb	r6, [r4, #29]
            BlynkOnDisconnected();
   b4c8a:	f001 fd4d 	bl	b6728 <BlynkNoOpCbk>
}
   b4c8e:	370c      	adds	r7, #12
   b4c90:	46dd      	mov	sp, fp
   b4c92:	46bd      	mov	sp, r7
   b4c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        msgIdOut = 1;
   b4c98:	2301      	movs	r3, #1
   b4c9a:	e78b      	b.n	b4bb4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
        } else if (nesting == 0) {
   b4c9c:	7f21      	ldrb	r1, [r4, #28]
   b4c9e:	2900      	cmp	r1, #0
   b4ca0:	d1a5      	bne.n	b4bee <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
            run();
   b4ca2:	4620      	mov	r0, r4
   b4ca4:	f7ff fe30 	bl	b4908 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
   b4ca8:	e7a1      	b.n	b4bee <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
    const size_t full_length = (sizeof(BlynkHeader)) +
   b4caa:	2305      	movs	r3, #5
   b4cac:	e7a3      	b.n	b4bf6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x86>
    size_t pos = sizeof(BlynkHeader);
   b4cae:	2005      	movs	r0, #5
   b4cb0:	e7c9      	b.n	b4c46 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xd6>
        wlen += w;
   b4cb2:	4435      	add	r5, r6
    while (wlen < full_length) {
   b4cb4:	e7d2      	b.n	b4c5c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xec>
    if (wlen != full_length) {
   b4cb6:	d003      	beq.n	b4cc0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x150>
        internalReconnect();
   b4cb8:	4620      	mov	r0, r4
   b4cba:	f7ff fbb7 	bl	b442c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return;
   b4cbe:	e7e6      	b.n	b4c8e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
    lastActivityOut = BlynkMillis();
   b4cc0:	f001 fd2e 	bl	b6720 <_Z11BlynkMillisv>
   b4cc4:	6120      	str	r0, [r4, #16]
   b4cc6:	e7e2      	b.n	b4c8e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
   b4cc8:	20000045 	.word	0x20000045

000b4ccc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE6notifyIA20_cEEvRKT_>:
    }

    // Please use Blynk.logEvent("event", "Description")
    template<typename T>
    BLYNK_DEPRECATED
    void notify(const T& msg) {
   b4ccc:	b530      	push	{r4, r5, lr}
   b4cce:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(buffsize)
   b4cd2:	ab08      	add	r3, sp, #32
   b4cd4:	2400      	movs	r4, #0
   b4cd6:	4605      	mov	r5, r0
   b4cd8:	9305      	str	r3, [sp, #20]
#if defined(BLYNK_TEMPLATE_ID)
        logEvent("notify", msg);
#else
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add(msg);
   b4cda:	a805      	add	r0, sp, #20
   b4cdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
   b4ce0:	e9cd 4306 	strd	r4, r3, [sp, #24]
   b4ce4:	f7ff fa17 	bl	b4116 <_ZN10BlynkParam3addEPKc>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_NOTIFY, 0, cmd.getBuffer(), cmd.getLength()-1);
   b4ce8:	9b06      	ldr	r3, [sp, #24]
   b4cea:	3b01      	subs	r3, #1
   b4cec:	9300      	str	r3, [sp, #0]
   b4cee:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b4cf2:	9b05      	ldr	r3, [sp, #20]
   b4cf4:	4622      	mov	r2, r4
   b4cf6:	210e      	movs	r1, #14
   b4cf8:	4628      	mov	r0, r5
   b4cfa:	f7ff ff39 	bl	b4b70 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
#endif
    }
   b4cfe:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   b4d02:	bd30      	pop	{r4, r5, pc}

000b4d04 <BlynkWidgetWrite1>:
BLYNK_WRITE(RESET) {
   b4d04:	b538      	push	{r3, r4, r5, lr}
    int         asInt() const       { return atoi(buff); }
   b4d06:	6808      	ldr	r0, [r1, #0]
   b4d08:	f003 ffc8 	bl	b8c9c <atoi>
 if (param.asInt()) {
   b4d0c:	b1e0      	cbz	r0, b4d48 <BlynkWidgetWrite1+0x44>
    pointOne = 0;
   b4d0e:	4b0f      	ldr	r3, [pc, #60]	; (b4d4c <BlynkWidgetWrite1+0x48>)
    display.clearDisplay();
   b4d10:	4c0f      	ldr	r4, [pc, #60]	; (b4d50 <BlynkWidgetWrite1+0x4c>)
    pointOne = 0;
   b4d12:	2500      	movs	r5, #0
   b4d14:	601d      	str	r5, [r3, #0]
    pointTwo = 0;
   b4d16:	4b0f      	ldr	r3, [pc, #60]	; (b4d54 <BlynkWidgetWrite1+0x50>)
    display.clearDisplay();
   b4d18:	4620      	mov	r0, r4
    pointTwo = 0;
   b4d1a:	601d      	str	r5, [r3, #0]
    display.clearDisplay();
   b4d1c:	f001 f9f6 	bl	b610c <_ZN16Adafruit_SSD130612clearDisplayEv>
    display.println("Clearing set points.");
   b4d20:	490d      	ldr	r1, [pc, #52]	; (b4d58 <BlynkWidgetWrite1+0x54>)
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b4d22:	6125      	str	r5, [r4, #16]
   b4d24:	4620      	mov	r0, r4
   b4d26:	f002 fa6e 	bl	b7206 <_ZN5Print7printlnEPKc>
    Blynk.notify("Set points cleared.");
   b4d2a:	490c      	ldr	r1, [pc, #48]	; (b4d5c <BlynkWidgetWrite1+0x58>)
   b4d2c:	480c      	ldr	r0, [pc, #48]	; (b4d60 <BlynkWidgetWrite1+0x5c>)
   b4d2e:	f7ff ffcd 	bl	b4ccc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE6notifyIA20_cEEvRKT_>
    display.display();
   b4d32:	4620      	mov	r0, r4
   b4d34:	f001 fc58 	bl	b65e8 <_ZN16Adafruit_SSD13067displayEv>
    delay(1000);
   b4d38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4d3c:	f002 fb04 	bl	b7348 <delay>
}
   b4d40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    setPoints();
   b4d44:	f7ff baac 	b.w	b42a0 <_Z9setPointsv>
}
   b4d48:	bd38      	pop	{r3, r4, r5, pc}
   b4d4a:	bf00      	nop
   b4d4c:	2003e68c 	.word	0x2003e68c
   b4d50:	2003e600 	.word	0x2003e600
   b4d54:	2003e690 	.word	0x2003e690
   b4d58:	000b905b 	.word	0x000b905b
   b4d5c:	000b9070 	.word	0x000b9070
   b4d60:	2003e590 	.word	0x2003e590

000b4d64 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:
void BlynkApi<Proto>::sendInfo()
   b4d64:	b500      	push	{lr}
   b4d66:	b095      	sub	sp, #84	; 0x54
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, profile+8, profile_len, profile_dyn.getBuffer(), profile_dyn.getLength());
   b4d68:	ab04      	add	r3, sp, #16
   b4d6a:	2200      	movs	r2, #0
   b4d6c:	9301      	str	r3, [sp, #4]
   b4d6e:	234f      	movs	r3, #79	; 0x4f
   b4d70:	9300      	str	r3, [sp, #0]
   b4d72:	9202      	str	r2, [sp, #8]
   b4d74:	4b03      	ldr	r3, [pc, #12]	; (b4d84 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x20>)
   b4d76:	2111      	movs	r1, #17
   b4d78:	f7ff fefa 	bl	b4b70 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
}
   b4d7c:	b015      	add	sp, #84	; 0x54
   b4d7e:	f85d fb04 	ldr.w	pc, [sp], #4
   b4d82:	bf00      	nop
   b4d84:	000b9160 	.word	0x000b9160

000b4d88 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJdEEEviDpT_>:
    void virtualWrite(int pin, Args... values) {
   b4d88:	b570      	push	{r4, r5, r6, lr}
   b4d8a:	ed2d 8b02 	vpush	{d8}
   b4d8e:	eeb0 8a40 	vmov.f32	s16, s0
   b4d92:	eef0 8a60 	vmov.f32	s17, s1
   b4d96:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
        : buff((char*)addr), len(length), buff_size(buffsize)
   b4d9a:	ab08      	add	r3, sp, #32
   b4d9c:	2400      	movs	r4, #0
   b4d9e:	4605      	mov	r5, r0
   b4da0:	460e      	mov	r6, r1
   b4da2:	9305      	str	r3, [sp, #20]
        cmd.add("vw");
   b4da4:	a805      	add	r0, sp, #20
   b4da6:	f44f 6380 	mov.w	r3, #1024	; 0x400
   b4daa:	4913      	ldr	r1, [pc, #76]	; (b4df8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJdEEEviDpT_+0x70>)
   b4dac:	e9cd 4306 	strd	r4, r3, [sp, #24]
   b4db0:	f7ff f9b1 	bl	b4116 <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   b4db4:	4631      	mov	r1, r6
   b4db6:	a805      	add	r0, sp, #20
   b4db8:	f7ff f9ca 	bl	b4150 <_ZN10BlynkParam3addEi>
    }

    inline
    void BlynkParam::add(double value)
    {
        len += snprintf(buff+len, buff_size-len, "%2.7f", value)+1;
   b4dbc:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
   b4dc0:	9805      	ldr	r0, [sp, #20]
   b4dc2:	4a0e      	ldr	r2, [pc, #56]	; (b4dfc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJdEEEviDpT_+0x74>)
   b4dc4:	1ac9      	subs	r1, r1, r3
   b4dc6:	ed8d 8b00 	vstr	d8, [sp]
   b4dca:	4418      	add	r0, r3
   b4dcc:	f001 ff66 	bl	b6c9c <snprintf>
   b4dd0:	1c43      	adds	r3, r0, #1
   b4dd2:	9806      	ldr	r0, [sp, #24]
   b4dd4:	4403      	add	r3, r0
   b4dd6:	9306      	str	r3, [sp, #24]
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   b4dd8:	3b01      	subs	r3, #1
   b4dda:	9300      	str	r3, [sp, #0]
   b4ddc:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b4de0:	9b05      	ldr	r3, [sp, #20]
   b4de2:	4622      	mov	r2, r4
   b4de4:	2114      	movs	r1, #20
   b4de6:	4628      	mov	r0, r5
   b4de8:	f7ff fec2 	bl	b4b70 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   b4dec:	f50d 6d84 	add.w	sp, sp, #1056	; 0x420
   b4df0:	ecbd 8b02 	vpop	{d8}
   b4df4:	bd70      	pop	{r4, r5, r6, pc}
   b4df6:	bf00      	nop
   b4df8:	000b9084 	.word	0x000b9084
   b4dfc:	000b9087 	.word	0x000b9087

000b4e00 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE6notifyI15StringSumHelperEEvRKT_>:
    void notify(const T& msg) {
   b4e00:	b530      	push	{r4, r5, lr}
   b4e02:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(buffsize)
   b4e06:	ab08      	add	r3, sp, #32
   b4e08:	2400      	movs	r4, #0
   b4e0a:	4605      	mov	r5, r0
   b4e0c:	9305      	str	r3, [sp, #20]
    add(str.c_str());
   b4e0e:	a805      	add	r0, sp, #20
        : buff((char*)addr), len(length), buff_size(buffsize)
   b4e10:	f44f 6380 	mov.w	r3, #1024	; 0x400
    add(str.c_str());
   b4e14:	6809      	ldr	r1, [r1, #0]
        : buff((char*)addr), len(length), buff_size(buffsize)
   b4e16:	e9cd 4306 	strd	r4, r3, [sp, #24]
    add(str.c_str());
   b4e1a:	f7ff f97c 	bl	b4116 <_ZN10BlynkParam3addEPKc>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_NOTIFY, 0, cmd.getBuffer(), cmd.getLength()-1);
   b4e1e:	9b06      	ldr	r3, [sp, #24]
   b4e20:	3b01      	subs	r3, #1
   b4e22:	9300      	str	r3, [sp, #0]
   b4e24:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b4e28:	9b05      	ldr	r3, [sp, #20]
   b4e2a:	4622      	mov	r2, r4
   b4e2c:	210e      	movs	r1, #14
   b4e2e:	4628      	mov	r0, r5
   b4e30:	f7ff fe9e 	bl	b4b70 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   b4e34:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   b4e38:	bd30      	pop	{r4, r5, pc}
   b4e3a:	0000      	movs	r0, r0
   b4e3c:	0000      	movs	r0, r0
	...

000b4e40 <loop>:

void loop()
{
   b4e40:	b5f0      	push	{r4, r5, r6, r7, lr}
  //keeps the display and blynk running
  Blynk.run();
   b4e42:	2100      	movs	r1, #0
{
   b4e44:	b089      	sub	sp, #36	; 0x24
  Blynk.run();
   b4e46:	4884      	ldr	r0, [pc, #528]	; (b5058 <loop+0x218>)
   b4e48:	4f84      	ldr	r7, [pc, #528]	; (b505c <loop+0x21c>)
   b4e4a:	f7ff fd5d 	bl	b4908 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
  display.loop();
   b4e4e:	4883      	ldr	r0, [pc, #524]	; (b505c <loop+0x21c>)
   b4e50:	f000 fe09 	bl	b5a66 <_ZN16OledWingAdafruit4loopEv>

  //finds and transmits temp to blynk
  reading = analogRead(TEMP_IN);
   b4e54:	200e      	movs	r0, #14
   b4e56:	f003 f958 	bl	b810a <analogRead>
   b4e5a:	4a81      	ldr	r2, [pc, #516]	; (b5060 <loop+0x220>)
   b4e5c:	17c1      	asrs	r1, r0, #31
   b4e5e:	e9c2 0100 	strd	r0, r1, [r2]
  voltage = (reading * 3.3) / 4095.0;
   b4e62:	f003 fca5 	bl	b87b0 <__aeabi_ul2d>
   b4e66:	a376      	add	r3, pc, #472	; (adr r3, b5040 <loop+0x200>)
   b4e68:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4e6c:	f003 fcd6 	bl	b881c <__aeabi_dmul>
   b4e70:	a375      	add	r3, pc, #468	; (adr r3, b5048 <loop+0x208>)
   b4e72:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4e76:	f003 fdfb 	bl	b8a70 <__aeabi_ddiv>
   b4e7a:	4b7a      	ldr	r3, [pc, #488]	; (b5064 <loop+0x224>)
   b4e7c:	4604      	mov	r4, r0
   b4e7e:	460d      	mov	r5, r1
   b4e80:	e9c3 4500 	strd	r4, r5, [r3]
  tempC = (voltage - 0.5) * 100;
   b4e84:	2200      	movs	r2, #0
   b4e86:	4b78      	ldr	r3, [pc, #480]	; (b5068 <loop+0x228>)
   b4e88:	f003 fb10 	bl	b84ac <__aeabi_dsub>
   b4e8c:	4b77      	ldr	r3, [pc, #476]	; (b506c <loop+0x22c>)
   b4e8e:	2200      	movs	r2, #0
   b4e90:	f003 fcc4 	bl	b881c <__aeabi_dmul>
   b4e94:	4b76      	ldr	r3, [pc, #472]	; (b5070 <loop+0x230>)
   b4e96:	4604      	mov	r4, r0
   b4e98:	460d      	mov	r5, r1
   b4e9a:	e9c3 4500 	strd	r4, r5, [r3]
  tempF = tempC * 1.8 + 32.0;
   b4e9e:	a36c      	add	r3, pc, #432	; (adr r3, b5050 <loop+0x210>)
   b4ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4ea4:	f003 fcba 	bl	b881c <__aeabi_dmul>
   b4ea8:	2200      	movs	r2, #0
   b4eaa:	4b72      	ldr	r3, [pc, #456]	; (b5074 <loop+0x234>)
   b4eac:	f003 fb00 	bl	b84b0 <__adddf3>
   b4eb0:	4b71      	ldr	r3, [pc, #452]	; (b5078 <loop+0x238>)
   b4eb2:	ec41 0b10 	vmov	d0, r0, r1
   b4eb6:	e9c3 0100 	strd	r0, r1, [r3]
  Blynk.virtualWrite(TEMP_GAUGE, tempF);
   b4eba:	4867      	ldr	r0, [pc, #412]	; (b5058 <loop+0x218>)
   b4ebc:	2100      	movs	r1, #0
   b4ebe:	f7ff ff63 	bl	b4d88 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJdEEEviDpT_>

  //detects and sets the OLED mode based on the buttons on the OLED display
  if (display.pressedA())
   b4ec2:	4866      	ldr	r0, [pc, #408]	; (b505c <loop+0x21c>)
   b4ec4:	f000 fde8 	bl	b5a98 <_ZN16OledWingAdafruit8pressedAEv>
   b4ec8:	2800      	cmp	r0, #0
   b4eca:	d047      	beq.n	b4f5c <loop+0x11c>
  {
    OLEDMode = "A";
   b4ecc:	496b      	ldr	r1, [pc, #428]	; (b507c <loop+0x23c>)
  {
    OLEDMode = "B";
  }
  else if (display.pressedC())
  {
    OLEDMode = "C";
   b4ece:	486c      	ldr	r0, [pc, #432]	; (b5080 <loop+0x240>)
   b4ed0:	f002 f8d3 	bl	b707a <_ZN6StringaSEPKc>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4ed4:	4969      	ldr	r1, [pc, #420]	; (b507c <loop+0x23c>)
   b4ed6:	486a      	ldr	r0, [pc, #424]	; (b5080 <loop+0x240>)
   b4ed8:	4e6a      	ldr	r6, [pc, #424]	; (b5084 <loop+0x244>)
   b4eda:	4d6b      	ldr	r5, [pc, #428]	; (b5088 <loop+0x248>)
   b4edc:	f002 f92a 	bl	b7134 <_ZNK6String6equalsEPKc>
  }

  //decides what to display based off the OLED mode
  if (OLEDMode == "A")
   b4ee0:	2800      	cmp	r0, #0
   b4ee2:	d048      	beq.n	b4f76 <loop+0x136>
  {
    //displays light
    displayAL();
   b4ee4:	f7ff f958 	bl	b4198 <_Z9displayALv>
    display.println("Low Point:" + String(lowPoint));
    display.display();
  }

  //turns off all the leds, but gets nullified for an led when that led gets turned on
  digitalWrite(RED_LED, LOW);
   b4ee8:	2100      	movs	r1, #0
   b4eea:	2006      	movs	r0, #6
   b4eec:	f003 f8e1 	bl	b80b2 <digitalWrite>
  digitalWrite(BLUE_LED, LOW);
  digitalWrite(GREEN_LED, LOW);

  //need to save the light level from the last cycle to detect if it passed a set point
  pastLight = ambientLight;
   b4ef0:	4c66      	ldr	r4, [pc, #408]	; (b508c <loop+0x24c>)
   b4ef2:	4f67      	ldr	r7, [pc, #412]	; (b5090 <loop+0x250>)
  digitalWrite(BLUE_LED, LOW);
   b4ef4:	2100      	movs	r1, #0
   b4ef6:	2008      	movs	r0, #8
   b4ef8:	f003 f8db 	bl	b80b2 <digitalWrite>
  digitalWrite(GREEN_LED, LOW);
   b4efc:	2100      	movs	r1, #0
   b4efe:	2007      	movs	r0, #7
   b4f00:	f003 f8d7 	bl	b80b2 <digitalWrite>
  pastLight = ambientLight;
   b4f04:	6823      	ldr	r3, [r4, #0]

  //gets the ambientLight
  ambientLight = proximitySensor.getAmbient();
   b4f06:	4863      	ldr	r0, [pc, #396]	; (b5094 <loop+0x254>)
  pastLight = ambientLight;
   b4f08:	603b      	str	r3, [r7, #0]
  ambientLight = proximitySensor.getAmbient();
   b4f0a:	f000 fe76 	bl	b5bfa <_ZN8VCNL404010getAmbientEv>

  //calculates what light level its detecting
  if (ambientLight < lowPoint)
   b4f0e:	682b      	ldr	r3, [r5, #0]
  ambientLight = proximitySensor.getAmbient();
   b4f10:	6020      	str	r0, [r4, #0]
  if (ambientLight < lowPoint)
   b4f12:	4298      	cmp	r0, r3
   b4f14:	da78      	bge.n	b5008 <loop+0x1c8>
  {
    lightLevel = "LOW";
   b4f16:	4960      	ldr	r1, [pc, #384]	; (b5098 <loop+0x258>)
   b4f18:	4860      	ldr	r0, [pc, #384]	; (b509c <loop+0x25c>)
   b4f1a:	f002 f8ae 	bl	b707a <_ZN6StringaSEPKc>
    digitalWrite(BLUE_LED, HIGH);
   b4f1e:	2101      	movs	r1, #1
   b4f20:	2008      	movs	r0, #8
    digitalWrite(RED_LED, HIGH);
  }
  else
  {
    lightLevel = "GOOD";
    digitalWrite(GREEN_LED, HIGH);
   b4f22:	f003 f8c6 	bl	b80b2 <digitalWrite>
  }

  //notifies the blynk app when the light level passed a set point
  if (pastLight > highPoint && ambientLight < highPoint)
   b4f26:	683a      	ldr	r2, [r7, #0]
   b4f28:	6833      	ldr	r3, [r6, #0]
   b4f2a:	429a      	cmp	r2, r3
   b4f2c:	dd7d      	ble.n	b502a <loop+0x1ea>
   b4f2e:	6821      	ldr	r1, [r4, #0]
   b4f30:	428b      	cmp	r3, r1
   b4f32:	dd7a      	ble.n	b502a <loop+0x1ea>
	StringSumHelper(const char *p) : String(p) {}
   b4f34:	495a      	ldr	r1, [pc, #360]	; (b50a0 <loop+0x260>)
   b4f36:	a804      	add	r0, sp, #16
   b4f38:	f002 f871 	bl	b701e <_ZN6StringC1EPK19__FlashStringHelper>
  {
    Blynk.notify("The Ambient Light Level passed the high point you set. The light level is " + lightLevel + ".");
  }
  else if (pastLight < lowPoint && ambientLight > lowPoint)
  {
    Blynk.notify("The Ambient Light Level passed the low point you set. The light level is " + lightLevel + ".");
   b4f3c:	4957      	ldr	r1, [pc, #348]	; (b509c <loop+0x25c>)
   b4f3e:	a804      	add	r0, sp, #16
   b4f40:	f002 f8d7 	bl	b70f2 <_ZplRK15StringSumHelperRK6String>
   b4f44:	4957      	ldr	r1, [pc, #348]	; (b50a4 <loop+0x264>)
   b4f46:	f002 f8e0 	bl	b710a <_ZplRK15StringSumHelperPKc>
   b4f4a:	4601      	mov	r1, r0
   b4f4c:	4842      	ldr	r0, [pc, #264]	; (b5058 <loop+0x218>)
   b4f4e:	f7ff ff57 	bl	b4e00 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE6notifyI15StringSumHelperEEvRKT_>
class StringSumHelper : public String
   b4f52:	a804      	add	r0, sp, #16
   b4f54:	f002 f818 	bl	b6f88 <_ZN6StringD1Ev>
  }
   b4f58:	b009      	add	sp, #36	; 0x24
   b4f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (display.pressedB())
   b4f5c:	4638      	mov	r0, r7
   b4f5e:	f000 fda5 	bl	b5aac <_ZN16OledWingAdafruit8pressedBEv>
   b4f62:	b108      	cbz	r0, b4f68 <loop+0x128>
    OLEDMode = "B";
   b4f64:	4950      	ldr	r1, [pc, #320]	; (b50a8 <loop+0x268>)
   b4f66:	e7b2      	b.n	b4ece <loop+0x8e>
  else if (display.pressedC())
   b4f68:	4638      	mov	r0, r7
   b4f6a:	f000 fda9 	bl	b5ac0 <_ZN16OledWingAdafruit8pressedCEv>
   b4f6e:	2800      	cmp	r0, #0
   b4f70:	d0b0      	beq.n	b4ed4 <loop+0x94>
    OLEDMode = "C";
   b4f72:	494e      	ldr	r1, [pc, #312]	; (b50ac <loop+0x26c>)
   b4f74:	e7ab      	b.n	b4ece <loop+0x8e>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4f76:	494c      	ldr	r1, [pc, #304]	; (b50a8 <loop+0x268>)
   b4f78:	4841      	ldr	r0, [pc, #260]	; (b5080 <loop+0x240>)
   b4f7a:	f002 f8db 	bl	b7134 <_ZNK6String6equalsEPKc>
  else if (OLEDMode == "B")
   b4f7e:	4604      	mov	r4, r0
   b4f80:	b110      	cbz	r0, b4f88 <loop+0x148>
    displayTemp();
   b4f82:	f7ff f937 	bl	b41f4 <_Z11displayTempv>
   b4f86:	e7af      	b.n	b4ee8 <loop+0xa8>
   b4f88:	4948      	ldr	r1, [pc, #288]	; (b50ac <loop+0x26c>)
   b4f8a:	483d      	ldr	r0, [pc, #244]	; (b5080 <loop+0x240>)
   b4f8c:	f002 f8d2 	bl	b7134 <_ZNK6String6equalsEPKc>
  else if (OLEDMode == "C")
   b4f90:	2800      	cmp	r0, #0
   b4f92:	d0a9      	beq.n	b4ee8 <loop+0xa8>
    display.clearDisplay();
   b4f94:	4831      	ldr	r0, [pc, #196]	; (b505c <loop+0x21c>)
   b4f96:	f001 f8b9 	bl	b610c <_ZN16Adafruit_SSD130612clearDisplayEv>
    display.println("Your Points:");
   b4f9a:	4945      	ldr	r1, [pc, #276]	; (b50b0 <loop+0x270>)
   b4f9c:	613c      	str	r4, [r7, #16]
   b4f9e:	482f      	ldr	r0, [pc, #188]	; (b505c <loop+0x21c>)
   b4fa0:	f002 f931 	bl	b7206 <_ZN5Print7printlnEPKc>
	StringSumHelper(const char *p) : String(p) {}
   b4fa4:	4943      	ldr	r1, [pc, #268]	; (b50b4 <loop+0x274>)
   b4fa6:	a804      	add	r0, sp, #16
   b4fa8:	f002 f839 	bl	b701e <_ZN6StringC1EPK19__FlashStringHelper>
    display.println("High Point:" + String(highPoint));
   b4fac:	220a      	movs	r2, #10
   b4fae:	6831      	ldr	r1, [r6, #0]
   b4fb0:	4668      	mov	r0, sp
   b4fb2:	f002 f874 	bl	b709e <_ZN6StringC1Eih>
   b4fb6:	4669      	mov	r1, sp
   b4fb8:	a804      	add	r0, sp, #16
   b4fba:	f002 f89a 	bl	b70f2 <_ZplRK15StringSumHelperRK6String>
   b4fbe:	6801      	ldr	r1, [r0, #0]
   b4fc0:	4826      	ldr	r0, [pc, #152]	; (b505c <loop+0x21c>)
   b4fc2:	f002 f920 	bl	b7206 <_ZN5Print7printlnEPKc>
   b4fc6:	4668      	mov	r0, sp
   b4fc8:	f001 ffde 	bl	b6f88 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4fcc:	a804      	add	r0, sp, #16
   b4fce:	f001 ffdb 	bl	b6f88 <_ZN6StringD1Ev>
	StringSumHelper(const char *p) : String(p) {}
   b4fd2:	4939      	ldr	r1, [pc, #228]	; (b50b8 <loop+0x278>)
   b4fd4:	a804      	add	r0, sp, #16
   b4fd6:	f002 f822 	bl	b701e <_ZN6StringC1EPK19__FlashStringHelper>
    display.println("Low Point:" + String(lowPoint));
   b4fda:	220a      	movs	r2, #10
   b4fdc:	6829      	ldr	r1, [r5, #0]
   b4fde:	4668      	mov	r0, sp
   b4fe0:	f002 f85d 	bl	b709e <_ZN6StringC1Eih>
   b4fe4:	4669      	mov	r1, sp
   b4fe6:	a804      	add	r0, sp, #16
   b4fe8:	f002 f883 	bl	b70f2 <_ZplRK15StringSumHelperRK6String>
   b4fec:	6801      	ldr	r1, [r0, #0]
   b4fee:	481b      	ldr	r0, [pc, #108]	; (b505c <loop+0x21c>)
   b4ff0:	f002 f909 	bl	b7206 <_ZN5Print7printlnEPKc>
   b4ff4:	4668      	mov	r0, sp
   b4ff6:	f001 ffc7 	bl	b6f88 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4ffa:	a804      	add	r0, sp, #16
   b4ffc:	f001 ffc4 	bl	b6f88 <_ZN6StringD1Ev>
    display.display();
   b5000:	4816      	ldr	r0, [pc, #88]	; (b505c <loop+0x21c>)
   b5002:	f001 faf1 	bl	b65e8 <_ZN16Adafruit_SSD13067displayEv>
   b5006:	e76f      	b.n	b4ee8 <loop+0xa8>
  else if (ambientLight > highPoint)
   b5008:	6833      	ldr	r3, [r6, #0]
   b500a:	4298      	cmp	r0, r3
   b500c:	dd06      	ble.n	b501c <loop+0x1dc>
    lightLevel = "HIGH";
   b500e:	492b      	ldr	r1, [pc, #172]	; (b50bc <loop+0x27c>)
   b5010:	4822      	ldr	r0, [pc, #136]	; (b509c <loop+0x25c>)
   b5012:	f002 f832 	bl	b707a <_ZN6StringaSEPKc>
    digitalWrite(RED_LED, HIGH);
   b5016:	2101      	movs	r1, #1
   b5018:	2006      	movs	r0, #6
   b501a:	e782      	b.n	b4f22 <loop+0xe2>
    lightLevel = "GOOD";
   b501c:	4928      	ldr	r1, [pc, #160]	; (b50c0 <loop+0x280>)
   b501e:	481f      	ldr	r0, [pc, #124]	; (b509c <loop+0x25c>)
   b5020:	f002 f82b 	bl	b707a <_ZN6StringaSEPKc>
    digitalWrite(GREEN_LED, HIGH);
   b5024:	2101      	movs	r1, #1
   b5026:	2007      	movs	r0, #7
   b5028:	e77b      	b.n	b4f22 <loop+0xe2>
  else if (pastLight < lowPoint && ambientLight > lowPoint)
   b502a:	682b      	ldr	r3, [r5, #0]
   b502c:	429a      	cmp	r2, r3
   b502e:	da93      	bge.n	b4f58 <loop+0x118>
   b5030:	6822      	ldr	r2, [r4, #0]
   b5032:	4293      	cmp	r3, r2
   b5034:	da90      	bge.n	b4f58 <loop+0x118>
	StringSumHelper(const char *p) : String(p) {}
   b5036:	4923      	ldr	r1, [pc, #140]	; (b50c4 <loop+0x284>)
   b5038:	e77d      	b.n	b4f36 <loop+0xf6>
   b503a:	bf00      	nop
   b503c:	f3af 8000 	nop.w
   b5040:	66666666 	.word	0x66666666
   b5044:	400a6666 	.word	0x400a6666
   b5048:	00000000 	.word	0x00000000
   b504c:	40affe00 	.word	0x40affe00
   b5050:	cccccccd 	.word	0xcccccccd
   b5054:	3ffccccc 	.word	0x3ffccccc
   b5058:	2003e590 	.word	0x2003e590
   b505c:	2003e600 	.word	0x2003e600
   b5060:	2003e698 	.word	0x2003e698
   b5064:	2003e6b0 	.word	0x2003e6b0
   b5068:	3fe00000 	.word	0x3fe00000
   b506c:	40590000 	.word	0x40590000
   b5070:	2003e6a0 	.word	0x2003e6a0
   b5074:	40400000 	.word	0x40400000
   b5078:	2003e6a8 	.word	0x2003e6a8
   b507c:	000b908d 	.word	0x000b908d
   b5080:	2003e5b0 	.word	0x2003e5b0
   b5084:	2003e670 	.word	0x2003e670
   b5088:	2003e684 	.word	0x2003e684
   b508c:	2003e5fc 	.word	0x2003e5fc
   b5090:	2003e688 	.word	0x2003e688
   b5094:	2003e694 	.word	0x2003e694
   b5098:	000b90b5 	.word	0x000b90b5
   b509c:	2003e674 	.word	0x2003e674
   b50a0:	000b90c3 	.word	0x000b90c3
   b50a4:	000b9082 	.word	0x000b9082
   b50a8:	000b91c0 	.word	0x000b91c0
   b50ac:	000b908f 	.word	0x000b908f
   b50b0:	000b9091 	.word	0x000b9091
   b50b4:	000b909e 	.word	0x000b909e
   b50b8:	000b90aa 	.word	0x000b90aa
   b50bc:	000b90b9 	.word	0x000b90b9
   b50c0:	000b90be 	.word	0x000b90be
   b50c4:	000b910e 	.word	0x000b910e

000b50c8 <_GLOBAL__sub_I_Blynk>:
   b50c8:	b538      	push	{r3, r4, r5, lr}
        : domain(NULL), port(0)
   b50ca:	4d14      	ldr	r5, [pc, #80]	; (b511c <_GLOBAL__sub_I_Blynk+0x54>)
   b50cc:	4628      	mov	r0, r5
   b50ce:	f002 fe9d 	bl	b7e0c <_ZN9TCPClientC1Ev>
   b50d2:	f105 001c 	add.w	r0, r5, #28
   b50d6:	f002 fa2d 	bl	b7534 <_ZN9IPAddressC1Ev>
        , state(CONNECTING)
   b50da:	4b11      	ldr	r3, [pc, #68]	; (b5120 <_GLOBAL__sub_I_Blynk+0x58>)
VCNL4040 proximitySensor;
   b50dc:	4811      	ldr	r0, [pc, #68]	; (b5124 <_GLOBAL__sub_I_Blynk+0x5c>)
   b50de:	2400      	movs	r4, #0
   b50e0:	e9c3 5400 	strd	r5, r4, [r3]
   b50e4:	e9c3 4402 	strd	r4, r4, [r3, #8]
   b50e8:	e9c3 4404 	strd	r4, r4, [r3, #16]
   b50ec:	619c      	str	r4, [r3, #24]
   b50ee:	839c      	strh	r4, [r3, #28]
   b50f0:	636c      	str	r4, [r5, #52]	; 0x34
   b50f2:	872c      	strh	r4, [r5, #56]	; 0x38
   b50f4:	f000 fd47 	bl	b5b86 <_ZN8VCNL4040C1Ev>
OledWingAdafruit display;
   b50f8:	2107      	movs	r1, #7
   b50fa:	480b      	ldr	r0, [pc, #44]	; (b5128 <_GLOBAL__sub_I_Blynk+0x60>)
   b50fc:	f000 fc5c 	bl	b59b8 <_ZN16OledWingAdafruitC1Ei>
SYSTEM_THREAD(ENABLED);
   b5100:	4621      	mov	r1, r4
   b5102:	2001      	movs	r0, #1
   b5104:	f001 fd26 	bl	b6b54 <system_thread_set_state>
String lightLevel;
   b5108:	4908      	ldr	r1, [pc, #32]	; (b512c <_GLOBAL__sub_I_Blynk+0x64>)
   b510a:	4809      	ldr	r0, [pc, #36]	; (b5130 <_GLOBAL__sub_I_Blynk+0x68>)
   b510c:	f001 ff87 	bl	b701e <_ZN6StringC1EPK19__FlashStringHelper>
   b5110:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
String OLEDMode = "A";
   b5114:	4907      	ldr	r1, [pc, #28]	; (b5134 <_GLOBAL__sub_I_Blynk+0x6c>)
   b5116:	4808      	ldr	r0, [pc, #32]	; (b5138 <_GLOBAL__sub_I_Blynk+0x70>)
   b5118:	f001 bf81 	b.w	b701e <_ZN6StringC1EPK19__FlashStringHelper>
   b511c:	2003e5c0 	.word	0x2003e5c0
   b5120:	2003e590 	.word	0x2003e590
   b5124:	2003e694 	.word	0x2003e694
   b5128:	2003e600 	.word	0x2003e600
   b512c:	000b910d 	.word	0x000b910d
   b5130:	2003e674 	.word	0x2003e674
   b5134:	000b908d 	.word	0x000b908d
   b5138:	2003e5b0 	.word	0x2003e5b0

000b513c <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b513c:	4770      	bx	lr

000b513e <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b513e:	b510      	push	{r4, lr}
  }
   b5140:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b5142:	4604      	mov	r4, r0
  }
   b5144:	f7fe ffab 	bl	b409e <_ZdlPvj>
   b5148:	4620      	mov	r0, r4
   b514a:	bd10      	pop	{r4, pc}

000b514c <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b514c:	b40e      	push	{r1, r2, r3}
   b514e:	b503      	push	{r0, r1, lr}
   b5150:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b5152:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b5154:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b5158:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b515a:	f002 f87c 	bl	b7256 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b515e:	b002      	add	sp, #8
   b5160:	f85d eb04 	ldr.w	lr, [sp], #4
   b5164:	b003      	add	sp, #12
   b5166:	4770      	bx	lr

000b5168 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b5168:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b516a:	4604      	mov	r4, r0
   b516c:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b516e:	7922      	ldrb	r2, [r4, #4]
   b5170:	68a3      	ldr	r3, [r4, #8]
   b5172:	b132      	cbz	r2, b5182 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b5174:	b9a3      	cbnz	r3, b51a0 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b5176:	490b      	ldr	r1, [pc, #44]	; (b51a4 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b5178:	b002      	add	sp, #8
   b517a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b517e:	f002 b82f 	b.w	b71e0 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b5182:	4a09      	ldr	r2, [pc, #36]	; (b51a8 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b5184:	7b26      	ldrb	r6, [r4, #12]
   b5186:	4d09      	ldr	r5, [pc, #36]	; (b51ac <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b5188:	4909      	ldr	r1, [pc, #36]	; (b51b0 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b518a:	7b64      	ldrb	r4, [r4, #13]
   b518c:	2e01      	cmp	r6, #1
   b518e:	bf18      	it	ne
   b5190:	4629      	movne	r1, r5
   b5192:	e9cd 1400 	strd	r1, r4, [sp]
   b5196:	4907      	ldr	r1, [pc, #28]	; (b51b4 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b5198:	f7ff ffd8 	bl	b514c <_ZN5Print6printfEPKcz>
  }
   b519c:	b002      	add	sp, #8
   b519e:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b51a0:	4a05      	ldr	r2, [pc, #20]	; (b51b8 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b51a2:	e7ef      	b.n	b5184 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b51a4:	000b91c2 	.word	0x000b91c2
   b51a8:	000b910d 	.word	0x000b910d
   b51ac:	000b91be 	.word	0x000b91be
   b51b0:	000b91ba 	.word	0x000b91ba
   b51b4:	000b91d8 	.word	0x000b91d8
   b51b8:	000b91b1 	.word	0x000b91b1

000b51bc <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b51bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b51c0:	b085      	sub	sp, #20
   b51c2:	461f      	mov	r7, r3
   b51c4:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b51c8:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b51cc:	eba8 0902 	sub.w	r9, r8, r2
   b51d0:	eba7 0a01 	sub.w	sl, r7, r1
   b51d4:	f1b9 0f00 	cmp.w	r9, #0
   b51d8:	bfb8      	it	lt
   b51da:	f1c9 0900 	rsblt	r9, r9, #0
   b51de:	f1ba 0f00 	cmp.w	sl, #0
   b51e2:	bfb8      	it	lt
   b51e4:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b51e8:	45d1      	cmp	r9, sl
        uint16_t color) {
   b51ea:	4683      	mov	fp, r0
   b51ec:	460c      	mov	r4, r1
   b51ee:	4615      	mov	r5, r2
    if (steep) {
   b51f0:	dd04      	ble.n	b51fc <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b51f2:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b51f4:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b51f6:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b51f8:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b51fa:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b51fc:	42bc      	cmp	r4, r7
   b51fe:	dd05      	ble.n	b520c <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b5200:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b5202:	4645      	mov	r5, r8
   b5204:	4690      	mov	r8, r2
    if (x0 > x1) {
   b5206:	4622      	mov	r2, r4
   b5208:	463c      	mov	r4, r7
   b520a:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b520c:	1b3e      	subs	r6, r7, r4
   b520e:	b2b2      	uxth	r2, r6
   b5210:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b5212:	eba8 0205 	sub.w	r2, r8, r5
   b5216:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b521a:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b521e:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b5222:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b5226:	4545      	cmp	r5, r8
   b5228:	bfb4      	ite	lt
   b522a:	2201      	movlt	r2, #1
   b522c:	f04f 32ff 	movge.w	r2, #4294967295
    dy = abs(y1 - y0);
   b5230:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b5232:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b5234:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b5236:	42bc      	cmp	r4, r7
   b5238:	dc1c      	bgt.n	b5274 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b523a:	f8db 2000 	ldr.w	r2, [fp]
   b523e:	9303      	str	r3, [sp, #12]
        if (steep) {
   b5240:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b5242:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b5246:	bfc7      	ittee	gt
   b5248:	4629      	movgt	r1, r5
   b524a:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b524c:	462a      	movle	r2, r5
   b524e:	4621      	movle	r1, r4
   b5250:	4658      	mov	r0, fp
   b5252:	47c0      	blx	r8
        }
        err -= dy;
   b5254:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b5256:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b5258:	1ab6      	subs	r6, r6, r2
   b525a:	b2b1      	uxth	r1, r6
   b525c:	b236      	sxth	r6, r6
        if (err < 0) {
   b525e:	2e00      	cmp	r6, #0
   b5260:	da05      	bge.n	b526e <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b5262:	9a02      	ldr	r2, [sp, #8]
   b5264:	4415      	add	r5, r2
            err += dx;
   b5266:	9a00      	ldr	r2, [sp, #0]
   b5268:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b526a:	b22d      	sxth	r5, r5
            err += dx;
   b526c:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b526e:	3401      	adds	r4, #1
   b5270:	b224      	sxth	r4, r4
   b5272:	e7e0      	b.n	b5236 <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b5274:	b005      	add	sp, #20
   b5276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b527a <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b527a:	4770      	bx	lr

000b527c <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b527c:	b410      	push	{r4}
    drawPixel(x, y, color);
   b527e:	6804      	ldr	r4, [r0, #0]
   b5280:	6924      	ldr	r4, [r4, #16]
   b5282:	46a4      	mov	ip, r4
}
   b5284:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b5288:	4760      	bx	ip

000b528a <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b528a:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b528c:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b528e:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b5292:	9502      	str	r5, [sp, #8]
   b5294:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b5296:	46a4      	mov	ip, r4
}
   b5298:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b529a:	4760      	bx	ip

000b529c <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b529c:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b529e:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b52a0:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b52a4:	9502      	str	r5, [sp, #8]
   b52a6:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b52a8:	46a4      	mov	ip, r4
}
   b52aa:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b52ac:	4760      	bx	ip

000b52ae <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b52ae:	b470      	push	{r4, r5, r6}
   b52b0:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b52b4:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b52b8:	6804      	ldr	r4, [r0, #0]
   b52ba:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b52be:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b52c0:	46a4      	mov	ip, r4
}
   b52c2:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b52c4:	4760      	bx	ip

000b52c6 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b52c6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b52ca:	461c      	mov	r4, r3
    startWrite();
   b52cc:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b52ce:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b52d2:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b52d4:	4605      	mov	r5, r0
   b52d6:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b52d8:	3c01      	subs	r4, #1
   b52da:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b52dc:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b52de:	b224      	sxth	r4, r4
    startWrite();
   b52e0:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b52e2:	682b      	ldr	r3, [r5, #0]
   b52e4:	f8cd 8004 	str.w	r8, [sp, #4]
   b52e8:	9400      	str	r4, [sp, #0]
   b52ea:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b52ec:	4628      	mov	r0, r5
   b52ee:	463b      	mov	r3, r7
   b52f0:	4632      	mov	r2, r6
   b52f2:	4639      	mov	r1, r7
   b52f4:	47a0      	blx	r4
    endWrite();
   b52f6:	682b      	ldr	r3, [r5, #0]
   b52f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b52fa:	4628      	mov	r0, r5
}
   b52fc:	b002      	add	sp, #8
   b52fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b5302:	4718      	bx	r3

000b5304 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b5304:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5308:	461d      	mov	r5, r3
    startWrite();
   b530a:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b530c:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b5310:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b5312:	4604      	mov	r4, r0
   b5314:	4617      	mov	r7, r2
   b5316:	460e      	mov	r6, r1
    startWrite();
   b5318:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b531a:	e9cd 7800 	strd	r7, r8, [sp]
   b531e:	6822      	ldr	r2, [r4, #0]
   b5320:	1e6b      	subs	r3, r5, #1
   b5322:	4433      	add	r3, r6
   b5324:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b5326:	4620      	mov	r0, r4
   b5328:	b21b      	sxth	r3, r3
   b532a:	463a      	mov	r2, r7
   b532c:	4631      	mov	r1, r6
   b532e:	47a8      	blx	r5
    endWrite();
   b5330:	6823      	ldr	r3, [r4, #0]
   b5332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5334:	4620      	mov	r0, r4
}
   b5336:	b002      	add	sp, #8
   b5338:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b533c:	4718      	bx	r3

000b533e <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b533e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5342:	461e      	mov	r6, r3
    startWrite();
   b5344:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b5346:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b534a:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b534c:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b5350:	460c      	mov	r4, r1
   b5352:	4605      	mov	r5, r0
   b5354:	4617      	mov	r7, r2
    startWrite();
   b5356:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b5358:	4426      	add	r6, r4
   b535a:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b535c:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b535e:	da0b      	bge.n	b5378 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b5360:	f8cd 8000 	str.w	r8, [sp]
   b5364:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b5368:	4621      	mov	r1, r4
   b536a:	464b      	mov	r3, r9
   b536c:	463a      	mov	r2, r7
   b536e:	4628      	mov	r0, r5
   b5370:	3401      	adds	r4, #1
   b5372:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b5374:	b224      	sxth	r4, r4
   b5376:	e7f0      	b.n	b535a <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b5378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b537a:	4628      	mov	r0, r5
}
   b537c:	b002      	add	sp, #8
   b537e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b5382:	4718      	bx	r3

000b5384 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b5384:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b5386:	6802      	ldr	r2, [r0, #0]
   b5388:	9101      	str	r1, [sp, #4]
   b538a:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b538e:	9100      	str	r1, [sp, #0]
   b5390:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b5392:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b5396:	2200      	movs	r2, #0
   b5398:	4611      	mov	r1, r2
   b539a:	47a0      	blx	r4
}
   b539c:	b002      	add	sp, #8
   b539e:	bd10      	pop	{r4, pc}

000b53a0 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b53a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b53a4:	4299      	cmp	r1, r3
        uint16_t color) {
   b53a6:	4616      	mov	r6, r2
   b53a8:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b53ac:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b53b0:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b53b2:	4680      	mov	r8, r0
   b53b4:	460d      	mov	r5, r1
   b53b6:	461c      	mov	r4, r3
    if(x0 == x1){
   b53b8:	d113      	bne.n	b53e2 <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b53ba:	42be      	cmp	r6, r7
   b53bc:	bfc8      	it	gt
   b53be:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b53c0:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b53c4:	bfc4      	itt	gt
   b53c6:	463e      	movgt	r6, r7
   b53c8:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b53ca:	1c7b      	adds	r3, r7, #1
   b53cc:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b53ce:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b53d0:	b21b      	sxth	r3, r3
   b53d2:	4632      	mov	r2, r6
   b53d4:	4629      	mov	r1, r5
   b53d6:	4640      	mov	r0, r8
   b53d8:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b53da:	b003      	add	sp, #12
   b53dc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b53e0:	4760      	bx	ip
    } else if(y0 == y1){
   b53e2:	42be      	cmp	r6, r7
   b53e4:	d10a      	bne.n	b53fc <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b53e6:	4299      	cmp	r1, r3
   b53e8:	bfc2      	ittt	gt
   b53ea:	460b      	movgt	r3, r1
   b53ec:	4625      	movgt	r5, r4
   b53ee:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b53f0:	1c63      	adds	r3, r4, #1
   b53f2:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b53f6:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b53f8:	1b5b      	subs	r3, r3, r5
   b53fa:	e7e9      	b.n	b53d0 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b53fc:	6953      	ldr	r3, [r2, #20]
   b53fe:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b5400:	e9cd 7900 	strd	r7, r9, [sp]
   b5404:	f8d8 3000 	ldr.w	r3, [r8]
   b5408:	4640      	mov	r0, r8
   b540a:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b540c:	4632      	mov	r2, r6
   b540e:	4623      	mov	r3, r4
   b5410:	4629      	mov	r1, r5
   b5412:	47b8      	blx	r7
        endWrite();
   b5414:	f8d8 3000 	ldr.w	r3, [r8]
   b5418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b541a:	4640      	mov	r0, r8
}
   b541c:	b003      	add	sp, #12
   b541e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b5422:	4718      	bx	r3

000b5424 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b5424:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5428:	461d      	mov	r5, r3
    startWrite();
   b542a:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b542c:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b5430:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b5432:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b5436:	4604      	mov	r4, r0
   b5438:	460f      	mov	r7, r1
   b543a:	4616      	mov	r6, r2
    startWrite();
   b543c:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b543e:	6823      	ldr	r3, [r4, #0]
   b5440:	f8cd 8000 	str.w	r8, [sp]
   b5444:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b5448:	4632      	mov	r2, r6
   b544a:	462b      	mov	r3, r5
   b544c:	4639      	mov	r1, r7
   b544e:	4620      	mov	r0, r4
   b5450:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b5452:	6823      	ldr	r3, [r4, #0]
   b5454:	f8cd 8000 	str.w	r8, [sp]
   b5458:	f109 32ff 	add.w	r2, r9, #4294967295
   b545c:	4432      	add	r2, r6
   b545e:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b5462:	4639      	mov	r1, r7
   b5464:	462b      	mov	r3, r5
   b5466:	4620      	mov	r0, r4
   b5468:	b212      	sxth	r2, r2
   b546a:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b546c:	6823      	ldr	r3, [r4, #0]
   b546e:	f8cd 8000 	str.w	r8, [sp]
   b5472:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b5476:	4632      	mov	r2, r6
   b5478:	464b      	mov	r3, r9
   b547a:	4639      	mov	r1, r7
   b547c:	4620      	mov	r0, r4
   b547e:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b5480:	1e6b      	subs	r3, r5, #1
   b5482:	19d9      	adds	r1, r3, r7
   b5484:	6823      	ldr	r3, [r4, #0]
   b5486:	f8cd 8000 	str.w	r8, [sp]
   b548a:	6a1d      	ldr	r5, [r3, #32]
   b548c:	4620      	mov	r0, r4
   b548e:	464b      	mov	r3, r9
   b5490:	4632      	mov	r2, r6
   b5492:	b209      	sxth	r1, r1
   b5494:	47a8      	blx	r5
    endWrite();
   b5496:	6823      	ldr	r3, [r4, #0]
   b5498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b549a:	4620      	mov	r0, r4
}
   b549c:	b002      	add	sp, #8
   b549e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b54a2:	4718      	bx	r3

000b54a4 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b54a4:	4770      	bx	lr

000b54a6 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b54a6:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b54aa:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b54ae:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b54b0:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b54b2:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b54b6:	bf59      	ittee	pl
   b54b8:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b54ba:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b54bc:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b54be:	81c3      	strhmi	r3, [r0, #14]
}
   b54c0:	4770      	bx	lr
	...

000b54c4 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b54c4:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b54c6:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b54c8:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b54ca:	4a07      	ldr	r2, [pc, #28]	; (b54e8 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b54cc:	4d07      	ldr	r5, [pc, #28]	; (b54ec <_ZN12Adafruit_GFXC1Ess+0x28>)
   b54ce:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b54d0:	2400      	movs	r4, #0
    _width    = WIDTH;
   b54d2:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b54d4:	f04f 31ff 	mov.w	r1, #4294967295
   b54d8:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b54dc:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b54de:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b54e0:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b54e2:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b54e4:	6204      	str	r4, [r0, #32]
}
   b54e6:	bd30      	pop	{r4, r5, pc}
   b54e8:	01000101 	.word	0x01000101
   b54ec:	000b9700 	.word	0x000b9700

000b54f0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b54f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b54f4:	b089      	sub	sp, #36	; 0x24
   b54f6:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b54fa:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b54fc:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b5500:	9304      	str	r3, [sp, #16]
   b5502:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b5506:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5508:	9305      	str	r3, [sp, #20]
   b550a:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b550e:	4604      	mov	r4, r0
    startWrite();
   b5510:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b5512:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b5516:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b551a:	bf48      	it	mi
   b551c:	f108 020e 	addmi.w	r2, r8, #14
   b5520:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b5524:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b5526:	4635      	mov	r5, r6
   b5528:	9b03      	ldr	r3, [sp, #12]
   b552a:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b552c:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b5530:	189a      	adds	r2, r3, r2
   b5532:	9b05      	ldr	r3, [sp, #20]
   b5534:	428b      	cmp	r3, r1
   b5536:	b212      	sxth	r2, r2
   b5538:	dd27      	ble.n	b558a <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b553a:	9b04      	ldr	r3, [sp, #16]
   b553c:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b553e:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5542:	9306      	str	r3, [sp, #24]
   b5544:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b5548:	4580      	cmp	r8, r0
   b554a:	fa1f f189 	uxth.w	r1, r9
   b554e:	dd17      	ble.n	b5580 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b5550:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5552:	bf05      	ittet	eq
   b5554:	9b06      	ldreq	r3, [sp, #24]
   b5556:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b5558:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b555a:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b555c:	bf18      	it	ne
   b555e:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b5560:	062b      	lsls	r3, r5, #24
   b5562:	d50a      	bpl.n	b557a <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b5564:	9b02      	ldr	r3, [sp, #8]
   b5566:	6820      	ldr	r0, [r4, #0]
   b5568:	9207      	str	r2, [sp, #28]
   b556a:	4419      	add	r1, r3
   b556c:	6983      	ldr	r3, [r0, #24]
   b556e:	b209      	sxth	r1, r1
   b5570:	461f      	mov	r7, r3
   b5572:	4620      	mov	r0, r4
   b5574:	4653      	mov	r3, sl
   b5576:	47b8      	blx	r7
   b5578:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b557a:	f109 0901 	add.w	r9, r9, #1
   b557e:	e7e1      	b.n	b5544 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b5580:	9b01      	ldr	r3, [sp, #4]
   b5582:	3301      	adds	r3, #1
   b5584:	9301      	str	r3, [sp, #4]
   b5586:	445e      	add	r6, fp
   b5588:	e7ce      	b.n	b5528 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b558a:	6823      	ldr	r3, [r4, #0]
   b558c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b558e:	4620      	mov	r0, r4
}
   b5590:	b009      	add	sp, #36	; 0x24
   b5592:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b5596:	4718      	bx	r3

000b5598 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b5598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b559c:	ed2d 8b02 	vpush	{d8}
   b55a0:	b091      	sub	sp, #68	; 0x44
   b55a2:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b55a4:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b55a6:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b55aa:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b55ae:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b55b2:	9103      	str	r1, [sp, #12]
   b55b4:	461f      	mov	r7, r3
   b55b6:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b55ba:	9304      	str	r3, [sp, #16]
   b55bc:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b55be:	2a00      	cmp	r2, #0
   b55c0:	f040 80c5 	bne.w	b574e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b55c4:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b55c8:	428b      	cmp	r3, r1
   b55ca:	f340 814c 	ble.w	b5866 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b55ce:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b55d2:	42b3      	cmp	r3, r6
   b55d4:	f340 8147 	ble.w	b5866 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b55d8:	2306      	movs	r3, #6
   b55da:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b55de:	2b00      	cmp	r3, #0
   b55e0:	f340 8141 	ble.w	b5866 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b55e4:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b55e8:	2b00      	cmp	r3, #0
   b55ea:	f340 813c 	ble.w	b5866 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b55ee:	7f03      	ldrb	r3, [r0, #28]
   b55f0:	b91b      	cbnz	r3, b55fa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b55f2:	2faf      	cmp	r7, #175	; 0xaf
   b55f4:	bf84      	itt	hi
   b55f6:	3701      	addhi	r7, #1
   b55f8:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b55fa:	f8db 3000 	ldr.w	r3, [fp]
   b55fe:	4658      	mov	r0, fp
   b5600:	695b      	ldr	r3, [r3, #20]
   b5602:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b5604:	2205      	movs	r2, #5
   b5606:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b5608:	2200      	movs	r2, #0
   b560a:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b560c:	4a98      	ldr	r2, [pc, #608]	; (b5870 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b560e:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b5612:	18d3      	adds	r3, r2, r3
   b5614:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b5616:	b2b3      	uxth	r3, r6
   b5618:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b561a:	9a05      	ldr	r2, [sp, #20]
   b561c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b561e:	5c9b      	ldrb	r3, [r3, r2]
   b5620:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b5622:	b2ab      	uxth	r3, r5
   b5624:	930b      	str	r3, [sp, #44]	; 0x2c
   b5626:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b562a:	9308      	str	r3, [sp, #32]
   b562c:	9b03      	ldr	r3, [sp, #12]
   b562e:	fb02 f905 	mul.w	r9, r2, r5
   b5632:	fa19 f983 	uxtah	r9, r9, r3
   b5636:	fa0f f389 	sxth.w	r3, r9
   b563a:	ee08 3a10 	vmov	s16, r3
   b563e:	2308      	movs	r3, #8
   b5640:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b5642:	9b03      	ldr	r3, [sp, #12]
   b5644:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b5648:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b564c:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b5650:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b5652:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b5656:	07d2      	lsls	r2, r2, #31
   b5658:	d552      	bpl.n	b5700 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b565a:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b565c:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b5660:	d13e      	bne.n	b56e0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b5662:	2c01      	cmp	r4, #1
   b5664:	d13c      	bne.n	b56e0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b5666:	699b      	ldr	r3, [r3, #24]
   b5668:	9906      	ldr	r1, [sp, #24]
   b566a:	461f      	mov	r7, r3
   b566c:	9b04      	ldr	r3, [sp, #16]
   b566e:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b5670:	b212      	sxth	r2, r2
   b5672:	4651      	mov	r1, sl
   b5674:	4658      	mov	r0, fp
   b5676:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b5678:	f109 0301 	add.w	r3, r9, #1
   b567c:	fa4f f983 	sxtb.w	r9, r3
   b5680:	9b07      	ldr	r3, [sp, #28]
   b5682:	085b      	lsrs	r3, r3, #1
   b5684:	9307      	str	r3, [sp, #28]
   b5686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b5688:	3b01      	subs	r3, #1
   b568a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b568e:	930a      	str	r3, [sp, #40]	; 0x28
   b5690:	d1de      	bne.n	b5650 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b5692:	9f05      	ldr	r7, [sp, #20]
   b5694:	3701      	adds	r7, #1
   b5696:	b27b      	sxtb	r3, r7
   b5698:	9305      	str	r3, [sp, #20]
   b569a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b569c:	3b01      	subs	r3, #1
   b569e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b56a2:	9309      	str	r3, [sp, #36]	; 0x24
   b56a4:	d1b9      	bne.n	b561a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b56a6:	9b04      	ldr	r3, [sp, #16]
   b56a8:	4543      	cmp	r3, r8
   b56aa:	d00f      	beq.n	b56cc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b56ac:	2d01      	cmp	r5, #1
   b56ae:	f8db 3000 	ldr.w	r3, [fp]
   b56b2:	d13b      	bne.n	b572c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b56b4:	2c01      	cmp	r4, #1
   b56b6:	d139      	bne.n	b572c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b56b8:	9908      	ldr	r1, [sp, #32]
   b56ba:	f8cd 8000 	str.w	r8, [sp]
   b56be:	3105      	adds	r1, #5
   b56c0:	6a1c      	ldr	r4, [r3, #32]
   b56c2:	4632      	mov	r2, r6
   b56c4:	2308      	movs	r3, #8
   b56c6:	b209      	sxth	r1, r1
   b56c8:	4658      	mov	r0, fp
   b56ca:	47a0      	blx	r4
        endWrite();
   b56cc:	f8db 3000 	ldr.w	r3, [fp]
   b56d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b56d2:	4658      	mov	r0, fp
}
   b56d4:	b011      	add	sp, #68	; 0x44
   b56d6:	ecbd 8b02 	vpop	{d8}
   b56da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b56de:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b56e0:	9906      	ldr	r1, [sp, #24]
   b56e2:	fb14 f202 	smulbb	r2, r4, r2
   b56e6:	440a      	add	r2, r1
   b56e8:	9904      	ldr	r1, [sp, #16]
   b56ea:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b56ec:	9400      	str	r4, [sp, #0]
   b56ee:	69db      	ldr	r3, [r3, #28]
   b56f0:	ee18 1a10 	vmov	r1, s16
   b56f4:	461f      	mov	r7, r3
   b56f6:	b212      	sxth	r2, r2
   b56f8:	462b      	mov	r3, r5
   b56fa:	4658      	mov	r0, fp
   b56fc:	47b8      	blx	r7
   b56fe:	e7bb      	b.n	b5678 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b5700:	9a04      	ldr	r2, [sp, #16]
   b5702:	4542      	cmp	r2, r8
   b5704:	d0b8      	beq.n	b5678 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b5706:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b5708:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b570c:	d107      	bne.n	b571e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b570e:	2c01      	cmp	r4, #1
   b5710:	d105      	bne.n	b571e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b5712:	699b      	ldr	r3, [r3, #24]
   b5714:	9906      	ldr	r1, [sp, #24]
   b5716:	461f      	mov	r7, r3
   b5718:	440a      	add	r2, r1
   b571a:	4643      	mov	r3, r8
   b571c:	e7a8      	b.n	b5670 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b571e:	9906      	ldr	r1, [sp, #24]
   b5720:	f8cd 8004 	str.w	r8, [sp, #4]
   b5724:	fb14 f202 	smulbb	r2, r4, r2
   b5728:	440a      	add	r2, r1
   b572a:	e7df      	b.n	b56ec <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b572c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b572e:	f8cd 8004 	str.w	r8, [sp, #4]
   b5732:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b5736:	9a08      	ldr	r2, [sp, #32]
   b5738:	00e4      	lsls	r4, r4, #3
   b573a:	440a      	add	r2, r1
   b573c:	4611      	mov	r1, r2
   b573e:	9400      	str	r4, [sp, #0]
   b5740:	69dc      	ldr	r4, [r3, #28]
   b5742:	4632      	mov	r2, r6
   b5744:	462b      	mov	r3, r5
   b5746:	b209      	sxth	r1, r1
   b5748:	4658      	mov	r0, fp
   b574a:	47a0      	blx	r4
        endWrite();
   b574c:	e7be      	b.n	b56cc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b574e:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b5750:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b5752:	6812      	ldr	r2, [r2, #0]
   b5754:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b5756:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b5758:	b2ff      	uxtb	r7, r7
   b575a:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b575e:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b5762:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b5764:	789a      	ldrb	r2, [r3, #2]
   b5766:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b5768:	78da      	ldrb	r2, [r3, #3]
   b576a:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b576c:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b576e:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b5772:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b5776:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b5778:	d801      	bhi.n	b577e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b577a:	2c01      	cmp	r4, #1
   b577c:	d957      	bls.n	b582e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b577e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b5782:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b5784:	fa0f f38a 	sxth.w	r3, sl
   b5788:	9307      	str	r3, [sp, #28]
        startWrite();
   b578a:	f8db 3000 	ldr.w	r3, [fp]
   b578e:	4658      	mov	r0, fp
   b5790:	695b      	ldr	r3, [r3, #20]
   b5792:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5794:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b5796:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b579a:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b579c:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b57a0:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b57a2:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b57a4:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b57a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b57a8:	429f      	cmp	r7, r3
   b57aa:	d28f      	bcs.n	b56cc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b57ac:	9b07      	ldr	r3, [sp, #28]
   b57ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b57b0:	443b      	add	r3, r7
   b57b2:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b57b6:	2200      	movs	r2, #0
   b57b8:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b57ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b57bc:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b57be:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b57c2:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b57c6:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b57ca:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b57cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b57ce:	9905      	ldr	r1, [sp, #20]
   b57d0:	4291      	cmp	r1, r2
   b57d2:	d241      	bcs.n	b5858 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b57d4:	1c5a      	adds	r2, r3, #1
   b57d6:	b2d2      	uxtb	r2, r2
   b57d8:	075b      	lsls	r3, r3, #29
   b57da:	920d      	str	r2, [sp, #52]	; 0x34
   b57dc:	d107      	bne.n	b57ee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b57de:	9b06      	ldr	r3, [sp, #24]
   b57e0:	9906      	ldr	r1, [sp, #24]
   b57e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b57e4:	3301      	adds	r3, #1
   b57e6:	b29b      	uxth	r3, r3
   b57e8:	f812 9001 	ldrb.w	r9, [r2, r1]
   b57ec:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b57ee:	f019 0f80 	tst.w	r9, #128	; 0x80
   b57f2:	d012      	beq.n	b581a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b57f4:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b57f6:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b57fa:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b57fe:	d11a      	bne.n	b5836 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b5800:	2c01      	cmp	r4, #1
   b5802:	d118      	bne.n	b5836 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5804:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b5806:	699b      	ldr	r3, [r3, #24]
   b5808:	4411      	add	r1, r2
   b580a:	9a05      	ldr	r2, [sp, #20]
   b580c:	4411      	add	r1, r2
   b580e:	461e      	mov	r6, r3
   b5810:	4652      	mov	r2, sl
   b5812:	9b04      	ldr	r3, [sp, #16]
   b5814:	b209      	sxth	r1, r1
   b5816:	4658      	mov	r0, fp
   b5818:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b581a:	9e05      	ldr	r6, [sp, #20]
   b581c:	3601      	adds	r6, #1
   b581e:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b5820:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b5824:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b5826:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b582a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b582c:	e7ce      	b.n	b57cc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b582e:	2300      	movs	r3, #0
   b5830:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b5834:	e7a9      	b.n	b578a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5836:	9805      	ldr	r0, [sp, #20]
   b5838:	9a08      	ldr	r2, [sp, #32]
   b583a:	4402      	add	r2, r0
   b583c:	fb02 1105 	mla	r1, r2, r5, r1
   b5840:	9a04      	ldr	r2, [sp, #16]
   b5842:	e9cd 4200 	strd	r4, r2, [sp]
   b5846:	69db      	ldr	r3, [r3, #28]
   b5848:	ee18 2a10 	vmov	r2, s16
   b584c:	461e      	mov	r6, r3
   b584e:	b209      	sxth	r1, r1
   b5850:	462b      	mov	r3, r5
   b5852:	4658      	mov	r0, fp
   b5854:	47b0      	blx	r6
   b5856:	e7e0      	b.n	b581a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b5858:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b585a:	3701      	adds	r7, #1
   b585c:	4498      	add	r8, r3
   b585e:	fa5f f888 	uxtb.w	r8, r8
   b5862:	b2ff      	uxtb	r7, r7
   b5864:	e79f      	b.n	b57a6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b5866:	b011      	add	sp, #68	; 0x44
   b5868:	ecbd 8b02 	vpop	{d8}
   b586c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5870:	000b91f5 	.word	0x000b91f5

000b5874 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b5874:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b5876:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b5878:	b085      	sub	sp, #20
   b587a:	4604      	mov	r4, r0
   b587c:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b587e:	2a00      	cmp	r2, #0
   b5880:	d134      	bne.n	b58ec <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b5882:	290a      	cmp	r1, #10
   b5884:	d108      	bne.n	b5898 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b5886:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b5888:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b588a:	7e42      	ldrb	r2, [r0, #25]
   b588c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b5890:	8263      	strh	r3, [r4, #18]
}
   b5892:	2001      	movs	r0, #1
   b5894:	b005      	add	sp, #20
   b5896:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b5898:	290d      	cmp	r1, #13
   b589a:	d0fa      	beq.n	b5892 <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b589c:	7ee1      	ldrb	r1, [r4, #27]
   b589e:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b58a0:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b58a2:	b171      	cbz	r1, b58c2 <_ZN12Adafruit_GFX5writeEh+0x4e>
   b58a4:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b58a8:	2106      	movs	r1, #6
   b58aa:	fb11 6100 	smlabb	r1, r1, r0, r6
   b58ae:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b58b2:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b58b4:	bfc1      	itttt	gt
   b58b6:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b58ba:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b58bc:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b58c0:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b58c2:	8ae2      	ldrh	r2, [r4, #22]
   b58c4:	9201      	str	r2, [sp, #4]
   b58c6:	8aa2      	ldrh	r2, [r4, #20]
   b58c8:	9200      	str	r2, [sp, #0]
   b58ca:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b58ce:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b58d2:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b58d6:	4620      	mov	r0, r4
   b58d8:	f7ff fe5e 	bl	b5598 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b58dc:	7e23      	ldrb	r3, [r4, #24]
   b58de:	8a22      	ldrh	r2, [r4, #16]
   b58e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b58e4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b58e8:	8223      	strh	r3, [r4, #16]
   b58ea:	e7d2      	b.n	b5892 <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b58ec:	290a      	cmp	r1, #10
   b58ee:	d107      	bne.n	b5900 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b58f0:	2300      	movs	r3, #0
   b58f2:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b58f4:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b58f6:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b58f8:	8a43      	ldrh	r3, [r0, #18]
   b58fa:	fb01 3302 	mla	r3, r1, r2, r3
   b58fe:	e7c7      	b.n	b5890 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b5900:	290d      	cmp	r1, #13
   b5902:	d0c6      	beq.n	b5892 <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b5904:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b5906:	42a9      	cmp	r1, r5
   b5908:	d3c3      	bcc.n	b5892 <_ZN12Adafruit_GFX5writeEh+0x1e>
   b590a:	7a51      	ldrb	r1, [r2, #9]
   b590c:	4299      	cmp	r1, r3
   b590e:	d3c0      	bcc.n	b5892 <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b5910:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b5912:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b5914:	b2ed      	uxtb	r5, r5
   b5916:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b591a:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b591c:	b328      	cbz	r0, b596a <_ZN12Adafruit_GFX5writeEh+0xf6>
   b591e:	78e9      	ldrb	r1, [r5, #3]
   b5920:	b319      	cbz	r1, b596a <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b5922:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b5924:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b5926:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b5928:	b191      	cbz	r1, b5950 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b592a:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b592e:	4408      	add	r0, r1
   b5930:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b5934:	fb06 1100 	mla	r1, r6, r0, r1
   b5938:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b593c:	4281      	cmp	r1, r0
   b593e:	dd07      	ble.n	b5950 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b5940:	2000      	movs	r0, #0
   b5942:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b5944:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b5948:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b594a:	fb02 1207 	mla	r2, r2, r7, r1
   b594e:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b5950:	8ae2      	ldrh	r2, [r4, #22]
   b5952:	9201      	str	r2, [sp, #4]
   b5954:	8aa2      	ldrh	r2, [r4, #20]
   b5956:	9200      	str	r2, [sp, #0]
   b5958:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b595c:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b5960:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b5964:	4620      	mov	r0, r4
   b5966:	f7ff fe17 	bl	b5598 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b596a:	7929      	ldrb	r1, [r5, #4]
   b596c:	7e22      	ldrb	r2, [r4, #24]
   b596e:	8a23      	ldrh	r3, [r4, #16]
   b5970:	fb01 3302 	mla	r3, r1, r2, r3
   b5974:	e7b8      	b.n	b58e8 <_ZN12Adafruit_GFX5writeEh+0x74>

000b5976 <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b5976:	2901      	cmp	r1, #1
   b5978:	bf38      	it	cc
   b597a:	2101      	movcc	r1, #1
   b597c:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b597e:	7641      	strb	r1, [r0, #25]
}
   b5980:	4770      	bx	lr
	...

000b5984 <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   b5984:	b510      	push	{r4, lr}
   b5986:	4b06      	ldr	r3, [pc, #24]	; (b59a0 <_ZN16OledWingAdafruitD1Ev+0x1c>)
   b5988:	6003      	str	r3, [r0, #0]
   b598a:	4604      	mov	r4, r0
	if (mutex) {
   b598c:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b598e:	b108      	cbz	r0, b5994 <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   b5990:	f000 ff58 	bl	b6844 <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   b5994:	4620      	mov	r0, r4
   b5996:	f000 fa47 	bl	b5e28 <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   b599a:	4620      	mov	r0, r4
   b599c:	bd10      	pop	{r4, pc}
   b599e:	bf00      	nop
   b59a0:	000b9758 	.word	0x000b9758

000b59a4 <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   b59a4:	b510      	push	{r4, lr}
   b59a6:	4604      	mov	r4, r0
}
   b59a8:	f7ff ffec 	bl	b5984 <_ZN16OledWingAdafruitD1Ev>
   b59ac:	4620      	mov	r0, r4
   b59ae:	2170      	movs	r1, #112	; 0x70
   b59b0:	f7fe fb75 	bl	b409e <_ZdlPvj>
   b59b4:	4620      	mov	r0, r4
   b59b6:	bd10      	pop	{r4, pc}

000b59b8 <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   b59b8:	b530      	push	{r4, r5, lr}
   b59ba:	b085      	sub	sp, #20
   b59bc:	4604      	mov	r4, r0
   b59be:	460d      	mov	r5, r1
   b59c0:	f002 fc38 	bl	b8234 <_Z19__fetch_global_Wirev>
   b59c4:	4a10      	ldr	r2, [pc, #64]	; (b5a08 <_ZN16OledWingAdafruitC1Ei+0x50>)
   b59c6:	4911      	ldr	r1, [pc, #68]	; (b5a0c <_ZN16OledWingAdafruitC1Ei+0x54>)
   b59c8:	e9cd 2101 	strd	r2, r1, [sp, #4]
   b59cc:	f04f 32ff 	mov.w	r2, #4294967295
   b59d0:	2180      	movs	r1, #128	; 0x80
   b59d2:	4603      	mov	r3, r0
   b59d4:	9200      	str	r2, [sp, #0]
   b59d6:	4620      	mov	r0, r4
   b59d8:	2220      	movs	r2, #32
   b59da:	f000 fa9d 	bl	b5f18 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   b59de:	4b0c      	ldr	r3, [pc, #48]	; (b5a10 <_ZN16OledWingAdafruitC1Ei+0x58>)
   b59e0:	6023      	str	r3, [r4, #0]
   b59e2:	2300      	movs	r3, #0
   b59e4:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   b59e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b59ec:	f000 f872 	bl	b5ad4 <_ZN8DebounceC1Ev>
   b59f0:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b59f4:	f000 f86e 	bl	b5ad4 <_ZN8DebounceC1Ev>
   b59f8:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b59fc:	f000 f86a 	bl	b5ad4 <_ZN8DebounceC1Ev>
}
   b5a00:	4620      	mov	r0, r4
   b5a02:	b005      	add	sp, #20
   b5a04:	bd30      	pop	{r4, r5, pc}
   b5a06:	bf00      	nop
   b5a08:	00061a80 	.word	0x00061a80
   b5a0c:	000186a0 	.word	0x000186a0
   b5a10:	000b9758 	.word	0x000b9758

000b5a14 <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   b5a14:	b513      	push	{r0, r1, r4, lr}
   b5a16:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   b5a18:	3050      	adds	r0, #80	; 0x50
   b5a1a:	f000 ff0b 	bl	b6834 <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   b5a1e:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b5a20:	07d9      	lsls	r1, r3, #31
   b5a22:	d505      	bpl.n	b5a30 <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   b5a24:	2202      	movs	r2, #2
   b5a26:	2104      	movs	r1, #4
   b5a28:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b5a2c:	f000 f866 	bl	b5afc <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   b5a30:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b5a32:	079a      	lsls	r2, r3, #30
   b5a34:	d505      	bpl.n	b5a42 <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   b5a36:	2200      	movs	r2, #0
   b5a38:	2103      	movs	r1, #3
   b5a3a:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b5a3e:	f000 f85d 	bl	b5afc <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   b5a42:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b5a44:	075b      	lsls	r3, r3, #29
   b5a46:	d505      	bpl.n	b5a54 <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   b5a48:	2202      	movs	r2, #2
   b5a4a:	4611      	mov	r1, r2
   b5a4c:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b5a50:	f000 f854 	bl	b5afc <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b5a54:	2301      	movs	r3, #1
   b5a56:	9300      	str	r3, [sp, #0]
   b5a58:	223c      	movs	r2, #60	; 0x3c
   b5a5a:	2102      	movs	r1, #2
   b5a5c:	4620      	mov	r0, r4
   b5a5e:	f000 fb63 	bl	b6128 <_ZN16Adafruit_SSD13065beginEhhbb>
}
   b5a62:	b002      	add	sp, #8
   b5a64:	bd10      	pop	{r4, pc}

000b5a66 <_ZN16OledWingAdafruit4loopEv>:

void OledWingAdafruit::loop() {
   b5a66:	b510      	push	{r4, lr}
	if (useButtons & USE_BUTTON_A) {
   b5a68:	6d43      	ldr	r3, [r0, #84]	; 0x54
   b5a6a:	07d9      	lsls	r1, r3, #31
void OledWingAdafruit::loop() {
   b5a6c:	4604      	mov	r4, r0
	if (useButtons & USE_BUTTON_A) {
   b5a6e:	d502      	bpl.n	b5a76 <_ZN16OledWingAdafruit4loopEv+0x10>
		buttonA.update();
   b5a70:	3058      	adds	r0, #88	; 0x58
   b5a72:	f000 f850 	bl	b5b16 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_B) {
   b5a76:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b5a78:	079a      	lsls	r2, r3, #30
   b5a7a:	d503      	bpl.n	b5a84 <_ZN16OledWingAdafruit4loopEv+0x1e>
		buttonB.update();
   b5a7c:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b5a80:	f000 f849 	bl	b5b16 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_C) {
   b5a84:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b5a86:	075b      	lsls	r3, r3, #29
   b5a88:	d505      	bpl.n	b5a96 <_ZN16OledWingAdafruit4loopEv+0x30>
		buttonC.update();
   b5a8a:	f104 0068 	add.w	r0, r4, #104	; 0x68
	}
}
   b5a8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		buttonC.update();
   b5a92:	f000 b840 	b.w	b5b16 <_ZN8Debounce6updateEv>
}
   b5a96:	bd10      	pop	{r4, pc}

000b5a98 <_ZN16OledWingAdafruit8pressedAEv>:

bool OledWingAdafruit::pressedA() {
	return (useButtons & USE_BUTTON_A) && buttonA.fell();
   b5a98:	6d43      	ldr	r3, [r0, #84]	; 0x54
bool OledWingAdafruit::pressedA() {
   b5a9a:	4602      	mov	r2, r0
	return (useButtons & USE_BUTTON_A) && buttonA.fell();
   b5a9c:	f013 0001 	ands.w	r0, r3, #1
   b5aa0:	d003      	beq.n	b5aaa <_ZN16OledWingAdafruit8pressedAEv+0x12>
   b5aa2:	f102 0058 	add.w	r0, r2, #88	; 0x58
   b5aa6:	f000 b866 	b.w	b5b76 <_ZN8Debounce4fellEv>
}
   b5aaa:	4770      	bx	lr

000b5aac <_ZN16OledWingAdafruit8pressedBEv>:

bool OledWingAdafruit::pressedB() {
	return (useButtons & USE_BUTTON_B) && buttonB.fell();
   b5aac:	6d43      	ldr	r3, [r0, #84]	; 0x54
bool OledWingAdafruit::pressedB() {
   b5aae:	4602      	mov	r2, r0
	return (useButtons & USE_BUTTON_B) && buttonB.fell();
   b5ab0:	f013 0002 	ands.w	r0, r3, #2
   b5ab4:	d003      	beq.n	b5abe <_ZN16OledWingAdafruit8pressedBEv+0x12>
   b5ab6:	f102 0060 	add.w	r0, r2, #96	; 0x60
   b5aba:	f000 b85c 	b.w	b5b76 <_ZN8Debounce4fellEv>
}
   b5abe:	4770      	bx	lr

000b5ac0 <_ZN16OledWingAdafruit8pressedCEv>:

bool OledWingAdafruit::pressedC() {
	return (useButtons & USE_BUTTON_C) && buttonC.fell();
   b5ac0:	6d43      	ldr	r3, [r0, #84]	; 0x54
bool OledWingAdafruit::pressedC() {
   b5ac2:	4602      	mov	r2, r0
	return (useButtons & USE_BUTTON_C) && buttonC.fell();
   b5ac4:	f013 0004 	ands.w	r0, r3, #4
   b5ac8:	d003      	beq.n	b5ad2 <_ZN16OledWingAdafruit8pressedCEv+0x12>
   b5aca:	f102 0068 	add.w	r0, r2, #104	; 0x68
   b5ace:	f000 b852 	b.w	b5b76 <_ZN8Debounce4fellEv>
}
   b5ad2:	4770      	bx	lr

000b5ad4 <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   b5ad4:	2100      	movs	r1, #0
   b5ad6:	220a      	movs	r2, #10
   b5ad8:	e9c0 1200 	strd	r1, r2, [r0]
{}
   b5adc:	4770      	bx	lr

000b5ade <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   b5ade:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   b5ae0:	b510      	push	{r4, lr}
   b5ae2:	4604      	mov	r4, r0
    this->pin = pin;
   b5ae4:	71c1      	strb	r1, [r0, #7]
    state = 0;
   b5ae6:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   b5ae8:	b288      	uxth	r0, r1
   b5aea:	f002 fafb 	bl	b80e4 <digitalRead>
   b5aee:	b108      	cbz	r0, b5af4 <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   b5af0:	2303      	movs	r3, #3
   b5af2:	71a3      	strb	r3, [r4, #6]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b5af4:	f000 fe96 	bl	b6824 <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   b5af8:	6020      	str	r0, [r4, #0]
#endif
}
   b5afa:	bd10      	pop	{r4, pc}

000b5afc <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   b5afc:	b538      	push	{r3, r4, r5, lr}
   b5afe:	460c      	mov	r4, r1
   b5b00:	4605      	mov	r5, r0
  pinMode(pin, mode);
   b5b02:	4611      	mov	r1, r2
   b5b04:	b2a0      	uxth	r0, r4
   b5b06:	f002 fac3 	bl	b8090 <pinMode>
  
  this->attach(pin);
   b5b0a:	4621      	mov	r1, r4
   b5b0c:	4628      	mov	r0, r5
}
   b5b0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   b5b12:	f7ff bfe4 	b.w	b5ade <_ZN8Debounce6attachEi>

000b5b16 <_ZN8Debounce6updateEv>:
{
    this->interval_millis = interval_millis;
}

bool Debounce::update()
{
   b5b16:	b538      	push	{r3, r4, r5, lr}
   b5b18:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   b5b1a:	79c0      	ldrb	r0, [r0, #7]
   b5b1c:	f002 fae2 	bl	b80e4 <digitalRead>
    state &= ~_BV(STATE_CHANGED);
   b5b20:	79a5      	ldrb	r5, [r4, #6]
    bool currentState = digitalRead(pin);
   b5b22:	3800      	subs	r0, #0
    state &= ~_BV(STATE_CHANGED);
   b5b24:	f025 0308 	bic.w	r3, r5, #8
    bool currentState = digitalRead(pin);
   b5b28:	bf18      	it	ne
   b5b2a:	2001      	movne	r0, #1

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b5b2c:	f3c5 0540 	ubfx	r5, r5, #1, #1
   b5b30:	4285      	cmp	r5, r0
    state &= ~_BV(STATE_CHANGED);
   b5b32:	71a3      	strb	r3, [r4, #6]
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b5b34:	d00a      	beq.n	b5b4c <_ZN8Debounce6updateEv+0x36>
   b5b36:	f000 fe75 	bl	b6824 <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
   b5b3a:	79a3      	ldrb	r3, [r4, #6]
        previous_millis = millis();
   b5b3c:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
   b5b3e:	f083 0302 	eor.w	r3, r3, #2
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
   b5b42:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
   b5b44:	79a0      	ldrb	r0, [r4, #6]
#endif
}
   b5b46:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b5b4a:	bd38      	pop	{r3, r4, r5, pc}
   b5b4c:	f000 fe6a 	bl	b6824 <HAL_Timer_Get_Milli_Seconds>
        if ( millis() - previous_millis >= interval_millis ) {
   b5b50:	6823      	ldr	r3, [r4, #0]
   b5b52:	1ac0      	subs	r0, r0, r3
   b5b54:	88a3      	ldrh	r3, [r4, #4]
   b5b56:	4298      	cmp	r0, r3
   b5b58:	d3f4      	bcc.n	b5b44 <_ZN8Debounce6updateEv+0x2e>
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
   b5b5a:	79a3      	ldrb	r3, [r4, #6]
   b5b5c:	f003 0301 	and.w	r3, r3, #1
   b5b60:	42ab      	cmp	r3, r5
   b5b62:	d0ef      	beq.n	b5b44 <_ZN8Debounce6updateEv+0x2e>
   b5b64:	f000 fe5e 	bl	b6824 <HAL_Timer_Get_Milli_Seconds>
                state ^= _BV(DEBOUNCED_STATE);
   b5b68:	79a3      	ldrb	r3, [r4, #6]
                previous_millis = millis();
   b5b6a:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
   b5b6c:	f083 0301 	eor.w	r3, r3, #1
                state |= _BV(STATE_CHANGED);
   b5b70:	f043 0308 	orr.w	r3, r3, #8
   b5b74:	e7e5      	b.n	b5b42 <_ZN8Debounce6updateEv+0x2c>

000b5b76 <_ZN8Debounce4fellEv>:
    return ( state & _BV(DEBOUNCED_STATE) ) && ( state & _BV(STATE_CHANGED));
}

bool Debounce::fell()
{
    return !( state & _BV(DEBOUNCED_STATE) ) && ( state & _BV(STATE_CHANGED));
   b5b76:	7980      	ldrb	r0, [r0, #6]
   b5b78:	f000 0009 	and.w	r0, r0, #9
   b5b7c:	f1a0 0308 	sub.w	r3, r0, #8
   b5b80:	4258      	negs	r0, r3
   b5b82:	4158      	adcs	r0, r3
   b5b84:	4770      	bx	lr

000b5b86 <_ZN8VCNL4040C1Ev>:
#define VCNL4040_WHITE_DATA 0x0A
#define VCNL4040_INT_FLAG 0x0B //Upper
#define VCNL4040_ID 0x0C

//Class constructor
VCNL4040::VCNL4040(void) {}
   b5b86:	4770      	bx	lr

000b5b88 <_ZN8VCNL404011isConnectedEv>:

  return (true);
}

//Test to see if the device is responding
boolean VCNL4040::isConnected(void) {
   b5b88:	b510      	push	{r4, lr}
   b5b8a:	4604      	mov	r4, r0
  _i2cPort->beginTransmission((uint8_t)VCNL4040_ADDR);
   b5b8c:	2160      	movs	r1, #96	; 0x60
   b5b8e:	6800      	ldr	r0, [r0, #0]
   b5b90:	f001 fe76 	bl	b7880 <_ZN7TwoWire17beginTransmissionEh>
  return (_i2cPort->endTransmission() == 0);
   b5b94:	6820      	ldr	r0, [r4, #0]
   b5b96:	f001 fe7e 	bl	b7896 <_ZN7TwoWire15endTransmissionEv>
}
   b5b9a:	fab0 f080 	clz	r0, r0
   b5b9e:	0940      	lsrs	r0, r0, #5
   b5ba0:	bd10      	pop	{r4, pc}

000b5ba2 <_ZN8VCNL404011readCommandEh>:
  return (interruptFlags & VCNL4040_INT_FLAG_ALS_LOW);
}

//Reads two consecutive bytes from a given 'command code' location
uint16_t VCNL4040::readCommand(uint8_t commandCode)
{
   b5ba2:	b538      	push	{r3, r4, r5, lr}
   b5ba4:	4605      	mov	r5, r0
   b5ba6:	460c      	mov	r4, r1
  _i2cPort->beginTransmission(VCNL4040_ADDR);
   b5ba8:	6800      	ldr	r0, [r0, #0]
   b5baa:	2160      	movs	r1, #96	; 0x60
   b5bac:	f001 fe68 	bl	b7880 <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(commandCode);
   b5bb0:	6828      	ldr	r0, [r5, #0]
   b5bb2:	6803      	ldr	r3, [r0, #0]
   b5bb4:	4621      	mov	r1, r4
   b5bb6:	689b      	ldr	r3, [r3, #8]
   b5bb8:	4798      	blx	r3
  if (_i2cPort->endTransmission(false) != 0) //Send a restart command. Do not release bus.
   b5bba:	6828      	ldr	r0, [r5, #0]
   b5bbc:	2100      	movs	r1, #0
   b5bbe:	f001 fe66 	bl	b788e <_ZN7TwoWire15endTransmissionEh>
   b5bc2:	b108      	cbz	r0, b5bc8 <_ZN8VCNL404011readCommandEh+0x26>
  {
    return (0); //Sensor did not ACK
   b5bc4:	2000      	movs	r0, #0
    uint8_t msb = _i2cPort->read();
    return ((uint16_t)msb << 8 | lsb);
  }

  return (0); //Sensor did not respond
}
   b5bc6:	bd38      	pop	{r3, r4, r5, pc}
  _i2cPort->requestFrom((uint8_t)VCNL4040_ADDR, (uint8_t)2);
   b5bc8:	6828      	ldr	r0, [r5, #0]
   b5bca:	2202      	movs	r2, #2
   b5bcc:	2160      	movs	r1, #96	; 0x60
   b5bce:	f001 fe54 	bl	b787a <_ZN7TwoWire11requestFromEhj>
  if (_i2cPort->available())
   b5bd2:	6828      	ldr	r0, [r5, #0]
   b5bd4:	6803      	ldr	r3, [r0, #0]
   b5bd6:	691b      	ldr	r3, [r3, #16]
   b5bd8:	4798      	blx	r3
   b5bda:	2800      	cmp	r0, #0
   b5bdc:	d0f2      	beq.n	b5bc4 <_ZN8VCNL404011readCommandEh+0x22>
    uint8_t lsb = _i2cPort->read();
   b5bde:	6828      	ldr	r0, [r5, #0]
   b5be0:	6803      	ldr	r3, [r0, #0]
   b5be2:	695b      	ldr	r3, [r3, #20]
   b5be4:	4798      	blx	r3
   b5be6:	4604      	mov	r4, r0
    uint8_t msb = _i2cPort->read();
   b5be8:	6828      	ldr	r0, [r5, #0]
   b5bea:	6803      	ldr	r3, [r0, #0]
   b5bec:	695b      	ldr	r3, [r3, #20]
   b5bee:	4798      	blx	r3
    return ((uint16_t)msb << 8 | lsb);
   b5bf0:	b2e4      	uxtb	r4, r4
   b5bf2:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
   b5bf6:	b280      	uxth	r0, r0
   b5bf8:	e7e5      	b.n	b5bc6 <_ZN8VCNL404011readCommandEh+0x24>

000b5bfa <_ZN8VCNL404010getAmbientEv>:
  return (readCommand(VCNL4040_ALS_DATA));
   b5bfa:	2109      	movs	r1, #9
   b5bfc:	f7ff bfd1 	b.w	b5ba2 <_ZN8VCNL404011readCommandEh>

000b5c00 <_ZN8VCNL40405getIDEv>:
  return (readCommand(VCNL4040_ID));
   b5c00:	210c      	movs	r1, #12
   b5c02:	f7ff bfce 	b.w	b5ba2 <_ZN8VCNL404011readCommandEh>

000b5c06 <_ZN8VCNL404012writeCommandEht>:

//Write two bytes to a given command code location (8 bits)
boolean VCNL4040::writeCommand(uint8_t commandCode, uint16_t value)
{
   b5c06:	b570      	push	{r4, r5, r6, lr}
   b5c08:	4604      	mov	r4, r0
   b5c0a:	460e      	mov	r6, r1
  _i2cPort->beginTransmission(VCNL4040_ADDR);
   b5c0c:	6800      	ldr	r0, [r0, #0]
   b5c0e:	2160      	movs	r1, #96	; 0x60
{
   b5c10:	4615      	mov	r5, r2
  _i2cPort->beginTransmission(VCNL4040_ADDR);
   b5c12:	f001 fe35 	bl	b7880 <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(commandCode);
   b5c16:	6820      	ldr	r0, [r4, #0]
   b5c18:	6803      	ldr	r3, [r0, #0]
   b5c1a:	4631      	mov	r1, r6
   b5c1c:	689b      	ldr	r3, [r3, #8]
   b5c1e:	4798      	blx	r3
  _i2cPort->write(value & 0xFF); //LSB
   b5c20:	6820      	ldr	r0, [r4, #0]
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b5c22:	6803      	ldr	r3, [r0, #0]
   b5c24:	b2e9      	uxtb	r1, r5
   b5c26:	689b      	ldr	r3, [r3, #8]
   b5c28:	4798      	blx	r3
  _i2cPort->write(value >> 8); //MSB
   b5c2a:	6820      	ldr	r0, [r4, #0]
   b5c2c:	6803      	ldr	r3, [r0, #0]
   b5c2e:	0a29      	lsrs	r1, r5, #8
   b5c30:	689b      	ldr	r3, [r3, #8]
   b5c32:	4798      	blx	r3
  if (_i2cPort->endTransmission() != 0)
   b5c34:	6820      	ldr	r0, [r4, #0]
   b5c36:	f001 fe2e 	bl	b7896 <_ZN7TwoWire15endTransmissionEv>
  {
    return (false); //Sensor did not ACK
  }

  return (true);
}
   b5c3a:	fab0 f080 	clz	r0, r0
   b5c3e:	0940      	lsrs	r0, r0, #5
   b5c40:	bd70      	pop	{r4, r5, r6, pc}

000b5c42 <_ZN8VCNL404017writeCommandLowerEhh>:

//Given a command code (address) write to the lower byte without affecting the upper byte
boolean VCNL4040::writeCommandLower(uint8_t commandCode, uint8_t newValue)
{
   b5c42:	b570      	push	{r4, r5, r6, lr}
   b5c44:	4604      	mov	r4, r0
   b5c46:	460d      	mov	r5, r1
   b5c48:	4616      	mov	r6, r2
  uint16_t commandValue = readCommand(commandCode);
   b5c4a:	f7ff ffaa 	bl	b5ba2 <_ZN8VCNL404011readCommandEh>
  commandValue &= 0xFF00; //Remove lower 8 bits
   b5c4e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
  commandValue |= (uint16_t)newValue; //Mask in
  return (writeCommand(commandCode, commandValue));
   b5c52:	ea40 0206 	orr.w	r2, r0, r6
   b5c56:	4629      	mov	r1, r5
   b5c58:	4620      	mov	r0, r4
}
   b5c5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return (writeCommand(commandCode, commandValue));
   b5c5e:	f7ff bfd2 	b.w	b5c06 <_ZN8VCNL404012writeCommandEht>

000b5c62 <_ZN8VCNL404017writeCommandUpperEhh>:

//Given a command code (address) write to the upper byte without affecting the lower byte
boolean VCNL4040::writeCommandUpper(uint8_t commandCode, uint8_t newValue)
{
   b5c62:	b570      	push	{r4, r5, r6, lr}
   b5c64:	4604      	mov	r4, r0
   b5c66:	460d      	mov	r5, r1
   b5c68:	4616      	mov	r6, r2
  uint16_t commandValue = readCommand(commandCode);
   b5c6a:	f7ff ff9a 	bl	b5ba2 <_ZN8VCNL404011readCommandEh>
  commandValue &= 0x00FF; //Remove upper 8 bits
   b5c6e:	b2c0      	uxtb	r0, r0
  commandValue |= (uint16_t)newValue << 8; //Mask in
  return (writeCommand(commandCode, commandValue));
   b5c70:	ea40 2206 	orr.w	r2, r0, r6, lsl #8
   b5c74:	4629      	mov	r1, r5
   b5c76:	4620      	mov	r0, r4
}
   b5c78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return (writeCommand(commandCode, commandValue));
   b5c7c:	f7ff bfc3 	b.w	b5c06 <_ZN8VCNL404012writeCommandEht>

000b5c80 <_ZN8VCNL404016readCommandUpperEh>:
  return (commandValue & 0xFF);
}

//Given a command code (address) read the upper byte
uint8_t VCNL4040::readCommandUpper(uint8_t commandCode)
{
   b5c80:	b508      	push	{r3, lr}
  uint16_t commandValue = readCommand(commandCode);
   b5c82:	f7ff ff8e 	bl	b5ba2 <_ZN8VCNL404011readCommandEh>
  return (commandValue >> 8);
}
   b5c86:	f3c0 2007 	ubfx	r0, r0, #8, #8
   b5c8a:	bd08      	pop	{r3, pc}

000b5c8c <_ZN8VCNL40407bitMaskEhbhh>:
//commandHeight is used to select between the upper or lower byte of command register
//Example:
//Write dutyValue into PS_CONF1, lower byte, using the Duty_Mask
//bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_DUTY_MASK, dutyValue);
void VCNL4040::bitMask(uint8_t commandAddress, boolean commandHeight, uint8_t mask, uint8_t thing)
{
   b5c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5c90:	4604      	mov	r4, r0
   b5c92:	f89d 7018 	ldrb.w	r7, [sp, #24]
   b5c96:	460d      	mov	r5, r1
   b5c98:	4698      	mov	r8, r3
  // Grab current register context
  uint8_t registerContents;
  if (commandHeight == LOWER) registerContents = readCommandLower(commandAddress);
   b5c9a:	4616      	mov	r6, r2
   b5c9c:	b16a      	cbz	r2, b5cba <_ZN8VCNL40407bitMaskEhbhh+0x2e>
  uint16_t commandValue = readCommand(commandCode);
   b5c9e:	f7ff ff80 	bl	b5ba2 <_ZN8VCNL404011readCommandEh>
  return (commandValue & 0xFF);
   b5ca2:	b2c0      	uxtb	r0, r0
  else registerContents = readCommandUpper(commandAddress);

  // Zero-out the portions of the register we're interested in
  registerContents &= mask;
   b5ca4:	ea00 0308 	and.w	r3, r0, r8

  // Mask in new thing
  registerContents |= thing;
   b5ca8:	ea43 0207 	orr.w	r2, r3, r7

  // Change contents
  if (commandHeight == LOWER) writeCommandLower(commandAddress, registerContents);
   b5cac:	4629      	mov	r1, r5
   b5cae:	4620      	mov	r0, r4
   b5cb0:	b136      	cbz	r6, b5cc0 <_ZN8VCNL40407bitMaskEhbhh+0x34>
  else writeCommandUpper(commandAddress, registerContents);
}
   b5cb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  if (commandHeight == LOWER) writeCommandLower(commandAddress, registerContents);
   b5cb6:	f7ff bfc4 	b.w	b5c42 <_ZN8VCNL404017writeCommandLowerEhh>
  else registerContents = readCommandUpper(commandAddress);
   b5cba:	f7ff ffe1 	bl	b5c80 <_ZN8VCNL404016readCommandUpperEh>
   b5cbe:	e7f1      	b.n	b5ca4 <_ZN8VCNL40407bitMaskEhbhh+0x18>
}
   b5cc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  else writeCommandUpper(commandAddress, registerContents);
   b5cc4:	f7ff bfcd 	b.w	b5c62 <_ZN8VCNL404017writeCommandUpperEhh>

000b5cc8 <_ZN8VCNL404014setIRDutyCycleEt>:
  if(dutyValue > 320 - 1) dutyValue = VCNL4040_PS_DUTY_320;
   b5cc8:	f5b1 7fa0 	cmp.w	r1, #320	; 0x140
{
   b5ccc:	b507      	push	{r0, r1, r2, lr}
  if(dutyValue > 320 - 1) dutyValue = VCNL4040_PS_DUTY_320;
   b5cce:	d20e      	bcs.n	b5cee <_ZN8VCNL404014setIRDutyCycleEt+0x26>
  else if(dutyValue > 160 - 1) dutyValue = VCNL4040_PS_DUTY_160;
   b5cd0:	299f      	cmp	r1, #159	; 0x9f
   b5cd2:	d80e      	bhi.n	b5cf2 <_ZN8VCNL404014setIRDutyCycleEt+0x2a>
  else dutyValue = VCNL4040_PS_DUTY_40;
   b5cd4:	294f      	cmp	r1, #79	; 0x4f
   b5cd6:	bf8c      	ite	hi
   b5cd8:	2340      	movhi	r3, #64	; 0x40
   b5cda:	2300      	movls	r3, #0
  bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_DUTY_MASK, dutyValue);
   b5cdc:	9300      	str	r3, [sp, #0]
   b5cde:	2201      	movs	r2, #1
   b5ce0:	233f      	movs	r3, #63	; 0x3f
   b5ce2:	2103      	movs	r1, #3
   b5ce4:	f7ff ffd2 	bl	b5c8c <_ZN8VCNL40407bitMaskEhbhh>
}
   b5ce8:	b003      	add	sp, #12
   b5cea:	f85d fb04 	ldr.w	pc, [sp], #4
  if(dutyValue > 320 - 1) dutyValue = VCNL4040_PS_DUTY_320;
   b5cee:	23c0      	movs	r3, #192	; 0xc0
   b5cf0:	e7f4      	b.n	b5cdc <_ZN8VCNL404014setIRDutyCycleEt+0x14>
  else if(dutyValue > 160 - 1) dutyValue = VCNL4040_PS_DUTY_160;
   b5cf2:	2380      	movs	r3, #128	; 0x80
   b5cf4:	e7f2      	b.n	b5cdc <_ZN8VCNL404014setIRDutyCycleEt+0x14>

000b5cf6 <_ZN8VCNL404014powerOnAmbientEv>:
{
   b5cf6:	b507      	push	{r0, r1, r2, lr}
  bitMask(VCNL4040_ALS_CONF, LOWER, VCNL4040_ALS_SD_MASK, VCNL4040_ALS_SD_POWER_ON);
   b5cf8:	2100      	movs	r1, #0
   b5cfa:	9100      	str	r1, [sp, #0]
   b5cfc:	23fe      	movs	r3, #254	; 0xfe
   b5cfe:	2201      	movs	r2, #1
   b5d00:	f7ff ffc4 	bl	b5c8c <_ZN8VCNL40407bitMaskEhbhh>
}
   b5d04:	b003      	add	sp, #12
   b5d06:	f85d fb04 	ldr.w	pc, [sp], #4

000b5d0a <_ZN8VCNL404022setProxIntegrationTimeEh>:
  if(timeValue > 8 - 1) timeValue = VCNL4040_PS_IT_8T;
   b5d0a:	2907      	cmp	r1, #7
{
   b5d0c:	b507      	push	{r0, r1, r2, lr}
  if(timeValue > 8 - 1) timeValue = VCNL4040_PS_IT_8T;
   b5d0e:	d80f      	bhi.n	b5d30 <_ZN8VCNL404022setProxIntegrationTimeEh+0x26>
  else if(timeValue > 4 - 1) timeValue = VCNL4040_PS_IT_4T;
   b5d10:	2903      	cmp	r1, #3
   b5d12:	d80f      	bhi.n	b5d34 <_ZN8VCNL404022setProxIntegrationTimeEh+0x2a>
  else if(timeValue > 3 - 1) timeValue = VCNL4040_PS_IT_3T;
   b5d14:	d010      	beq.n	b5d38 <_ZN8VCNL404022setProxIntegrationTimeEh+0x2e>
  else timeValue = VCNL4040_PS_IT_1T;
   b5d16:	2902      	cmp	r1, #2
   b5d18:	bf0c      	ite	eq
   b5d1a:	2304      	moveq	r3, #4
   b5d1c:	2300      	movne	r3, #0
  bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_IT_MASK, timeValue);
   b5d1e:	9300      	str	r3, [sp, #0]
   b5d20:	2201      	movs	r2, #1
   b5d22:	23f1      	movs	r3, #241	; 0xf1
   b5d24:	2103      	movs	r1, #3
   b5d26:	f7ff ffb1 	bl	b5c8c <_ZN8VCNL40407bitMaskEhbhh>
}
   b5d2a:	b003      	add	sp, #12
   b5d2c:	f85d fb04 	ldr.w	pc, [sp], #4
  if(timeValue > 8 - 1) timeValue = VCNL4040_PS_IT_8T;
   b5d30:	230e      	movs	r3, #14
   b5d32:	e7f4      	b.n	b5d1e <_ZN8VCNL404022setProxIntegrationTimeEh+0x14>
  else if(timeValue > 4 - 1) timeValue = VCNL4040_PS_IT_4T;
   b5d34:	230c      	movs	r3, #12
   b5d36:	e7f2      	b.n	b5d1e <_ZN8VCNL404022setProxIntegrationTimeEh+0x14>
  else if(timeValue > 3 - 1) timeValue = VCNL4040_PS_IT_3T;
   b5d38:	2308      	movs	r3, #8
   b5d3a:	e7f0      	b.n	b5d1e <_ZN8VCNL404022setProxIntegrationTimeEh+0x14>

000b5d3c <_ZN8VCNL404016powerOnProximityEv>:
{
   b5d3c:	b507      	push	{r0, r1, r2, lr}
  bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_SD_MASK, VCNL4040_PS_SD_POWER_ON);
   b5d3e:	2300      	movs	r3, #0
   b5d40:	9300      	str	r3, [sp, #0]
   b5d42:	2201      	movs	r2, #1
   b5d44:	23fe      	movs	r3, #254	; 0xfe
   b5d46:	2103      	movs	r1, #3
   b5d48:	f7ff ffa0 	bl	b5c8c <_ZN8VCNL40407bitMaskEhbhh>
}
   b5d4c:	b003      	add	sp, #12
   b5d4e:	f85d fb04 	ldr.w	pc, [sp], #4

000b5d52 <_ZN8VCNL404017setProxResolutionEh>:
{
   b5d52:	b507      	push	{r0, r1, r2, lr}
	else resolutionValue = VCNL4040_PS_HD_12_BIT;
   b5d54:	290f      	cmp	r1, #15
   b5d56:	bf8c      	ite	hi
   b5d58:	2308      	movhi	r3, #8
   b5d5a:	2300      	movls	r3, #0
  bitMask(VCNL4040_PS_CONF2, UPPER, VCNL4040_PS_HD_MASK, resolutionValue);
   b5d5c:	9300      	str	r3, [sp, #0]
   b5d5e:	2200      	movs	r2, #0
   b5d60:	23f7      	movs	r3, #247	; 0xf7
   b5d62:	2103      	movs	r1, #3
   b5d64:	f7ff ff92 	bl	b5c8c <_ZN8VCNL40407bitMaskEhbhh>
}
   b5d68:	b003      	add	sp, #12
   b5d6a:	f85d fb04 	ldr.w	pc, [sp], #4

000b5d6e <_ZN8VCNL404022enableSmartPersistanceEv>:
{
   b5d6e:	b507      	push	{r0, r1, r2, lr}
  bitMask(VCNL4040_PS_CONF3, LOWER, VCNL4040_PS_SMART_PERS_MASK, VCNL4040_PS_SMART_PERS_ENABLE);
   b5d70:	2302      	movs	r3, #2
   b5d72:	9300      	str	r3, [sp, #0]
   b5d74:	2201      	movs	r2, #1
   b5d76:	23ef      	movs	r3, #239	; 0xef
   b5d78:	2104      	movs	r1, #4
   b5d7a:	f7ff ff87 	bl	b5c8c <_ZN8VCNL40407bitMaskEhbhh>
}
   b5d7e:	b003      	add	sp, #12
   b5d80:	f85d fb04 	ldr.w	pc, [sp], #4

000b5d84 <_ZN8VCNL404013setLEDCurrentEh>:
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
   b5d84:	29c7      	cmp	r1, #199	; 0xc7
{
   b5d86:	b507      	push	{r0, r1, r2, lr}
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
   b5d88:	d816      	bhi.n	b5db8 <_ZN8VCNL404013setLEDCurrentEh+0x34>
	else if(currentValue > 180 - 1) currentValue = VCNL4040_LED_180MA;
   b5d8a:	29b3      	cmp	r1, #179	; 0xb3
   b5d8c:	d816      	bhi.n	b5dbc <_ZN8VCNL404013setLEDCurrentEh+0x38>
	else if(currentValue > 160 - 1) currentValue = VCNL4040_LED_160MA;
   b5d8e:	299f      	cmp	r1, #159	; 0x9f
   b5d90:	d816      	bhi.n	b5dc0 <_ZN8VCNL404013setLEDCurrentEh+0x3c>
	else if(currentValue > 140 - 1) currentValue = VCNL4040_LED_140MA;
   b5d92:	298b      	cmp	r1, #139	; 0x8b
   b5d94:	d816      	bhi.n	b5dc4 <_ZN8VCNL404013setLEDCurrentEh+0x40>
	else if(currentValue > 120 - 1) currentValue = VCNL4040_LED_120MA;
   b5d96:	2977      	cmp	r1, #119	; 0x77
   b5d98:	d816      	bhi.n	b5dc8 <_ZN8VCNL404013setLEDCurrentEh+0x44>
	else if(currentValue > 100 - 1) currentValue = VCNL4040_LED_100MA;
   b5d9a:	2963      	cmp	r1, #99	; 0x63
   b5d9c:	d816      	bhi.n	b5dcc <_ZN8VCNL404013setLEDCurrentEh+0x48>
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
   b5d9e:	294a      	cmp	r1, #74	; 0x4a
   b5da0:	bf94      	ite	ls
   b5da2:	2100      	movls	r1, #0
   b5da4:	2101      	movhi	r1, #1
	bitMask(VCNL4040_PS_MS, UPPER, VCNL4040_LED_I_MASK, currentValue);
   b5da6:	9100      	str	r1, [sp, #0]
   b5da8:	23f8      	movs	r3, #248	; 0xf8
   b5daa:	2200      	movs	r2, #0
   b5dac:	2104      	movs	r1, #4
   b5dae:	f7ff ff6d 	bl	b5c8c <_ZN8VCNL40407bitMaskEhbhh>
}
   b5db2:	b003      	add	sp, #12
   b5db4:	f85d fb04 	ldr.w	pc, [sp], #4
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
   b5db8:	2107      	movs	r1, #7
   b5dba:	e7f4      	b.n	b5da6 <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 180 - 1) currentValue = VCNL4040_LED_180MA;
   b5dbc:	2106      	movs	r1, #6
   b5dbe:	e7f2      	b.n	b5da6 <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 160 - 1) currentValue = VCNL4040_LED_160MA;
   b5dc0:	2105      	movs	r1, #5
   b5dc2:	e7f0      	b.n	b5da6 <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 140 - 1) currentValue = VCNL4040_LED_140MA;
   b5dc4:	2104      	movs	r1, #4
   b5dc6:	e7ee      	b.n	b5da6 <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 120 - 1) currentValue = VCNL4040_LED_120MA;
   b5dc8:	2103      	movs	r1, #3
   b5dca:	e7ec      	b.n	b5da6 <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 100 - 1) currentValue = VCNL4040_LED_100MA;
   b5dcc:	2102      	movs	r1, #2
   b5dce:	e7ea      	b.n	b5da6 <_ZN8VCNL404013setLEDCurrentEh+0x22>

000b5dd0 <_ZN8VCNL40405beginER7TwoWire>:
boolean VCNL4040::begin(TwoWire &wirePort) {
   b5dd0:	b538      	push	{r3, r4, r5, lr}
   b5dd2:	4604      	mov	r4, r0
   b5dd4:	4608      	mov	r0, r1
  _i2cPort = &wirePort; //Grab which port the user wants us to use
   b5dd6:	6021      	str	r1, [r4, #0]
  _i2cPort->begin();
   b5dd8:	f001 fd20 	bl	b781c <_ZN7TwoWire5beginEv>
  if (isConnected() == false) return (false); //I2C comm failure
   b5ddc:	4620      	mov	r0, r4
   b5dde:	f7ff fed3 	bl	b5b88 <_ZN8VCNL404011isConnectedEv>
   b5de2:	4605      	mov	r5, r0
   b5de4:	b910      	cbnz	r0, b5dec <_ZN8VCNL40405beginER7TwoWire+0x1c>
   b5de6:	2500      	movs	r5, #0
}
   b5de8:	4628      	mov	r0, r5
   b5dea:	bd38      	pop	{r3, r4, r5, pc}
  if (getID() != 0x0186) return (false); //Check default ID value
   b5dec:	4620      	mov	r0, r4
   b5dee:	f7ff ff07 	bl	b5c00 <_ZN8VCNL40405getIDEv>
   b5df2:	f5b0 7fc3 	cmp.w	r0, #390	; 0x186
   b5df6:	d1f6      	bne.n	b5de6 <_ZN8VCNL40405beginER7TwoWire+0x16>
  setLEDCurrent(200); //Max IR LED current
   b5df8:	4620      	mov	r0, r4
   b5dfa:	21c8      	movs	r1, #200	; 0xc8
   b5dfc:	f7ff ffc2 	bl	b5d84 <_ZN8VCNL404013setLEDCurrentEh>
  setIRDutyCycle(40); //Set to highest duty cycle
   b5e00:	4620      	mov	r0, r4
   b5e02:	2128      	movs	r1, #40	; 0x28
   b5e04:	f7ff ff60 	bl	b5cc8 <_ZN8VCNL404014setIRDutyCycleEt>
  setProxIntegrationTime(8); //Set to max integration
   b5e08:	4620      	mov	r0, r4
   b5e0a:	2108      	movs	r1, #8
   b5e0c:	f7ff ff7d 	bl	b5d0a <_ZN8VCNL404022setProxIntegrationTimeEh>
  setProxResolution(16); //Set to 16-bit output
   b5e10:	2110      	movs	r1, #16
   b5e12:	4620      	mov	r0, r4
   b5e14:	f7ff ff9d 	bl	b5d52 <_ZN8VCNL404017setProxResolutionEh>
  enableSmartPersistance(); //Turn on smart presistance
   b5e18:	4620      	mov	r0, r4
   b5e1a:	f7ff ffa8 	bl	b5d6e <_ZN8VCNL404022enableSmartPersistanceEv>
  powerOnProximity(); //Turn on prox sensing
   b5e1e:	4620      	mov	r0, r4
   b5e20:	f7ff ff8c 	bl	b5d3c <_ZN8VCNL404016powerOnProximityEv>
  return (true);
   b5e24:	e7e0      	b.n	b5de8 <_ZN8VCNL40405beginER7TwoWire+0x18>
	...

000b5e28 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b5e28:	b510      	push	{r4, lr}
   b5e2a:	4b04      	ldr	r3, [pc, #16]	; (b5e3c <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b5e2c:	6003      	str	r3, [r0, #0]
   b5e2e:	4604      	mov	r4, r0
  if(buffer) {
   b5e30:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5e32:	b108      	cbz	r0, b5e38 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b5e34:	f000 ff22 	bl	b6c7c <free>
    buffer = NULL;
  }
}
   b5e38:	4620      	mov	r0, r4
   b5e3a:	bd10      	pop	{r4, pc}
   b5e3c:	000b9c64 	.word	0x000b9c64

000b5e40 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b5e40:	b510      	push	{r4, lr}
   b5e42:	4604      	mov	r4, r0
}
   b5e44:	f7ff fff0 	bl	b5e28 <_ZN16Adafruit_SSD1306D1Ev>
   b5e48:	4620      	mov	r0, r4
   b5e4a:	2150      	movs	r1, #80	; 0x50
   b5e4c:	f7fe f927 	bl	b409e <_ZdlPvj>
   b5e50:	4620      	mov	r0, r4
   b5e52:	bd10      	pop	{r4, pc}

000b5e54 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b5e54:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b5e56:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b5e58:	db4b      	blt.n	b5ef2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b5e5a:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b5e5e:	428c      	cmp	r4, r1
   b5e60:	dd47      	ble.n	b5ef2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b5e62:	2a00      	cmp	r2, #0
   b5e64:	db45      	blt.n	b5ef2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b5e66:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b5e6a:	4294      	cmp	r4, r2
   b5e6c:	dd41      	ble.n	b5ef2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b5e6e:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b5e70:	2c02      	cmp	r4, #2
   b5e72:	d01f      	beq.n	b5eb4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b5e74:	2c03      	cmp	r4, #3
   b5e76:	d026      	beq.n	b5ec6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b5e78:	2c01      	cmp	r4, #1
   b5e7a:	d104      	bne.n	b5e86 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b5e7c:	8904      	ldrh	r4, [r0, #8]
   b5e7e:	43d2      	mvns	r2, r2
   b5e80:	4414      	add	r4, r2
      break;
   b5e82:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b5e84:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b5e86:	2b01      	cmp	r3, #1
   b5e88:	d023      	beq.n	b5ed2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b5e8a:	2b02      	cmp	r3, #2
   b5e8c:	d032      	beq.n	b5ef4 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b5e8e:	bb83      	cbnz	r3, b5ef2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b5e90:	2a00      	cmp	r2, #0
   b5e92:	4613      	mov	r3, r2
   b5e94:	8904      	ldrh	r4, [r0, #8]
   b5e96:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5e98:	bfb8      	it	lt
   b5e9a:	1dd3      	addlt	r3, r2, #7
   b5e9c:	10db      	asrs	r3, r3, #3
   b5e9e:	fb13 1104 	smlabb	r1, r3, r4, r1
   b5ea2:	f002 0207 	and.w	r2, r2, #7
   b5ea6:	2301      	movs	r3, #1
   b5ea8:	4093      	lsls	r3, r2
   b5eaa:	5c42      	ldrb	r2, [r0, r1]
   b5eac:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b5eb0:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b5eb2:	e01e      	b.n	b5ef2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b5eb4:	8904      	ldrh	r4, [r0, #8]
   b5eb6:	3c01      	subs	r4, #1
   b5eb8:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b5eba:	8944      	ldrh	r4, [r0, #10]
   b5ebc:	43d2      	mvns	r2, r2
   b5ebe:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b5ec0:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b5ec2:	b212      	sxth	r2, r2
      break;
   b5ec4:	e7df      	b.n	b5e86 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b5ec6:	8944      	ldrh	r4, [r0, #10]
   b5ec8:	3c01      	subs	r4, #1
   b5eca:	1a64      	subs	r4, r4, r1
      break;
   b5ecc:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b5ece:	b222      	sxth	r2, r4
      break;
   b5ed0:	e7d9      	b.n	b5e86 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b5ed2:	2a00      	cmp	r2, #0
   b5ed4:	8904      	ldrh	r4, [r0, #8]
   b5ed6:	4613      	mov	r3, r2
   b5ed8:	bfb8      	it	lt
   b5eda:	1dd3      	addlt	r3, r2, #7
   b5edc:	10db      	asrs	r3, r3, #3
   b5ede:	fb13 1104 	smlabb	r1, r3, r4, r1
   b5ee2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b5ee4:	f002 0007 	and.w	r0, r2, #7
   b5ee8:	2201      	movs	r2, #1
   b5eea:	4082      	lsls	r2, r0
   b5eec:	5c58      	ldrb	r0, [r3, r1]
   b5eee:	4302      	orrs	r2, r0
   b5ef0:	545a      	strb	r2, [r3, r1]
}
   b5ef2:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b5ef4:	2a00      	cmp	r2, #0
   b5ef6:	4613      	mov	r3, r2
   b5ef8:	8904      	ldrh	r4, [r0, #8]
   b5efa:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5efc:	bfb8      	it	lt
   b5efe:	1dd3      	addlt	r3, r2, #7
   b5f00:	10db      	asrs	r3, r3, #3
   b5f02:	fb13 1104 	smlabb	r1, r3, r4, r1
   b5f06:	f002 0207 	and.w	r2, r2, #7
   b5f0a:	2301      	movs	r3, #1
   b5f0c:	fa03 f202 	lsl.w	r2, r3, r2
   b5f10:	5c43      	ldrb	r3, [r0, r1]
   b5f12:	405a      	eors	r2, r3
   b5f14:	e7cc      	b.n	b5eb0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b5f18 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   b5f18:	b570      	push	{r4, r5, r6, lr}
   b5f1a:	4604      	mov	r4, r0
   b5f1c:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   b5f1e:	2600      	movs	r6, #0
   b5f20:	f7ff fad0 	bl	b54c4 <_ZN12Adafruit_GFXC1Ess>
   b5f24:	4b11      	ldr	r3, [pc, #68]	; (b5f6c <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   b5f26:	6023      	str	r3, [r4, #0]
   b5f28:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   b5f2a:	b915      	cbnz	r5, b5f32 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   b5f2c:	f002 f982 	bl	b8234 <_Z19__fetch_global_Wirev>
   b5f30:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   b5f32:	23ff      	movs	r3, #255	; 0xff
   b5f34:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b5f38:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   b5f3c:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   b5f40:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   b5f44:	4b0a      	ldr	r3, [pc, #40]	; (b5f70 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   b5f46:	63a3      	str	r3, [r4, #56]	; 0x38
   b5f48:	2301      	movs	r3, #1
   b5f4a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b5f4e:	9b05      	ldr	r3, [sp, #20]
   b5f50:	64a3      	str	r3, [r4, #72]	; 0x48
   b5f52:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b5f56:	9b06      	ldr	r3, [sp, #24]
   b5f58:	86a2      	strh	r2, [r4, #52]	; 0x34
   b5f5a:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   b5f5e:	6426      	str	r6, [r4, #64]	; 0x40
   b5f60:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   b5f64:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   b5f66:	4620      	mov	r0, r4
   b5f68:	bd70      	pop	{r4, r5, r6, pc}
   b5f6a:	bf00      	nop
   b5f6c:	000b9c64 	.word	0x000b9c64
   b5f70:	000b97b0 	.word	0x000b97b0

000b5f74 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b5f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5f76:	4604      	mov	r4, r0
  if(wire) { // I2C
   b5f78:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b5f7a:	460d      	mov	r5, r1
  if(wire) { // I2C
   b5f7c:	b190      	cbz	r0, b5fa4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b5f7e:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5f82:	f001 fc81 	bl	b7888 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b5f86:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5f88:	6803      	ldr	r3, [r0, #0]
   b5f8a:	2100      	movs	r1, #0
   b5f8c:	689b      	ldr	r3, [r3, #8]
   b5f8e:	4798      	blx	r3
    WIRE_WRITE(c);
   b5f90:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5f92:	6803      	ldr	r3, [r0, #0]
   b5f94:	4629      	mov	r1, r5
   b5f96:	689b      	ldr	r3, [r3, #8]
   b5f98:	4798      	blx	r3
    wire->endTransmission();
   b5f9a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b5f9c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b5fa0:	f001 bc79 	b.w	b7896 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b5fa4:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b5fa8:	4601      	mov	r1, r0
   b5faa:	b298      	uxth	r0, r3
   b5fac:	f002 f881 	bl	b80b2 <digitalWrite>
  if(spi) {
   b5fb0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5fb2:	b120      	cbz	r0, b5fbe <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b5fb4:	4629      	mov	r1, r5
}
   b5fb6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b5fba:	f000 bf81 	b.w	b6ec0 <_ZN8SPIClass8transferEh>
   b5fbe:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5fc0:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b5fc2:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b5fc6:	ea05 0107 	and.w	r1, r5, r7
   b5fca:	b280      	uxth	r0, r0
   b5fcc:	f002 f871 	bl	b80b2 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b5fd0:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5fd4:	2101      	movs	r1, #1
   b5fd6:	b280      	uxth	r0, r0
   b5fd8:	f002 f86b 	bl	b80b2 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b5fdc:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5fe0:	2100      	movs	r1, #0
   b5fe2:	b280      	uxth	r0, r0
   b5fe4:	f002 f865 	bl	b80b2 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5fe8:	3e01      	subs	r6, #1
   b5fea:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b5fee:	d1e8      	bne.n	b5fc2 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b5ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5ff2 <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b5ff2:	b538      	push	{r3, r4, r5, lr}
   b5ff4:	4604      	mov	r4, r0
  TRANSACTION_START
   b5ff6:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b5ff8:	460d      	mov	r5, r1
  TRANSACTION_START
   b5ffa:	b180      	cbz	r0, b601e <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>
	  setSpeed(speed);
   b5ffc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b5ffe:	f001 fc09 	bl	b7814 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b6002:	2d00      	cmp	r5, #0
   b6004:	4620      	mov	r0, r4
   b6006:	bf14      	ite	ne
   b6008:	21a7      	movne	r1, #167	; 0xa7
   b600a:	21a6      	moveq	r1, #166	; 0xa6
   b600c:	f7ff ffb2 	bl	b5f74 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b6010:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6012:	b188      	cbz	r0, b6038 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b6014:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b6016:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b601a:	f001 bbfb 	b.w	b7814 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b601e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6020:	b118      	cbz	r0, b602a <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b6022:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b6026:	f000 fedd 	bl	b6de4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b602a:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b602e:	2100      	movs	r1, #0
   b6030:	b280      	uxth	r0, r0
   b6032:	f002 f83e 	bl	b80b2 <digitalWrite>
   b6036:	e7e4      	b.n	b6002 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b6038:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b603c:	2101      	movs	r1, #1
   b603e:	b280      	uxth	r0, r0
   b6040:	f002 f837 	bl	b80b2 <digitalWrite>
   b6044:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6046:	b118      	cbz	r0, b6050 <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b6048:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b604c:	f000 beb0 	b.w	b6db0 <_ZN8SPIClass14endTransactionEv>
}
   b6050:	bd38      	pop	{r3, r4, r5, pc}

000b6052 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b6052:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6056:	4604      	mov	r4, r0
  if(wire) { // I2C
   b6058:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b605a:	460d      	mov	r5, r1
  if(wire) { // I2C
   b605c:	188f      	adds	r7, r1, r2
   b605e:	b340      	cbz	r0, b60b2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b6060:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b6064:	f001 fc10 	bl	b7888 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b6068:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b606a:	6803      	ldr	r3, [r0, #0]
   b606c:	2100      	movs	r1, #0
   b606e:	689b      	ldr	r3, [r3, #8]
   b6070:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b6072:	2601      	movs	r6, #1
    while(n--) {
   b6074:	42af      	cmp	r7, r5
        wire->endTransmission();
   b6076:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b6078:	d017      	beq.n	b60aa <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b607a:	2e1f      	cmp	r6, #31
   b607c:	d90c      	bls.n	b6098 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b607e:	f001 fc0a 	bl	b7896 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b6082:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b6086:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6088:	f001 fbfe 	bl	b7888 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b608c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b608e:	6803      	ldr	r3, [r0, #0]
   b6090:	2100      	movs	r1, #0
   b6092:	689b      	ldr	r3, [r3, #8]
   b6094:	4798      	blx	r3
        bytesOut = 1;
   b6096:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b6098:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b609a:	f815 1b01 	ldrb.w	r1, [r5], #1
   b609e:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b60a0:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b60a2:	689b      	ldr	r3, [r3, #8]
   b60a4:	4798      	blx	r3
      bytesOut++;
   b60a6:	b2f6      	uxtb	r6, r6
    while(n--) {
   b60a8:	e7e4      	b.n	b6074 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b60aa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b60ae:	f001 bbf2 	b.w	b7896 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b60b2:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b60b6:	4601      	mov	r1, r0
   b60b8:	b298      	uxth	r0, r3
   b60ba:	f001 fffa 	bl	b80b2 <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b60be:	42bd      	cmp	r5, r7
   b60c0:	d022      	beq.n	b6108 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b60c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b60c4:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b60c8:	b118      	cbz	r0, b60d2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b60ca:	4649      	mov	r1, r9
   b60cc:	f000 fef8 	bl	b6ec0 <_ZN8SPIClass8transferEh>
   b60d0:	e7f5      	b.n	b60be <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b60d2:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b60d4:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b60d8:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b60dc:	ea09 0108 	and.w	r1, r9, r8
   b60e0:	b280      	uxth	r0, r0
   b60e2:	f001 ffe6 	bl	b80b2 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b60e6:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b60ea:	2101      	movs	r1, #1
   b60ec:	b280      	uxth	r0, r0
   b60ee:	f001 ffe0 	bl	b80b2 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b60f2:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b60f6:	2100      	movs	r1, #0
   b60f8:	b280      	uxth	r0, r0
   b60fa:	f001 ffda 	bl	b80b2 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b60fe:	3e01      	subs	r6, #1
   b6100:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b6104:	d1e8      	bne.n	b60d8 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b6106:	e7da      	b.n	b60be <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b6108:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b610c <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b610c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b6110:	1dda      	adds	r2, r3, #7
   b6112:	bf48      	it	mi
   b6114:	f103 020e 	addmi.w	r2, r3, #14
   b6118:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b611c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b611e:	10d2      	asrs	r2, r2, #3
   b6120:	435a      	muls	r2, r3
   b6122:	2100      	movs	r1, #0
   b6124:	f002 bdd0 	b.w	b8cc8 <memset>

000b6128 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b6128:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b612c:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b612e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b6130:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b6134:	4604      	mov	r4, r0
   b6136:	460f      	mov	r7, r1
   b6138:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b613a:	b1c3      	cbz	r3, b616e <_ZN16Adafruit_SSD13065beginEhhbb+0x46>
  clearDisplay();
   b613c:	4620      	mov	r0, r4
   b613e:	f7ff ffe5 	bl	b610c <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b6142:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   b6146:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b614a:	2820      	cmp	r0, #32
   b614c:	dc21      	bgt.n	b6192 <_ZN16Adafruit_SSD13065beginEhhbb+0x6a>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b614e:	2320      	movs	r3, #32
   b6150:	2201      	movs	r2, #1
   b6152:	3820      	subs	r0, #32
   b6154:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b6158:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   b615c:	2373      	movs	r3, #115	; 0x73
   b615e:	3973      	subs	r1, #115	; 0x73
   b6160:	9300      	str	r3, [sp, #0]
   b6162:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b6166:	4b89      	ldr	r3, [pc, #548]	; (b638c <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b6168:	f340 024f 	sbfx	r2, r0, #1, #16
   b616c:	e021      	b.n	b61b2 <_ZN16Adafruit_SSD13065beginEhhbb+0x8a>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b616e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b6172:	1dd8      	adds	r0, r3, #7
   b6174:	bf48      	it	mi
   b6176:	f103 000e 	addmi.w	r0, r3, #14
   b617a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b617e:	10c0      	asrs	r0, r0, #3
   b6180:	4358      	muls	r0, r3
   b6182:	f000 fd73 	bl	b6c6c <malloc>
   b6186:	62e0      	str	r0, [r4, #44]	; 0x2c
   b6188:	2800      	cmp	r0, #0
   b618a:	d1d7      	bne.n	b613c <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b618c:	b004      	add	sp, #16
   b618e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   b6192:	3840      	subs	r0, #64	; 0x40
   b6194:	f3c0 32c0 	ubfx	r2, r0, #15, #1
   b6198:	fa02 f280 	sxtah	r2, r2, r0
   b619c:	2340      	movs	r3, #64	; 0x40
   b619e:	2001      	movs	r0, #1
   b61a0:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b61a4:	2352      	movs	r3, #82	; 0x52
   b61a6:	3952      	subs	r1, #82	; 0x52
   b61a8:	9300      	str	r3, [sp, #0]
   b61aa:	4b79      	ldr	r3, [pc, #484]	; (b6390 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b61ac:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b61b0:	1052      	asrs	r2, r2, #1
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b61b2:	4620      	mov	r0, r4
   b61b4:	f341 014f 	sbfx	r1, r1, #1, #16
   b61b8:	f7ff f99a 	bl	b54f0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b61bc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b61be:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b61c2:	2800      	cmp	r0, #0
   b61c4:	d078      	beq.n	b62b8 <_ZN16Adafruit_SSD13065beginEhhbb+0x190>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b61c6:	2d00      	cmp	r5, #0
   b61c8:	d174      	bne.n	b62b4 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
   b61ca:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b61ce:	2b20      	cmp	r3, #32
   b61d0:	bf0c      	ite	eq
   b61d2:	253c      	moveq	r5, #60	; 0x3c
   b61d4:	253d      	movne	r5, #61	; 0x3d
   b61d6:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b61da:	f1b8 0f00 	cmp.w	r8, #0
   b61de:	d001      	beq.n	b61e4 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b61e0:	f001 fb1c 	bl	b781c <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b61e4:	b1fe      	cbz	r6, b6226 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
   b61e6:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b61ea:	2800      	cmp	r0, #0
   b61ec:	db1b      	blt.n	b6226 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
    pinMode(     rstPin, OUTPUT);
   b61ee:	2101      	movs	r1, #1
   b61f0:	b280      	uxth	r0, r0
   b61f2:	f001 ff4d 	bl	b8090 <pinMode>
    digitalWrite(rstPin, HIGH);
   b61f6:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b61fa:	2101      	movs	r1, #1
   b61fc:	b280      	uxth	r0, r0
   b61fe:	f001 ff58 	bl	b80b2 <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b6202:	2001      	movs	r0, #1
   b6204:	f001 f8a0 	bl	b7348 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b6208:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b620c:	2100      	movs	r1, #0
   b620e:	b280      	uxth	r0, r0
   b6210:	f001 ff4f 	bl	b80b2 <digitalWrite>
    delay(10);                  // Wait 10 ms
   b6214:	200a      	movs	r0, #10
   b6216:	f001 f897 	bl	b7348 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b621a:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b621e:	2101      	movs	r1, #1
   b6220:	b280      	uxth	r0, r0
   b6222:	f001 ff46 	bl	b80b2 <digitalWrite>
  TRANSACTION_START
   b6226:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6228:	2800      	cmp	r0, #0
   b622a:	d074      	beq.n	b6316 <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b622c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b622e:	f001 faf1 	bl	b7814 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b6232:	2204      	movs	r2, #4
   b6234:	4957      	ldr	r1, [pc, #348]	; (b6394 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b6236:	4620      	mov	r0, r4
   b6238:	f7ff ff0b 	bl	b6052 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b623c:	8961      	ldrh	r1, [r4, #10]
   b623e:	3901      	subs	r1, #1
   b6240:	b2c9      	uxtb	r1, r1
   b6242:	4620      	mov	r0, r4
   b6244:	f7ff fe96 	bl	b5f74 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b6248:	4953      	ldr	r1, [pc, #332]	; (b6398 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b624a:	2204      	movs	r2, #4
   b624c:	4620      	mov	r0, r4
   b624e:	f7ff ff00 	bl	b6052 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b6252:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b6256:	2b01      	cmp	r3, #1
   b6258:	bf0c      	ite	eq
   b625a:	2110      	moveq	r1, #16
   b625c:	2114      	movne	r1, #20
   b625e:	4620      	mov	r0, r4
   b6260:	f7ff fe88 	bl	b5f74 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b6264:	2204      	movs	r2, #4
   b6266:	494d      	ldr	r1, [pc, #308]	; (b639c <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b6268:	4620      	mov	r0, r4
   b626a:	f7ff fef2 	bl	b6052 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b626e:	68a3      	ldr	r3, [r4, #8]
   b6270:	4a4b      	ldr	r2, [pc, #300]	; (b63a0 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b6272:	4293      	cmp	r3, r2
   b6274:	d15c      	bne.n	b6330 <_ZN16Adafruit_SSD13065beginEhhbb+0x208>
    ssd1306_commandList(init4a, sizeof(init4a));
   b6276:	494b      	ldr	r1, [pc, #300]	; (b63a4 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b6278:	2204      	movs	r2, #4
   b627a:	4620      	mov	r0, r4
   b627c:	f7ff fee9 	bl	b6052 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b6280:	21d9      	movs	r1, #217	; 0xd9
   b6282:	4620      	mov	r0, r4
   b6284:	f7ff fe76 	bl	b5f74 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b6288:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b628c:	2b01      	cmp	r3, #1
   b628e:	bf0c      	ite	eq
   b6290:	2122      	moveq	r1, #34	; 0x22
   b6292:	21f1      	movne	r1, #241	; 0xf1
   b6294:	4620      	mov	r0, r4
   b6296:	f7ff fe6d 	bl	b5f74 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b629a:	4620      	mov	r0, r4
   b629c:	4942      	ldr	r1, [pc, #264]	; (b63a8 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b629e:	2206      	movs	r2, #6
   b62a0:	f7ff fed7 	bl	b6052 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b62a4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b62a6:	2800      	cmp	r0, #0
   b62a8:	d063      	beq.n	b6372 <_ZN16Adafruit_SSD13065beginEhhbb+0x24a>
   b62aa:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b62ac:	f001 fab2 	bl	b7814 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b62b0:	2001      	movs	r0, #1
   b62b2:	e76b      	b.n	b618c <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b62b4:	b26d      	sxtb	r5, r5
   b62b6:	e78e      	b.n	b61d6 <_ZN16Adafruit_SSD13065beginEhhbb+0xae>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b62b8:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b62bc:	2101      	movs	r1, #1
   b62be:	b280      	uxth	r0, r0
   b62c0:	f001 fee6 	bl	b8090 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b62c4:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b62c8:	2101      	movs	r1, #1
   b62ca:	b280      	uxth	r0, r0
   b62cc:	f001 fee0 	bl	b8090 <pinMode>
    SSD1306_DESELECT
   b62d0:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b62d4:	2101      	movs	r1, #1
   b62d6:	b280      	uxth	r0, r0
   b62d8:	f001 feeb 	bl	b80b2 <digitalWrite>
    if(spi) { // Hardware SPI
   b62dc:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b62de:	b13d      	cbz	r5, b62f0 <_ZN16Adafruit_SSD13065beginEhhbb+0x1c8>
      if(periphBegin) spi->begin();
   b62e0:	f1b8 0f00 	cmp.w	r8, #0
   b62e4:	f43f af7e 	beq.w	b61e4 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b62e8:	4628      	mov	r0, r5
   b62ea:	f000 fd4d 	bl	b6d88 <_ZN8SPIClass5beginEv>
   b62ee:	e779      	b.n	b61e4 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b62f0:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b62f4:	2101      	movs	r1, #1
   b62f6:	b280      	uxth	r0, r0
   b62f8:	f001 feca 	bl	b8090 <pinMode>
      pinMode(clkPin , OUTPUT);
   b62fc:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6300:	2101      	movs	r1, #1
   b6302:	b280      	uxth	r0, r0
   b6304:	f001 fec4 	bl	b8090 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b6308:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b630c:	4629      	mov	r1, r5
   b630e:	b280      	uxth	r0, r0
   b6310:	f001 fecf 	bl	b80b2 <digitalWrite>
   b6314:	e766      	b.n	b61e4 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
  TRANSACTION_START
   b6316:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6318:	b118      	cbz	r0, b6322 <_ZN16Adafruit_SSD13065beginEhhbb+0x1fa>
   b631a:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b631e:	f000 fd61 	bl	b6de4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b6322:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6326:	2100      	movs	r1, #0
   b6328:	b280      	uxth	r0, r0
   b632a:	f001 fec2 	bl	b80b2 <digitalWrite>
   b632e:	e780      	b.n	b6232 <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b6330:	4a1e      	ldr	r2, [pc, #120]	; (b63ac <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b6332:	4293      	cmp	r3, r2
   b6334:	d10e      	bne.n	b6354 <_ZN16Adafruit_SSD13065beginEhhbb+0x22c>
    ssd1306_commandList(init4b, sizeof(init4b));
   b6336:	491e      	ldr	r1, [pc, #120]	; (b63b0 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   b6338:	2203      	movs	r2, #3
   b633a:	4620      	mov	r0, r4
   b633c:	f7ff fe89 	bl	b6052 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b6340:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b6344:	2b01      	cmp	r3, #1
   b6346:	bf0c      	ite	eq
   b6348:	219f      	moveq	r1, #159	; 0x9f
   b634a:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b634c:	4620      	mov	r0, r4
   b634e:	f7ff fe11 	bl	b5f74 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b6352:	e795      	b.n	b6280 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b6354:	4a17      	ldr	r2, [pc, #92]	; (b63b4 <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   b6356:	4293      	cmp	r3, r2
   b6358:	d192      	bne.n	b6280 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
    ssd1306_commandList(init4c, sizeof(init4c));
   b635a:	4917      	ldr	r1, [pc, #92]	; (b63b8 <_ZN16Adafruit_SSD13065beginEhhbb+0x290>)
   b635c:	2203      	movs	r2, #3
   b635e:	4620      	mov	r0, r4
   b6360:	f7ff fe77 	bl	b6052 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b6364:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b6368:	2b01      	cmp	r3, #1
   b636a:	bf0c      	ite	eq
   b636c:	2110      	moveq	r1, #16
   b636e:	21af      	movne	r1, #175	; 0xaf
   b6370:	e7ec      	b.n	b634c <_ZN16Adafruit_SSD13065beginEhhbb+0x224>
  TRANSACTION_END
   b6372:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6376:	2101      	movs	r1, #1
   b6378:	b280      	uxth	r0, r0
   b637a:	f001 fe9a 	bl	b80b2 <digitalWrite>
   b637e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6380:	2800      	cmp	r0, #0
   b6382:	d095      	beq.n	b62b0 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b6384:	f000 fd14 	bl	b6db0 <_ZN8SPIClass14endTransactionEv>
   b6388:	e792      	b.n	b62b0 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b638a:	bf00      	nop
   b638c:	000b9a7c 	.word	0x000b9a7c
   b6390:	000b97bc 	.word	0x000b97bc
   b6394:	000b9cc4 	.word	0x000b9cc4
   b6398:	000b9cc8 	.word	0x000b9cc8
   b639c:	000b9ccc 	.word	0x000b9ccc
   b63a0:	00200080 	.word	0x00200080
   b63a4:	000b9cd6 	.word	0x000b9cd6
   b63a8:	000b9cd0 	.word	0x000b9cd0
   b63ac:	00400080 	.word	0x00400080
   b63b0:	000b9cda 	.word	0x000b9cda
   b63b4:	00100060 	.word	0x00100060
   b63b8:	000b9cdd 	.word	0x000b9cdd

000b63bc <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b63bc:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b63be:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b63c0:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b63c4:	db3d      	blt.n	b6442 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b63c6:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b63ca:	4294      	cmp	r4, r2
   b63cc:	dd39      	ble.n	b6442 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   b63ce:	2900      	cmp	r1, #0
      w += x;
   b63d0:	bfbe      	ittt	lt
   b63d2:	185b      	addlt	r3, r3, r1
   b63d4:	b21b      	sxthlt	r3, r3
      x  = 0;
   b63d6:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   b63d8:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b63dc:	18ce      	adds	r6, r1, r3
   b63de:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b63e0:	bfc4      	itt	gt
   b63e2:	1a63      	subgt	r3, r4, r1
   b63e4:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   b63e6:	2b00      	cmp	r3, #0
   b63e8:	dd2b      	ble.n	b6442 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b63ea:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b63ec:	10d6      	asrs	r6, r2, #3
   b63ee:	fb14 1106 	smlabb	r1, r4, r6, r1
   b63f2:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   b63f4:	f002 0007 	and.w	r0, r2, #7
   b63f8:	2201      	movs	r2, #1
   b63fa:	4082      	lsls	r2, r0
      switch(color) {
   b63fc:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   b63fe:	b2d2      	uxtb	r2, r2
      switch(color) {
   b6400:	d016      	beq.n	b6430 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b6402:	2d02      	cmp	r5, #2
   b6404:	d00b      	beq.n	b641e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b6406:	b9e5      	cbnz	r5, b6442 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   b6408:	43d2      	mvns	r2, r2
   b640a:	b2d2      	uxtb	r2, r2
   b640c:	440b      	add	r3, r1
   b640e:	4299      	cmp	r1, r3
   b6410:	d017      	beq.n	b6442 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b6412:	f811 0b01 	ldrb.w	r0, [r1], #1
   b6416:	4010      	ands	r0, r2
   b6418:	f801 0c01 	strb.w	r0, [r1, #-1]
   b641c:	e7f7      	b.n	b640e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b641e:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   b6420:	4299      	cmp	r1, r3
   b6422:	d00e      	beq.n	b6442 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b6424:	f811 0b01 	ldrb.w	r0, [r1], #1
   b6428:	4050      	eors	r0, r2
   b642a:	f801 0c01 	strb.w	r0, [r1, #-1]
   b642e:	e7f7      	b.n	b6420 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b6430:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   b6432:	4299      	cmp	r1, r3
   b6434:	d005      	beq.n	b6442 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b6436:	f811 0b01 	ldrb.w	r0, [r1], #1
   b643a:	4310      	orrs	r0, r2
   b643c:	f801 0c01 	strb.w	r0, [r1, #-1]
   b6440:	e7f7      	b.n	b6432 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b6442:	bd70      	pop	{r4, r5, r6, pc}

000b6444 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b6444:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b6446:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b6448:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b644c:	db76      	blt.n	b653c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b644e:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b6452:	42b1      	cmp	r1, r6
   b6454:	da72      	bge.n	b653c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   b6456:	2a00      	cmp	r2, #0
      __h += __y;
   b6458:	bfbe      	ittt	lt
   b645a:	189b      	addlt	r3, r3, r2
   b645c:	b21b      	sxthlt	r3, r3
      __y = 0;
   b645e:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   b6460:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b6464:	18d7      	adds	r7, r2, r3
   b6466:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b6468:	bfc4      	itt	gt
   b646a:	1aa3      	subgt	r3, r4, r2
   b646c:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   b646e:	2b00      	cmp	r3, #0
   b6470:	dd64      	ble.n	b653c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b6472:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b6476:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b6478:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   b647c:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   b6480:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b6482:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   b6486:	d023      	beq.n	b64d0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b6488:	f1c2 0208 	rsb	r2, r2, #8
   b648c:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b648e:	492d      	ldr	r1, [pc, #180]	; (b6544 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   b6490:	4293      	cmp	r3, r2
   b6492:	bf3c      	itt	cc
   b6494:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b6498:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b649c:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   b649e:	bf3c      	itt	cc
   b64a0:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b64a4:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   b64a8:	2d01      	cmp	r5, #1
   b64aa:	d007      	beq.n	b64bc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b64ac:	2d02      	cmp	r5, #2
   b64ae:	d02e      	beq.n	b650e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b64b0:	b94d      	cbnz	r5, b64c6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   b64b2:	f817 c006 	ldrb.w	ip, [r7, r6]
   b64b6:	ea2c 0101 	bic.w	r1, ip, r1
   b64ba:	e003      	b.n	b64c4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   b64bc:	f817 c006 	ldrb.w	ip, [r7, r6]
   b64c0:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   b64c4:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   b64c6:	4293      	cmp	r3, r2
   b64c8:	d338      	bcc.n	b653c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b64ca:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b64ce:	440c      	add	r4, r1
        h -= mod;
   b64d0:	1a9a      	subs	r2, r3, r2
   b64d2:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   b64d4:	2a07      	cmp	r2, #7
   b64d6:	d90e      	bls.n	b64f6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   b64d8:	2d02      	cmp	r5, #2
   b64da:	d11d      	bne.n	b6518 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b64dc:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   b64de:	7821      	ldrb	r1, [r4, #0]
   b64e0:	43c9      	mvns	r1, r1
   b64e2:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   b64e4:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   b64e6:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   b64ea:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b64ec:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   b64ee:	440c      	add	r4, r1
            } while(h >= 8);
   b64f0:	d8f5      	bhi.n	b64de <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   b64f2:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   b64f6:	b30a      	cbz	r2, b653c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b64f8:	4b13      	ldr	r3, [pc, #76]	; (b6548 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   b64fa:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b64fc:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   b64fe:	d01a      	beq.n	b6536 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b6500:	2d02      	cmp	r5, #2
   b6502:	d01c      	beq.n	b653e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b6504:	b9d5      	cbnz	r5, b653c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   b6506:	7822      	ldrb	r2, [r4, #0]
   b6508:	ea22 0303 	bic.w	r3, r2, r3
   b650c:	e015      	b.n	b653a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   b650e:	f817 c006 	ldrb.w	ip, [r7, r6]
   b6512:	ea81 010c 	eor.w	r1, r1, ip
   b6516:	e7d5      	b.n	b64c4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b6518:	1e29      	subs	r1, r5, #0
   b651a:	bf18      	it	ne
   b651c:	2101      	movne	r1, #1
   b651e:	4249      	negs	r1, r1
   b6520:	b2c9      	uxtb	r1, r1
   b6522:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   b6524:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   b6526:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   b6528:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   b652c:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b652e:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   b6530:	4434      	add	r4, r6
            } while(h >= 8);
   b6532:	d8f7      	bhi.n	b6524 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b6534:	e7dd      	b.n	b64f2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   b6536:	7822      	ldrb	r2, [r4, #0]
   b6538:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   b653a:	7023      	strb	r3, [r4, #0]
}
   b653c:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   b653e:	7822      	ldrb	r2, [r4, #0]
   b6540:	4053      	eors	r3, r2
   b6542:	e7fa      	b.n	b653a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b6544:	000b9cb4 	.word	0x000b9cb4
   b6548:	000b9cbc 	.word	0x000b9cbc

000b654c <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b654c:	b470      	push	{r4, r5, r6}
   b654e:	4614      	mov	r4, r2
  switch(rotation) {
   b6550:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b6552:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   b6556:	2a02      	cmp	r2, #2
   b6558:	d00d      	beq.n	b6576 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b655a:	2a03      	cmp	r2, #3
   b655c:	d018      	beq.n	b6590 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b655e:	2a01      	cmp	r2, #1
   b6560:	d111      	bne.n	b6586 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b6562:	8902      	ldrh	r2, [r0, #8]
   b6564:	43e4      	mvns	r4, r4
   b6566:	4414      	add	r4, r2
   b6568:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b656a:	9603      	str	r6, [sp, #12]
   b656c:	460a      	mov	r2, r1
   b656e:	4621      	mov	r1, r4
}
   b6570:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b6572:	f7ff bf67 	b.w	b6444 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   b6576:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   b6578:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   b657a:	43e4      	mvns	r4, r4
    x -= (w-1);
   b657c:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   b657e:	4414      	add	r4, r2
    x -= (w-1);
   b6580:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   b6582:	b224      	sxth	r4, r4
    x -= (w-1);
   b6584:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   b6586:	9603      	str	r6, [sp, #12]
   b6588:	4622      	mov	r2, r4
}
   b658a:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   b658c:	f7ff bf16 	b.w	b63bc <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   b6590:	8945      	ldrh	r5, [r0, #10]
   b6592:	4419      	add	r1, r3
   b6594:	1a69      	subs	r1, r5, r1
   b6596:	b209      	sxth	r1, r1
    break;
   b6598:	e7e7      	b.n	b656a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b659a <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b659a:	b430      	push	{r4, r5}
   b659c:	4614      	mov	r4, r2
  switch(rotation) {
   b659e:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b65a0:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   b65a4:	2a02      	cmp	r2, #2
   b65a6:	d00d      	beq.n	b65c4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b65a8:	2a03      	cmp	r2, #3
   b65aa:	d018      	beq.n	b65de <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b65ac:	2a01      	cmp	r2, #1
   b65ae:	d111      	bne.n	b65d4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   b65b0:	18e2      	adds	r2, r4, r3
   b65b2:	8904      	ldrh	r4, [r0, #8]
   b65b4:	1aa4      	subs	r4, r4, r2
   b65b6:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b65b8:	9502      	str	r5, [sp, #8]
   b65ba:	460a      	mov	r2, r1
   b65bc:	4621      	mov	r1, r4
}
   b65be:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b65c0:	f7ff befc 	b.w	b63bc <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   b65c4:	8902      	ldrh	r2, [r0, #8]
   b65c6:	43c9      	mvns	r1, r1
   b65c8:	4411      	add	r1, r2
    y -= (h-1);
   b65ca:	18e2      	adds	r2, r4, r3
   b65cc:	8944      	ldrh	r4, [r0, #10]
   b65ce:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   b65d0:	b209      	sxth	r1, r1
    y -= (h-1);
   b65d2:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   b65d4:	9502      	str	r5, [sp, #8]
   b65d6:	4622      	mov	r2, r4
}
   b65d8:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   b65da:	f7ff bf33 	b.w	b6444 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b65de:	8942      	ldrh	r2, [r0, #10]
   b65e0:	43c9      	mvns	r1, r1
   b65e2:	4411      	add	r1, r2
   b65e4:	b209      	sxth	r1, r1
    break;
   b65e6:	e7e7      	b.n	b65b8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b65e8 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b65e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b65ec:	4604      	mov	r4, r0
  TRANSACTION_START
   b65ee:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b65f0:	2800      	cmp	r0, #0
   b65f2:	d042      	beq.n	b667a <_ZN16Adafruit_SSD13067displayEv+0x92>
   b65f4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b65f6:	f001 f90d 	bl	b7814 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b65fa:	4947      	ldr	r1, [pc, #284]	; (b6718 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b65fc:	2205      	movs	r2, #5
   b65fe:	4620      	mov	r0, r4
   b6600:	f7ff fd27 	bl	b6052 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b6604:	8921      	ldrh	r1, [r4, #8]
   b6606:	3901      	subs	r1, #1
   b6608:	4620      	mov	r0, r4
   b660a:	b2c9      	uxtb	r1, r1
   b660c:	f7ff fcb2 	bl	b5f74 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b6610:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b6614:	1dde      	adds	r6, r3, #7
   b6616:	bf48      	it	mi
   b6618:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   b661c:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b6620:	8923      	ldrh	r3, [r4, #8]
   b6622:	10f6      	asrs	r6, r6, #3
   b6624:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   b6628:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   b662c:	2800      	cmp	r0, #0
   b662e:	d03a      	beq.n	b66a6 <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b6630:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b6634:	f001 f928 	bl	b7888 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b6638:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b663a:	6803      	ldr	r3, [r0, #0]
   b663c:	2140      	movs	r1, #64	; 0x40
   b663e:	689b      	ldr	r3, [r3, #8]
   b6640:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b6642:	2701      	movs	r7, #1
    while(count--) {
   b6644:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b6646:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(count--) {
   b6648:	d024      	beq.n	b6694 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   b664a:	2f1f      	cmp	r7, #31
   b664c:	d90c      	bls.n	b6668 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b664e:	f001 f922 	bl	b7896 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b6652:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b6656:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6658:	f001 f916 	bl	b7888 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b665c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b665e:	6803      	ldr	r3, [r0, #0]
   b6660:	2140      	movs	r1, #64	; 0x40
   b6662:	689b      	ldr	r3, [r3, #8]
   b6664:	4798      	blx	r3
        bytesOut = 1;
   b6666:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b6668:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b666a:	f815 1b01 	ldrb.w	r1, [r5], #1
   b666e:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b6670:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b6672:	689b      	ldr	r3, [r3, #8]
   b6674:	4798      	blx	r3
      bytesOut++;
   b6676:	b2ff      	uxtb	r7, r7
    while(count--) {
   b6678:	e7e4      	b.n	b6644 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b667a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b667c:	b118      	cbz	r0, b6686 <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b667e:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b6682:	f000 fbaf 	bl	b6de4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b6686:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b668a:	2100      	movs	r1, #0
   b668c:	b280      	uxth	r0, r0
   b668e:	f001 fd10 	bl	b80b2 <digitalWrite>
   b6692:	e7b2      	b.n	b65fa <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b6694:	f001 f8ff 	bl	b7896 <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b6698:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b669a:	b378      	cbz	r0, b66fc <_ZN16Adafruit_SSD13067displayEv+0x114>
   b669c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b669e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b66a2:	f001 b8b7 	b.w	b7814 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b66a6:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b66aa:	2101      	movs	r1, #1
   b66ac:	b280      	uxth	r0, r0
   b66ae:	f001 fd00 	bl	b80b2 <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   b66b2:	42ae      	cmp	r6, r5
   b66b4:	d0f0      	beq.n	b6698 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   b66b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   b66b8:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b66bc:	b118      	cbz	r0, b66c6 <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b66be:	4649      	mov	r1, r9
   b66c0:	f000 fbfe 	bl	b6ec0 <_ZN8SPIClass8transferEh>
   b66c4:	e7f5      	b.n	b66b2 <_ZN16Adafruit_SSD13067displayEv+0xca>
   b66c6:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b66c8:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b66cc:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b66d0:	ea09 0108 	and.w	r1, r9, r8
   b66d4:	b280      	uxth	r0, r0
   b66d6:	f001 fcec 	bl	b80b2 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b66da:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b66de:	2101      	movs	r1, #1
   b66e0:	b280      	uxth	r0, r0
   b66e2:	f001 fce6 	bl	b80b2 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b66e6:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b66ea:	2100      	movs	r1, #0
   b66ec:	b280      	uxth	r0, r0
   b66ee:	f001 fce0 	bl	b80b2 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b66f2:	3f01      	subs	r7, #1
   b66f4:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b66f8:	d1e8      	bne.n	b66cc <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b66fa:	e7da      	b.n	b66b2 <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b66fc:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6700:	2101      	movs	r1, #1
   b6702:	b280      	uxth	r0, r0
   b6704:	f001 fcd5 	bl	b80b2 <digitalWrite>
   b6708:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b670a:	b118      	cbz	r0, b6714 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b670c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b6710:	f000 bb4e 	b.w	b6db0 <_ZN8SPIClass14endTransactionEv>
}
   b6714:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b6718:	000b9ce0 	.word	0x000b9ce0

000b671c <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
   b671c:	f000 be14 	b.w	b7348 <delay>

000b6720 <_Z11BlynkMillisv>:
   b6720:	f000 b880 	b.w	b6824 <HAL_Timer_Get_Milli_Seconds>

000b6724 <BlynkWidgetRead>:
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}
   b6724:	4770      	bx	lr

000b6726 <BlynkWidgetWrite>:

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
    BLYNK_LOG2(BLYNK_F("No handler for writing to pin "), request.pin);
}
   b6726:	4770      	bx	lr

000b6728 <BlynkNoOpCbk>:
{}
   b6728:	4770      	bx	lr
	...

000b672c <GetReadHandler>:
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
   b672c:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
   b672e:	bf5a      	itte	pl
   b6730:	4b02      	ldrpl	r3, [pc, #8]	; (b673c <GetReadHandler+0x10>)
   b6732:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   b6736:	2000      	movmi	r0, #0
#endif
}
   b6738:	4770      	bx	lr
   b673a:	bf00      	nop
   b673c:	000b9ce8 	.word	0x000b9ce8

000b6740 <GetWriteHandler>:

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
   b6740:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
   b6742:	bf5a      	itte	pl
   b6744:	4b02      	ldrpl	r3, [pc, #8]	; (b6750 <GetWriteHandler+0x10>)
   b6746:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   b674a:	2000      	movmi	r0, #0
#endif
}
   b674c:	4770      	bx	lr
   b674e:	bf00      	nop
   b6750:	000b9ee8 	.word	0x000b9ee8

000b6754 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b6754:	b508      	push	{r3, lr}
   b6756:	4b02      	ldr	r3, [pc, #8]	; (b6760 <netdb_freeaddrinfo+0xc>)
   b6758:	681b      	ldr	r3, [r3, #0]
   b675a:	689b      	ldr	r3, [r3, #8]
   b675c:	9301      	str	r3, [sp, #4]
   b675e:	bd08      	pop	{r3, pc}
   b6760:	00030268 	.word	0x00030268

000b6764 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b6764:	b508      	push	{r3, lr}
   b6766:	4b02      	ldr	r3, [pc, #8]	; (b6770 <netdb_getaddrinfo+0xc>)
   b6768:	681b      	ldr	r3, [r3, #0]
   b676a:	68db      	ldr	r3, [r3, #12]
   b676c:	9301      	str	r3, [sp, #4]
   b676e:	bd08      	pop	{r3, pc}
   b6770:	00030268 	.word	0x00030268

000b6774 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b6774:	b508      	push	{r3, lr}
   b6776:	4b02      	ldr	r3, [pc, #8]	; (b6780 <HAL_Validate_Pin_Function+0xc>)
   b6778:	681b      	ldr	r3, [r3, #0]
   b677a:	685b      	ldr	r3, [r3, #4]
   b677c:	9301      	str	r3, [sp, #4]
   b677e:	bd08      	pop	{r3, pc}
   b6780:	0003022c 	.word	0x0003022c

000b6784 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b6784:	b508      	push	{r3, lr}
   b6786:	4b02      	ldr	r3, [pc, #8]	; (b6790 <HAL_Pin_Mode+0xc>)
   b6788:	681b      	ldr	r3, [r3, #0]
   b678a:	689b      	ldr	r3, [r3, #8]
   b678c:	9301      	str	r3, [sp, #4]
   b678e:	bd08      	pop	{r3, pc}
   b6790:	0003022c 	.word	0x0003022c

000b6794 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b6794:	b508      	push	{r3, lr}
   b6796:	4b02      	ldr	r3, [pc, #8]	; (b67a0 <HAL_Get_Pin_Mode+0xc>)
   b6798:	681b      	ldr	r3, [r3, #0]
   b679a:	68db      	ldr	r3, [r3, #12]
   b679c:	9301      	str	r3, [sp, #4]
   b679e:	bd08      	pop	{r3, pc}
   b67a0:	0003022c 	.word	0x0003022c

000b67a4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b67a4:	b508      	push	{r3, lr}
   b67a6:	4b02      	ldr	r3, [pc, #8]	; (b67b0 <HAL_GPIO_Write+0xc>)
   b67a8:	681b      	ldr	r3, [r3, #0]
   b67aa:	691b      	ldr	r3, [r3, #16]
   b67ac:	9301      	str	r3, [sp, #4]
   b67ae:	bd08      	pop	{r3, pc}
   b67b0:	0003022c 	.word	0x0003022c

000b67b4 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b67b4:	b508      	push	{r3, lr}
   b67b6:	4b02      	ldr	r3, [pc, #8]	; (b67c0 <HAL_GPIO_Read+0xc>)
   b67b8:	681b      	ldr	r3, [r3, #0]
   b67ba:	695b      	ldr	r3, [r3, #20]
   b67bc:	9301      	str	r3, [sp, #4]
   b67be:	bd08      	pop	{r3, pc}
   b67c0:	0003022c 	.word	0x0003022c

000b67c4 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   b67c4:	b508      	push	{r3, lr}
   b67c6:	4b02      	ldr	r3, [pc, #8]	; (b67d0 <HAL_DAC_Write+0xc>)
   b67c8:	681b      	ldr	r3, [r3, #0]
   b67ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b67cc:	9301      	str	r3, [sp, #4]
   b67ce:	bd08      	pop	{r3, pc}
   b67d0:	0003022c 	.word	0x0003022c

000b67d4 <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b67d4:	b508      	push	{r3, lr}
   b67d6:	4b02      	ldr	r3, [pc, #8]	; (b67e0 <hal_adc_read+0xc>)
   b67d8:	681b      	ldr	r3, [r3, #0]
   b67da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b67dc:	9301      	str	r3, [sp, #4]
   b67de:	bd08      	pop	{r3, pc}
   b67e0:	0003022c 	.word	0x0003022c

000b67e4 <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
   b67e4:	b508      	push	{r3, lr}
   b67e6:	4b02      	ldr	r3, [pc, #8]	; (b67f0 <hal_pwm_write_ext+0xc>)
   b67e8:	681b      	ldr	r3, [r3, #0]
   b67ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b67ec:	9301      	str	r3, [sp, #4]
   b67ee:	bd08      	pop	{r3, pc}
   b67f0:	0003022c 	.word	0x0003022c

000b67f4 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b67f4:	b508      	push	{r3, lr}
   b67f6:	4b02      	ldr	r3, [pc, #8]	; (b6800 <if_index_to_name+0xc>)
   b67f8:	681b      	ldr	r3, [r3, #0]
   b67fa:	695b      	ldr	r3, [r3, #20]
   b67fc:	9301      	str	r3, [sp, #4]
   b67fe:	bd08      	pop	{r3, pc}
   b6800:	0003026c 	.word	0x0003026c

000b6804 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b6804:	b508      	push	{r3, lr}
   b6806:	4b02      	ldr	r3, [pc, #8]	; (b6810 <HAL_RNG_GetRandomNumber+0xc>)
   b6808:	681b      	ldr	r3, [r3, #0]
   b680a:	685b      	ldr	r3, [r3, #4]
   b680c:	9301      	str	r3, [sp, #4]
   b680e:	bd08      	pop	{r3, pc}
   b6810:	00030218 	.word	0x00030218

000b6814 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b6814:	b508      	push	{r3, lr}
   b6816:	4b02      	ldr	r3, [pc, #8]	; (b6820 <HAL_Delay_Microseconds+0xc>)
   b6818:	681b      	ldr	r3, [r3, #0]
   b681a:	68db      	ldr	r3, [r3, #12]
   b681c:	9301      	str	r3, [sp, #4]
   b681e:	bd08      	pop	{r3, pc}
   b6820:	00030218 	.word	0x00030218

000b6824 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b6824:	b508      	push	{r3, lr}
   b6826:	4b02      	ldr	r3, [pc, #8]	; (b6830 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b6828:	681b      	ldr	r3, [r3, #0]
   b682a:	695b      	ldr	r3, [r3, #20]
   b682c:	9301      	str	r3, [sp, #4]
   b682e:	bd08      	pop	{r3, pc}
   b6830:	00030218 	.word	0x00030218

000b6834 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b6834:	b508      	push	{r3, lr}
   b6836:	4b02      	ldr	r3, [pc, #8]	; (b6840 <os_mutex_create+0xc>)
   b6838:	681b      	ldr	r3, [r3, #0]
   b683a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b683c:	9301      	str	r3, [sp, #4]
   b683e:	bd08      	pop	{r3, pc}
   b6840:	00030248 	.word	0x00030248

000b6844 <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   b6844:	b508      	push	{r3, lr}
   b6846:	4b02      	ldr	r3, [pc, #8]	; (b6850 <os_mutex_destroy+0xc>)
   b6848:	681b      	ldr	r3, [r3, #0]
   b684a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b684c:	9301      	str	r3, [sp, #4]
   b684e:	bd08      	pop	{r3, pc}
   b6850:	00030248 	.word	0x00030248

000b6854 <os_mutex_recursive_create>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b6854:	b508      	push	{r3, lr}
   b6856:	4b02      	ldr	r3, [pc, #8]	; (b6860 <os_mutex_recursive_create+0xc>)
   b6858:	681b      	ldr	r3, [r3, #0]
   b685a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b685c:	9301      	str	r3, [sp, #4]
   b685e:	bd08      	pop	{r3, pc}
   b6860:	00030248 	.word	0x00030248

000b6864 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b6864:	b508      	push	{r3, lr}
   b6866:	4b02      	ldr	r3, [pc, #8]	; (b6870 <inet_inet_ntop+0xc>)
   b6868:	681b      	ldr	r3, [r3, #0]
   b686a:	695b      	ldr	r3, [r3, #20]
   b686c:	9301      	str	r3, [sp, #4]
   b686e:	bd08      	pop	{r3, pc}
   b6870:	00030264 	.word	0x00030264

000b6874 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b6874:	b508      	push	{r3, lr}
   b6876:	4b02      	ldr	r3, [pc, #8]	; (b6880 <inet_htonl+0xc>)
   b6878:	681b      	ldr	r3, [r3, #0]
   b687a:	6a1b      	ldr	r3, [r3, #32]
   b687c:	9301      	str	r3, [sp, #4]
   b687e:	bd08      	pop	{r3, pc}
   b6880:	00030264 	.word	0x00030264

000b6884 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b6884:	b508      	push	{r3, lr}
   b6886:	4b02      	ldr	r3, [pc, #8]	; (b6890 <inet_htons+0xc>)
   b6888:	681b      	ldr	r3, [r3, #0]
   b688a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b688c:	9301      	str	r3, [sp, #4]
   b688e:	bd08      	pop	{r3, pc}
   b6890:	00030264 	.word	0x00030264

000b6894 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b6894:	b508      	push	{r3, lr}
   b6896:	4b02      	ldr	r3, [pc, #8]	; (b68a0 <hal_usart_write+0xc>)
   b6898:	681b      	ldr	r3, [r3, #0]
   b689a:	68db      	ldr	r3, [r3, #12]
   b689c:	9301      	str	r3, [sp, #4]
   b689e:	bd08      	pop	{r3, pc}
   b68a0:	0003023c 	.word	0x0003023c

000b68a4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b68a4:	b508      	push	{r3, lr}
   b68a6:	4b02      	ldr	r3, [pc, #8]	; (b68b0 <hal_usart_available+0xc>)
   b68a8:	681b      	ldr	r3, [r3, #0]
   b68aa:	691b      	ldr	r3, [r3, #16]
   b68ac:	9301      	str	r3, [sp, #4]
   b68ae:	bd08      	pop	{r3, pc}
   b68b0:	0003023c 	.word	0x0003023c

000b68b4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b68b4:	b508      	push	{r3, lr}
   b68b6:	4b02      	ldr	r3, [pc, #8]	; (b68c0 <hal_usart_read+0xc>)
   b68b8:	681b      	ldr	r3, [r3, #0]
   b68ba:	695b      	ldr	r3, [r3, #20]
   b68bc:	9301      	str	r3, [sp, #4]
   b68be:	bd08      	pop	{r3, pc}
   b68c0:	0003023c 	.word	0x0003023c

000b68c4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b68c4:	b508      	push	{r3, lr}
   b68c6:	4b02      	ldr	r3, [pc, #8]	; (b68d0 <hal_usart_peek+0xc>)
   b68c8:	681b      	ldr	r3, [r3, #0]
   b68ca:	699b      	ldr	r3, [r3, #24]
   b68cc:	9301      	str	r3, [sp, #4]
   b68ce:	bd08      	pop	{r3, pc}
   b68d0:	0003023c 	.word	0x0003023c

000b68d4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b68d4:	b508      	push	{r3, lr}
   b68d6:	4b02      	ldr	r3, [pc, #8]	; (b68e0 <hal_usart_flush+0xc>)
   b68d8:	681b      	ldr	r3, [r3, #0]
   b68da:	69db      	ldr	r3, [r3, #28]
   b68dc:	9301      	str	r3, [sp, #4]
   b68de:	bd08      	pop	{r3, pc}
   b68e0:	0003023c 	.word	0x0003023c

000b68e4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b68e4:	b508      	push	{r3, lr}
   b68e6:	4b02      	ldr	r3, [pc, #8]	; (b68f0 <hal_usart_is_enabled+0xc>)
   b68e8:	681b      	ldr	r3, [r3, #0]
   b68ea:	6a1b      	ldr	r3, [r3, #32]
   b68ec:	9301      	str	r3, [sp, #4]
   b68ee:	bd08      	pop	{r3, pc}
   b68f0:	0003023c 	.word	0x0003023c

000b68f4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b68f4:	b508      	push	{r3, lr}
   b68f6:	4b02      	ldr	r3, [pc, #8]	; (b6900 <hal_usart_available_data_for_write+0xc>)
   b68f8:	681b      	ldr	r3, [r3, #0]
   b68fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b68fc:	9301      	str	r3, [sp, #4]
   b68fe:	bd08      	pop	{r3, pc}
   b6900:	0003023c 	.word	0x0003023c

000b6904 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b6904:	b508      	push	{r3, lr}
   b6906:	4b02      	ldr	r3, [pc, #8]	; (b6910 <hal_usart_init_ex+0xc>)
   b6908:	681b      	ldr	r3, [r3, #0]
   b690a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b690c:	9301      	str	r3, [sp, #4]
   b690e:	bd08      	pop	{r3, pc}
   b6910:	0003023c 	.word	0x0003023c

000b6914 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b6914:	b508      	push	{r3, lr}
   b6916:	4b02      	ldr	r3, [pc, #8]	; (b6920 <hal_i2c_set_speed+0xc>)
   b6918:	681b      	ldr	r3, [r3, #0]
   b691a:	681b      	ldr	r3, [r3, #0]
   b691c:	9301      	str	r3, [sp, #4]
   b691e:	bd08      	pop	{r3, pc}
   b6920:	00030228 	.word	0x00030228

000b6924 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b6924:	b508      	push	{r3, lr}
   b6926:	4b02      	ldr	r3, [pc, #8]	; (b6930 <hal_i2c_begin+0xc>)
   b6928:	681b      	ldr	r3, [r3, #0]
   b692a:	68db      	ldr	r3, [r3, #12]
   b692c:	9301      	str	r3, [sp, #4]
   b692e:	bd08      	pop	{r3, pc}
   b6930:	00030228 	.word	0x00030228

000b6934 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b6934:	b508      	push	{r3, lr}
   b6936:	4b02      	ldr	r3, [pc, #8]	; (b6940 <hal_i2c_begin_transmission+0xc>)
   b6938:	681b      	ldr	r3, [r3, #0]
   b693a:	699b      	ldr	r3, [r3, #24]
   b693c:	9301      	str	r3, [sp, #4]
   b693e:	bd08      	pop	{r3, pc}
   b6940:	00030228 	.word	0x00030228

000b6944 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b6944:	b508      	push	{r3, lr}
   b6946:	4b02      	ldr	r3, [pc, #8]	; (b6950 <hal_i2c_end_transmission+0xc>)
   b6948:	681b      	ldr	r3, [r3, #0]
   b694a:	69db      	ldr	r3, [r3, #28]
   b694c:	9301      	str	r3, [sp, #4]
   b694e:	bd08      	pop	{r3, pc}
   b6950:	00030228 	.word	0x00030228

000b6954 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b6954:	b508      	push	{r3, lr}
   b6956:	4b02      	ldr	r3, [pc, #8]	; (b6960 <hal_i2c_write+0xc>)
   b6958:	681b      	ldr	r3, [r3, #0]
   b695a:	6a1b      	ldr	r3, [r3, #32]
   b695c:	9301      	str	r3, [sp, #4]
   b695e:	bd08      	pop	{r3, pc}
   b6960:	00030228 	.word	0x00030228

000b6964 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b6964:	b508      	push	{r3, lr}
   b6966:	4b02      	ldr	r3, [pc, #8]	; (b6970 <hal_i2c_available+0xc>)
   b6968:	681b      	ldr	r3, [r3, #0]
   b696a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b696c:	9301      	str	r3, [sp, #4]
   b696e:	bd08      	pop	{r3, pc}
   b6970:	00030228 	.word	0x00030228

000b6974 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b6974:	b508      	push	{r3, lr}
   b6976:	4b02      	ldr	r3, [pc, #8]	; (b6980 <hal_i2c_read+0xc>)
   b6978:	681b      	ldr	r3, [r3, #0]
   b697a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b697c:	9301      	str	r3, [sp, #4]
   b697e:	bd08      	pop	{r3, pc}
   b6980:	00030228 	.word	0x00030228

000b6984 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b6984:	b508      	push	{r3, lr}
   b6986:	4b02      	ldr	r3, [pc, #8]	; (b6990 <hal_i2c_peek+0xc>)
   b6988:	681b      	ldr	r3, [r3, #0]
   b698a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b698c:	9301      	str	r3, [sp, #4]
   b698e:	bd08      	pop	{r3, pc}
   b6990:	00030228 	.word	0x00030228

000b6994 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b6994:	b508      	push	{r3, lr}
   b6996:	4b02      	ldr	r3, [pc, #8]	; (b69a0 <hal_i2c_flush+0xc>)
   b6998:	681b      	ldr	r3, [r3, #0]
   b699a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b699c:	9301      	str	r3, [sp, #4]
   b699e:	bd08      	pop	{r3, pc}
   b69a0:	00030228 	.word	0x00030228

000b69a4 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b69a4:	b508      	push	{r3, lr}
   b69a6:	4b02      	ldr	r3, [pc, #8]	; (b69b0 <hal_i2c_is_enabled+0xc>)
   b69a8:	681b      	ldr	r3, [r3, #0]
   b69aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b69ac:	9301      	str	r3, [sp, #4]
   b69ae:	bd08      	pop	{r3, pc}
   b69b0:	00030228 	.word	0x00030228

000b69b4 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b69b4:	b508      	push	{r3, lr}
   b69b6:	4b02      	ldr	r3, [pc, #8]	; (b69c0 <hal_i2c_init+0xc>)
   b69b8:	681b      	ldr	r3, [r3, #0]
   b69ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b69bc:	9301      	str	r3, [sp, #4]
   b69be:	bd08      	pop	{r3, pc}
   b69c0:	00030228 	.word	0x00030228

000b69c4 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b69c4:	b508      	push	{r3, lr}
   b69c6:	4b02      	ldr	r3, [pc, #8]	; (b69d0 <hal_i2c_request_ex+0xc>)
   b69c8:	681b      	ldr	r3, [r3, #0]
   b69ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b69cc:	9301      	str	r3, [sp, #4]
   b69ce:	bd08      	pop	{r3, pc}
   b69d0:	00030228 	.word	0x00030228

000b69d4 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b69d4:	b508      	push	{r3, lr}
   b69d6:	4b02      	ldr	r3, [pc, #8]	; (b69e0 <sock_setsockopt+0xc>)
   b69d8:	681b      	ldr	r3, [r3, #0]
   b69da:	699b      	ldr	r3, [r3, #24]
   b69dc:	9301      	str	r3, [sp, #4]
   b69de:	bd08      	pop	{r3, pc}
   b69e0:	00030238 	.word	0x00030238

000b69e4 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b69e4:	b508      	push	{r3, lr}
   b69e6:	4b02      	ldr	r3, [pc, #8]	; (b69f0 <sock_close+0xc>)
   b69e8:	681b      	ldr	r3, [r3, #0]
   b69ea:	69db      	ldr	r3, [r3, #28]
   b69ec:	9301      	str	r3, [sp, #4]
   b69ee:	bd08      	pop	{r3, pc}
   b69f0:	00030238 	.word	0x00030238

000b69f4 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b69f4:	b508      	push	{r3, lr}
   b69f6:	4b02      	ldr	r3, [pc, #8]	; (b6a00 <sock_connect+0xc>)
   b69f8:	681b      	ldr	r3, [r3, #0]
   b69fa:	6a1b      	ldr	r3, [r3, #32]
   b69fc:	9301      	str	r3, [sp, #4]
   b69fe:	bd08      	pop	{r3, pc}
   b6a00:	00030238 	.word	0x00030238

000b6a04 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b6a04:	b508      	push	{r3, lr}
   b6a06:	4b02      	ldr	r3, [pc, #8]	; (b6a10 <sock_recv+0xc>)
   b6a08:	681b      	ldr	r3, [r3, #0]
   b6a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6a0c:	9301      	str	r3, [sp, #4]
   b6a0e:	bd08      	pop	{r3, pc}
   b6a10:	00030238 	.word	0x00030238

000b6a14 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b6a14:	b508      	push	{r3, lr}
   b6a16:	4b02      	ldr	r3, [pc, #8]	; (b6a20 <sock_send+0xc>)
   b6a18:	681b      	ldr	r3, [r3, #0]
   b6a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6a1c:	9301      	str	r3, [sp, #4]
   b6a1e:	bd08      	pop	{r3, pc}
   b6a20:	00030238 	.word	0x00030238

000b6a24 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b6a24:	b508      	push	{r3, lr}
   b6a26:	4b02      	ldr	r3, [pc, #8]	; (b6a30 <sock_socket+0xc>)
   b6a28:	681b      	ldr	r3, [r3, #0]
   b6a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6a2c:	9301      	str	r3, [sp, #4]
   b6a2e:	bd08      	pop	{r3, pc}
   b6a30:	00030238 	.word	0x00030238

000b6a34 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b6a34:	b508      	push	{r3, lr}
   b6a36:	4b02      	ldr	r3, [pc, #8]	; (b6a40 <hal_spi_begin+0xc>)
   b6a38:	681b      	ldr	r3, [r3, #0]
   b6a3a:	681b      	ldr	r3, [r3, #0]
   b6a3c:	9301      	str	r3, [sp, #4]
   b6a3e:	bd08      	pop	{r3, pc}
   b6a40:	00030230 	.word	0x00030230

000b6a44 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b6a44:	b508      	push	{r3, lr}
   b6a46:	4b02      	ldr	r3, [pc, #8]	; (b6a50 <hal_spi_transfer+0xc>)
   b6a48:	681b      	ldr	r3, [r3, #0]
   b6a4a:	695b      	ldr	r3, [r3, #20]
   b6a4c:	9301      	str	r3, [sp, #4]
   b6a4e:	bd08      	pop	{r3, pc}
   b6a50:	00030230 	.word	0x00030230

000b6a54 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b6a54:	b508      	push	{r3, lr}
   b6a56:	4b02      	ldr	r3, [pc, #8]	; (b6a60 <hal_spi_init+0xc>)
   b6a58:	681b      	ldr	r3, [r3, #0]
   b6a5a:	69db      	ldr	r3, [r3, #28]
   b6a5c:	9301      	str	r3, [sp, #4]
   b6a5e:	bd08      	pop	{r3, pc}
   b6a60:	00030230 	.word	0x00030230

000b6a64 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b6a64:	b508      	push	{r3, lr}
   b6a66:	4b02      	ldr	r3, [pc, #8]	; (b6a70 <hal_spi_is_enabled+0xc>)
   b6a68:	681b      	ldr	r3, [r3, #0]
   b6a6a:	6a1b      	ldr	r3, [r3, #32]
   b6a6c:	9301      	str	r3, [sp, #4]
   b6a6e:	bd08      	pop	{r3, pc}
   b6a70:	00030230 	.word	0x00030230

000b6a74 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b6a74:	b508      	push	{r3, lr}
   b6a76:	4b02      	ldr	r3, [pc, #8]	; (b6a80 <hal_spi_info+0xc>)
   b6a78:	681b      	ldr	r3, [r3, #0]
   b6a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6a7c:	9301      	str	r3, [sp, #4]
   b6a7e:	bd08      	pop	{r3, pc}
   b6a80:	00030230 	.word	0x00030230

000b6a84 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b6a84:	b508      	push	{r3, lr}
   b6a86:	4b02      	ldr	r3, [pc, #8]	; (b6a90 <hal_spi_set_settings+0xc>)
   b6a88:	681b      	ldr	r3, [r3, #0]
   b6a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6a8c:	9301      	str	r3, [sp, #4]
   b6a8e:	bd08      	pop	{r3, pc}
   b6a90:	00030230 	.word	0x00030230

000b6a94 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b6a94:	b508      	push	{r3, lr}
   b6a96:	4b02      	ldr	r3, [pc, #8]	; (b6aa0 <hal_spi_acquire+0xc>)
   b6a98:	681b      	ldr	r3, [r3, #0]
   b6a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6a9c:	9301      	str	r3, [sp, #4]
   b6a9e:	bd08      	pop	{r3, pc}
   b6aa0:	00030230 	.word	0x00030230

000b6aa4 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b6aa4:	b508      	push	{r3, lr}
   b6aa6:	4b02      	ldr	r3, [pc, #8]	; (b6ab0 <hal_spi_release+0xc>)
   b6aa8:	681b      	ldr	r3, [r3, #0]
   b6aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6aac:	9301      	str	r3, [sp, #4]
   b6aae:	bd08      	pop	{r3, pc}
   b6ab0:	00030230 	.word	0x00030230

000b6ab4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6ab4:	b508      	push	{r3, lr}
   b6ab6:	4b02      	ldr	r3, [pc, #8]	; (b6ac0 <HAL_USB_USART_Init+0xc>)
   b6ab8:	681b      	ldr	r3, [r3, #0]
   b6aba:	681b      	ldr	r3, [r3, #0]
   b6abc:	9301      	str	r3, [sp, #4]
   b6abe:	bd08      	pop	{r3, pc}
   b6ac0:	0003024c 	.word	0x0003024c

000b6ac4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6ac4:	b508      	push	{r3, lr}
   b6ac6:	4b02      	ldr	r3, [pc, #8]	; (b6ad0 <HAL_USB_USART_Available_Data+0xc>)
   b6ac8:	681b      	ldr	r3, [r3, #0]
   b6aca:	691b      	ldr	r3, [r3, #16]
   b6acc:	9301      	str	r3, [sp, #4]
   b6ace:	bd08      	pop	{r3, pc}
   b6ad0:	0003024c 	.word	0x0003024c

000b6ad4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6ad4:	b508      	push	{r3, lr}
   b6ad6:	4b02      	ldr	r3, [pc, #8]	; (b6ae0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b6ad8:	681b      	ldr	r3, [r3, #0]
   b6ada:	695b      	ldr	r3, [r3, #20]
   b6adc:	9301      	str	r3, [sp, #4]
   b6ade:	bd08      	pop	{r3, pc}
   b6ae0:	0003024c 	.word	0x0003024c

000b6ae4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6ae4:	b508      	push	{r3, lr}
   b6ae6:	4b02      	ldr	r3, [pc, #8]	; (b6af0 <HAL_USB_USART_Receive_Data+0xc>)
   b6ae8:	681b      	ldr	r3, [r3, #0]
   b6aea:	699b      	ldr	r3, [r3, #24]
   b6aec:	9301      	str	r3, [sp, #4]
   b6aee:	bd08      	pop	{r3, pc}
   b6af0:	0003024c 	.word	0x0003024c

000b6af4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6af4:	b508      	push	{r3, lr}
   b6af6:	4b02      	ldr	r3, [pc, #8]	; (b6b00 <HAL_USB_USART_Send_Data+0xc>)
   b6af8:	681b      	ldr	r3, [r3, #0]
   b6afa:	69db      	ldr	r3, [r3, #28]
   b6afc:	9301      	str	r3, [sp, #4]
   b6afe:	bd08      	pop	{r3, pc}
   b6b00:	0003024c 	.word	0x0003024c

000b6b04 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6b04:	b508      	push	{r3, lr}
   b6b06:	4b02      	ldr	r3, [pc, #8]	; (b6b10 <HAL_USB_USART_Flush_Data+0xc>)
   b6b08:	681b      	ldr	r3, [r3, #0]
   b6b0a:	6a1b      	ldr	r3, [r3, #32]
   b6b0c:	9301      	str	r3, [sp, #4]
   b6b0e:	bd08      	pop	{r3, pc}
   b6b10:	0003024c 	.word	0x0003024c

000b6b14 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b6b14:	b508      	push	{r3, lr}
   b6b16:	4b02      	ldr	r3, [pc, #8]	; (b6b20 <panic_+0xc>)
   b6b18:	681b      	ldr	r3, [r3, #0]
   b6b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6b1c:	9301      	str	r3, [sp, #4]
   b6b1e:	bd08      	pop	{r3, pc}
   b6b20:	00030260 	.word	0x00030260

000b6b24 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b6b24:	b508      	push	{r3, lr}
   b6b26:	4b02      	ldr	r3, [pc, #8]	; (b6b30 <log_message+0xc>)
   b6b28:	681b      	ldr	r3, [r3, #0]
   b6b2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6b2c:	9301      	str	r3, [sp, #4]
   b6b2e:	bd08      	pop	{r3, pc}
   b6b30:	00030260 	.word	0x00030260

000b6b34 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b6b34:	b508      	push	{r3, lr}
   b6b36:	4b02      	ldr	r3, [pc, #8]	; (b6b40 <set_system_mode+0xc>)
   b6b38:	681b      	ldr	r3, [r3, #0]
   b6b3a:	685b      	ldr	r3, [r3, #4]
   b6b3c:	9301      	str	r3, [sp, #4]
   b6b3e:	bd08      	pop	{r3, pc}
   b6b40:	00030220 	.word	0x00030220

000b6b44 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b6b44:	b508      	push	{r3, lr}
   b6b46:	4b02      	ldr	r3, [pc, #8]	; (b6b50 <system_delay_ms+0xc>)
   b6b48:	681b      	ldr	r3, [r3, #0]
   b6b4a:	695b      	ldr	r3, [r3, #20]
   b6b4c:	9301      	str	r3, [sp, #4]
   b6b4e:	bd08      	pop	{r3, pc}
   b6b50:	00030220 	.word	0x00030220

000b6b54 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b6b54:	b508      	push	{r3, lr}
   b6b56:	4b02      	ldr	r3, [pc, #8]	; (b6b60 <system_thread_set_state+0xc>)
   b6b58:	681b      	ldr	r3, [r3, #0]
   b6b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6b5c:	9301      	str	r3, [sp, #4]
   b6b5e:	bd08      	pop	{r3, pc}
   b6b60:	00030220 	.word	0x00030220

000b6b64 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b6b64:	b508      	push	{r3, lr}
   b6b66:	4b03      	ldr	r3, [pc, #12]	; (b6b74 <system_ctrl_set_app_request_handler+0x10>)
   b6b68:	681b      	ldr	r3, [r3, #0]
   b6b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b6b6e:	9301      	str	r3, [sp, #4]
   b6b70:	bd08      	pop	{r3, pc}
   b6b72:	0000      	.short	0x0000
   b6b74:	00030220 	.word	0x00030220

000b6b78 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b6b78:	b508      	push	{r3, lr}
   b6b7a:	4b03      	ldr	r3, [pc, #12]	; (b6b88 <system_ctrl_set_result+0x10>)
   b6b7c:	681b      	ldr	r3, [r3, #0]
   b6b7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b6b82:	9301      	str	r3, [sp, #4]
   b6b84:	bd08      	pop	{r3, pc}
   b6b86:	0000      	.short	0x0000
   b6b88:	00030220 	.word	0x00030220

000b6b8c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b6b8c:	b508      	push	{r3, lr}
   b6b8e:	4b02      	ldr	r3, [pc, #8]	; (b6b98 <network_connect+0xc>)
   b6b90:	681b      	ldr	r3, [r3, #0]
   b6b92:	685b      	ldr	r3, [r3, #4]
   b6b94:	9301      	str	r3, [sp, #4]
   b6b96:	bd08      	pop	{r3, pc}
   b6b98:	00030240 	.word	0x00030240

000b6b9c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b6b9c:	b508      	push	{r3, lr}
   b6b9e:	4b02      	ldr	r3, [pc, #8]	; (b6ba8 <network_connecting+0xc>)
   b6ba0:	681b      	ldr	r3, [r3, #0]
   b6ba2:	689b      	ldr	r3, [r3, #8]
   b6ba4:	9301      	str	r3, [sp, #4]
   b6ba6:	bd08      	pop	{r3, pc}
   b6ba8:	00030240 	.word	0x00030240

000b6bac <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b6bac:	b508      	push	{r3, lr}
   b6bae:	4b02      	ldr	r3, [pc, #8]	; (b6bb8 <network_disconnect+0xc>)
   b6bb0:	681b      	ldr	r3, [r3, #0]
   b6bb2:	68db      	ldr	r3, [r3, #12]
   b6bb4:	9301      	str	r3, [sp, #4]
   b6bb6:	bd08      	pop	{r3, pc}
   b6bb8:	00030240 	.word	0x00030240

000b6bbc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b6bbc:	b508      	push	{r3, lr}
   b6bbe:	4b02      	ldr	r3, [pc, #8]	; (b6bc8 <network_ready+0xc>)
   b6bc0:	681b      	ldr	r3, [r3, #0]
   b6bc2:	691b      	ldr	r3, [r3, #16]
   b6bc4:	9301      	str	r3, [sp, #4]
   b6bc6:	bd08      	pop	{r3, pc}
   b6bc8:	00030240 	.word	0x00030240

000b6bcc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b6bcc:	b508      	push	{r3, lr}
   b6bce:	4b02      	ldr	r3, [pc, #8]	; (b6bd8 <network_on+0xc>)
   b6bd0:	681b      	ldr	r3, [r3, #0]
   b6bd2:	695b      	ldr	r3, [r3, #20]
   b6bd4:	9301      	str	r3, [sp, #4]
   b6bd6:	bd08      	pop	{r3, pc}
   b6bd8:	00030240 	.word	0x00030240

000b6bdc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b6bdc:	b508      	push	{r3, lr}
   b6bde:	4b02      	ldr	r3, [pc, #8]	; (b6be8 <network_off+0xc>)
   b6be0:	681b      	ldr	r3, [r3, #0]
   b6be2:	699b      	ldr	r3, [r3, #24]
   b6be4:	9301      	str	r3, [sp, #4]
   b6be6:	bd08      	pop	{r3, pc}
   b6be8:	00030240 	.word	0x00030240

000b6bec <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b6bec:	b508      	push	{r3, lr}
   b6bee:	4b02      	ldr	r3, [pc, #8]	; (b6bf8 <network_listen+0xc>)
   b6bf0:	681b      	ldr	r3, [r3, #0]
   b6bf2:	69db      	ldr	r3, [r3, #28]
   b6bf4:	9301      	str	r3, [sp, #4]
   b6bf6:	bd08      	pop	{r3, pc}
   b6bf8:	00030240 	.word	0x00030240

000b6bfc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b6bfc:	b508      	push	{r3, lr}
   b6bfe:	4b02      	ldr	r3, [pc, #8]	; (b6c08 <network_listening+0xc>)
   b6c00:	681b      	ldr	r3, [r3, #0]
   b6c02:	6a1b      	ldr	r3, [r3, #32]
   b6c04:	9301      	str	r3, [sp, #4]
   b6c06:	bd08      	pop	{r3, pc}
   b6c08:	00030240 	.word	0x00030240

000b6c0c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b6c0c:	b508      	push	{r3, lr}
   b6c0e:	4b02      	ldr	r3, [pc, #8]	; (b6c18 <network_set_listen_timeout+0xc>)
   b6c10:	681b      	ldr	r3, [r3, #0]
   b6c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6c14:	9301      	str	r3, [sp, #4]
   b6c16:	bd08      	pop	{r3, pc}
   b6c18:	00030240 	.word	0x00030240

000b6c1c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b6c1c:	b508      	push	{r3, lr}
   b6c1e:	4b02      	ldr	r3, [pc, #8]	; (b6c28 <network_get_listen_timeout+0xc>)
   b6c20:	681b      	ldr	r3, [r3, #0]
   b6c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6c24:	9301      	str	r3, [sp, #4]
   b6c26:	bd08      	pop	{r3, pc}
   b6c28:	00030240 	.word	0x00030240

000b6c2c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b6c2c:	b508      	push	{r3, lr}
   b6c2e:	4b02      	ldr	r3, [pc, #8]	; (b6c38 <network_is_on+0xc>)
   b6c30:	681b      	ldr	r3, [r3, #0]
   b6c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6c34:	9301      	str	r3, [sp, #4]
   b6c36:	bd08      	pop	{r3, pc}
   b6c38:	00030240 	.word	0x00030240

000b6c3c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b6c3c:	b508      	push	{r3, lr}
   b6c3e:	4b02      	ldr	r3, [pc, #8]	; (b6c48 <network_is_off+0xc>)
   b6c40:	681b      	ldr	r3, [r3, #0]
   b6c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6c44:	9301      	str	r3, [sp, #4]
   b6c46:	bd08      	pop	{r3, pc}
   b6c48:	00030240 	.word	0x00030240

000b6c4c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b6c4c:	b508      	push	{r3, lr}
   b6c4e:	4b02      	ldr	r3, [pc, #8]	; (b6c58 <spark_process+0xc>)
   b6c50:	681b      	ldr	r3, [r3, #0]
   b6c52:	689b      	ldr	r3, [r3, #8]
   b6c54:	9301      	str	r3, [sp, #4]
   b6c56:	bd08      	pop	{r3, pc}
   b6c58:	00030244 	.word	0x00030244

000b6c5c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b6c5c:	b508      	push	{r3, lr}
   b6c5e:	4b02      	ldr	r3, [pc, #8]	; (b6c68 <spark_set_random_seed_from_cloud_handler+0xc>)
   b6c60:	681b      	ldr	r3, [r3, #0]
   b6c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6c64:	9301      	str	r3, [sp, #4]
   b6c66:	bd08      	pop	{r3, pc}
   b6c68:	00030244 	.word	0x00030244

000b6c6c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b6c6c:	b508      	push	{r3, lr}
   b6c6e:	4b02      	ldr	r3, [pc, #8]	; (b6c78 <malloc+0xc>)
   b6c70:	681b      	ldr	r3, [r3, #0]
   b6c72:	681b      	ldr	r3, [r3, #0]
   b6c74:	9301      	str	r3, [sp, #4]
   b6c76:	bd08      	pop	{r3, pc}
   b6c78:	0003021c 	.word	0x0003021c

000b6c7c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b6c7c:	b508      	push	{r3, lr}
   b6c7e:	4b02      	ldr	r3, [pc, #8]	; (b6c88 <free+0xc>)
   b6c80:	681b      	ldr	r3, [r3, #0]
   b6c82:	685b      	ldr	r3, [r3, #4]
   b6c84:	9301      	str	r3, [sp, #4]
   b6c86:	bd08      	pop	{r3, pc}
   b6c88:	0003021c 	.word	0x0003021c

000b6c8c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b6c8c:	b508      	push	{r3, lr}
   b6c8e:	4b02      	ldr	r3, [pc, #8]	; (b6c98 <realloc+0xc>)
   b6c90:	681b      	ldr	r3, [r3, #0]
   b6c92:	689b      	ldr	r3, [r3, #8]
   b6c94:	9301      	str	r3, [sp, #4]
   b6c96:	bd08      	pop	{r3, pc}
   b6c98:	0003021c 	.word	0x0003021c

000b6c9c <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b6c9c:	b508      	push	{r3, lr}
   b6c9e:	4b02      	ldr	r3, [pc, #8]	; (b6ca8 <snprintf+0xc>)
   b6ca0:	681b      	ldr	r3, [r3, #0]
   b6ca2:	69db      	ldr	r3, [r3, #28]
   b6ca4:	9301      	str	r3, [sp, #4]
   b6ca6:	bd08      	pop	{r3, pc}
   b6ca8:	0003021c 	.word	0x0003021c

000b6cac <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b6cac:	b508      	push	{r3, lr}
   b6cae:	4b02      	ldr	r3, [pc, #8]	; (b6cb8 <vsnprintf+0xc>)
   b6cb0:	681b      	ldr	r3, [r3, #0]
   b6cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6cb4:	9301      	str	r3, [sp, #4]
   b6cb6:	bd08      	pop	{r3, pc}
   b6cb8:	0003021c 	.word	0x0003021c

000b6cbc <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b6cbc:	b508      	push	{r3, lr}
   b6cbe:	4b02      	ldr	r3, [pc, #8]	; (b6cc8 <__errno+0xc>)
   b6cc0:	681b      	ldr	r3, [r3, #0]
   b6cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6cc4:	9301      	str	r3, [sp, #4]
   b6cc6:	bd08      	pop	{r3, pc}
   b6cc8:	0003021c 	.word	0x0003021c

000b6ccc <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b6ccc:	b508      	push	{r3, lr}
   b6cce:	4b02      	ldr	r3, [pc, #8]	; (b6cd8 <__assert_func+0xc>)
   b6cd0:	681b      	ldr	r3, [r3, #0]
   b6cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6cd4:	9301      	str	r3, [sp, #4]
   b6cd6:	bd08      	pop	{r3, pc}
   b6cd8:	0003021c 	.word	0x0003021c

000b6cdc <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b6cdc:	b508      	push	{r3, lr}
   b6cde:	4b02      	ldr	r3, [pc, #8]	; (b6ce8 <newlib_impure_ptr_callback+0xc>)
   b6ce0:	681b      	ldr	r3, [r3, #0]
   b6ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6ce4:	9301      	str	r3, [sp, #4]
   b6ce6:	bd08      	pop	{r3, pc}
   b6ce8:	0003021c 	.word	0x0003021c

000b6cec <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6cec:	2200      	movs	r2, #0
   b6cee:	6840      	ldr	r0, [r0, #4]
   b6cf0:	4611      	mov	r1, r2
   b6cf2:	f7ff bf83 	b.w	b6bfc <network_listening>

000b6cf6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6cf6:	2200      	movs	r2, #0
   b6cf8:	6840      	ldr	r0, [r0, #4]
   b6cfa:	4611      	mov	r1, r2
   b6cfc:	f7ff bf8e 	b.w	b6c1c <network_get_listen_timeout>

000b6d00 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6d00:	6840      	ldr	r0, [r0, #4]
   b6d02:	2200      	movs	r2, #0
   b6d04:	f7ff bf82 	b.w	b6c0c <network_set_listen_timeout>

000b6d08 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6d08:	6840      	ldr	r0, [r0, #4]
   b6d0a:	2200      	movs	r2, #0
   b6d0c:	f081 0101 	eor.w	r1, r1, #1
   b6d10:	f7ff bf6c 	b.w	b6bec <network_listen>

000b6d14 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6d14:	2300      	movs	r3, #0
   b6d16:	6840      	ldr	r0, [r0, #4]
   b6d18:	461a      	mov	r2, r3
   b6d1a:	4619      	mov	r1, r3
   b6d1c:	f7ff bf5e 	b.w	b6bdc <network_off>

000b6d20 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6d20:	2300      	movs	r3, #0
   b6d22:	6840      	ldr	r0, [r0, #4]
   b6d24:	461a      	mov	r2, r3
   b6d26:	4619      	mov	r1, r3
   b6d28:	f7ff bf50 	b.w	b6bcc <network_on>

000b6d2c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b6d2c:	2200      	movs	r2, #0
   b6d2e:	6840      	ldr	r0, [r0, #4]
   b6d30:	4611      	mov	r1, r2
   b6d32:	f7ff bf43 	b.w	b6bbc <network_ready>

000b6d36 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6d36:	2200      	movs	r2, #0
   b6d38:	6840      	ldr	r0, [r0, #4]
   b6d3a:	4611      	mov	r1, r2
   b6d3c:	f7ff bf2e 	b.w	b6b9c <network_connecting>

000b6d40 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6d40:	6840      	ldr	r0, [r0, #4]
   b6d42:	2200      	movs	r2, #0
   b6d44:	2102      	movs	r1, #2
   b6d46:	f7ff bf31 	b.w	b6bac <network_disconnect>

000b6d4a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6d4a:	2300      	movs	r3, #0
   b6d4c:	6840      	ldr	r0, [r0, #4]
   b6d4e:	461a      	mov	r2, r3
   b6d50:	f7ff bf1c 	b.w	b6b8c <network_connect>

000b6d54 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b6d54:	4b02      	ldr	r3, [pc, #8]	; (b6d60 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b6d56:	2203      	movs	r2, #3
   b6d58:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b6d5a:	4a02      	ldr	r2, [pc, #8]	; (b6d64 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b6d5c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b6d5e:	4770      	bx	lr
   b6d60:	2003e6c4 	.word	0x2003e6c4
   b6d64:	000ba0f0 	.word	0x000ba0f0

000b6d68 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b6d68:	2100      	movs	r1, #0
   b6d6a:	f7ff be9b 	b.w	b6aa4 <hal_spi_release>

000b6d6e <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b6d6e:	2100      	movs	r1, #0
   b6d70:	f7ff be90 	b.w	b6a94 <hal_spi_acquire>

000b6d74 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b6d74:	b510      	push	{r4, lr}
   b6d76:	4604      	mov	r4, r0
   b6d78:	4608      	mov	r0, r1
{
    _spi = spi;
   b6d7a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b6d7c:	f7ff fe6a 	bl	b6a54 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b6d80:	2300      	movs	r3, #0
   b6d82:	6063      	str	r3, [r4, #4]
}
   b6d84:	4620      	mov	r0, r4
   b6d86:	bd10      	pop	{r4, pc}

000b6d88 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b6d88:	b513      	push	{r0, r1, r4, lr}
   b6d8a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b6d8c:	7800      	ldrb	r0, [r0, #0]
   b6d8e:	f7ff ffee 	bl	b6d6e <_ZN8SPIClass4lockEv.isra.0>
   b6d92:	b958      	cbnz	r0, b6dac <_ZN8SPIClass5beginEv+0x24>
   b6d94:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b6d96:	9001      	str	r0, [sp, #4]
   b6d98:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b6d9c:	f7ff fe4a 	bl	b6a34 <hal_spi_begin>
        unlock();
   b6da0:	9801      	ldr	r0, [sp, #4]
    }
}
   b6da2:	b002      	add	sp, #8
   b6da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6da8:	f7ff bfde 	b.w	b6d68 <_ZN8SPIClass6unlockEv.isra.0>
   b6dac:	b002      	add	sp, #8
   b6dae:	bd10      	pop	{r4, pc}

000b6db0 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b6db0:	7800      	ldrb	r0, [r0, #0]
   b6db2:	f7ff bfd9 	b.w	b6d68 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b6db8 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b6db8:	0840      	lsrs	r0, r0, #1
{
   b6dba:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b6dbc:	6018      	str	r0, [r3, #0]
   b6dbe:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b6dc0:	6818      	ldr	r0, [r3, #0]
   b6dc2:	4288      	cmp	r0, r1
   b6dc4:	b2e5      	uxtb	r5, r4
   b6dc6:	d906      	bls.n	b6dd6 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b6dc8:	3401      	adds	r4, #1
   b6dca:	2c08      	cmp	r4, #8
   b6dcc:	d002      	beq.n	b6dd4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b6dce:	0840      	lsrs	r0, r0, #1
   b6dd0:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b6dd2:	e7f5      	b.n	b6dc0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b6dd4:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b6dd6:	4b02      	ldr	r3, [pc, #8]	; (b6de0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b6dd8:	5d5b      	ldrb	r3, [r3, r5]
   b6dda:	7013      	strb	r3, [r2, #0]
}
   b6ddc:	bd30      	pop	{r4, r5, pc}
   b6dde:	bf00      	nop
   b6de0:	000ba124 	.word	0x000ba124

000b6de4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b6de4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6de8:	4606      	mov	r6, r0
   b6dea:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b6dec:	7800      	ldrb	r0, [r0, #0]
{
   b6dee:	460c      	mov	r4, r1
    CHECK(lock());
   b6df0:	f7ff ffbd 	bl	b6d6e <_ZN8SPIClass4lockEv.isra.0>
   b6df4:	2800      	cmp	r0, #0
   b6df6:	db1b      	blt.n	b6e30 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b6df8:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b6dfa:	2214      	movs	r2, #20
   b6dfc:	2100      	movs	r1, #0
   b6dfe:	a809      	add	r0, sp, #36	; 0x24
   b6e00:	f001 ff62 	bl	b8cc8 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b6e04:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b6e06:	2200      	movs	r2, #0
   b6e08:	a909      	add	r1, sp, #36	; 0x24
   b6e0a:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b6e0c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b6e10:	f7ff fe30 	bl	b6a74 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b6e14:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b6e18:	b113      	cbz	r3, b6e20 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b6e1a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b6e1e:	b155      	cbz	r5, b6e36 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b6e20:	2700      	movs	r7, #0
   b6e22:	46b9      	mov	r9, r7
   b6e24:	46b8      	mov	r8, r7
   b6e26:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b6e28:	7923      	ldrb	r3, [r4, #4]
   b6e2a:	b15d      	cbz	r5, b6e44 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b6e2c:	b1c3      	cbz	r3, b6e60 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b6e2e:	2000      	movs	r0, #0
}
   b6e30:	b00f      	add	sp, #60	; 0x3c
   b6e32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b6e36:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b6e3a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b6e3e:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b6e42:	e7f1      	b.n	b6e28 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b6e44:	2b00      	cmp	r3, #0
   b6e46:	d135      	bne.n	b6eb4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b6e48:	68a3      	ldr	r3, [r4, #8]
   b6e4a:	4543      	cmp	r3, r8
   b6e4c:	d108      	bne.n	b6e60 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b6e4e:	f88d 9020 	strb.w	r9, [sp, #32]
   b6e52:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b6e56:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b6e5a:	89a3      	ldrh	r3, [r4, #12]
   b6e5c:	429a      	cmp	r2, r3
   b6e5e:	d0e6      	beq.n	b6e2e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b6e60:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b6e62:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b6e64:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b6e68:	980a      	ldr	r0, [sp, #40]	; 0x28
   b6e6a:	ab04      	add	r3, sp, #16
   b6e6c:	f10d 020f 	add.w	r2, sp, #15
   b6e70:	f7ff ffa2 	bl	b6db8 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b6e74:	7921      	ldrb	r1, [r4, #4]
   b6e76:	b985      	cbnz	r5, b6e9a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b6e78:	b989      	cbnz	r1, b6e9e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b6e7a:	68a3      	ldr	r3, [r4, #8]
   b6e7c:	4543      	cmp	r3, r8
   b6e7e:	d30e      	bcc.n	b6e9e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b6e80:	f88d 9020 	strb.w	r9, [sp, #32]
   b6e84:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b6e88:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b6e8c:	89a3      	ldrh	r3, [r4, #12]
   b6e8e:	429a      	cmp	r2, r3
   b6e90:	d105      	bne.n	b6e9e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b6e92:	9b04      	ldr	r3, [sp, #16]
   b6e94:	4543      	cmp	r3, r8
   b6e96:	d102      	bne.n	b6e9e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b6e98:	e7c9      	b.n	b6e2e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b6e9a:	2900      	cmp	r1, #0
   b6e9c:	d1f9      	bne.n	b6e92 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b6e9e:	2300      	movs	r3, #0
   b6ea0:	9301      	str	r3, [sp, #4]
   b6ea2:	7b63      	ldrb	r3, [r4, #13]
   b6ea4:	9300      	str	r3, [sp, #0]
   b6ea6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b6eaa:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b6eac:	7830      	ldrb	r0, [r6, #0]
   b6eae:	f7ff fde9 	bl	b6a84 <hal_spi_set_settings>
   b6eb2:	e7bc      	b.n	b6e2e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b6eb4:	e9cd 5500 	strd	r5, r5, [sp]
   b6eb8:	462b      	mov	r3, r5
   b6eba:	462a      	mov	r2, r5
   b6ebc:	2101      	movs	r1, #1
   b6ebe:	e7f5      	b.n	b6eac <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b6ec0 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b6ec0:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b6ec2:	7800      	ldrb	r0, [r0, #0]
   b6ec4:	f7ff fdbe 	bl	b6a44 <hal_spi_transfer>
}
   b6ec8:	b2c0      	uxtb	r0, r0
   b6eca:	bd08      	pop	{r3, pc}

000b6ecc <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b6ecc:	4b05      	ldr	r3, [pc, #20]	; (b6ee4 <_GLOBAL__sub_I_System+0x18>)
   b6ece:	2202      	movs	r2, #2
   b6ed0:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b6ed2:	4b05      	ldr	r3, [pc, #20]	; (b6ee8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b6ed4:	4a05      	ldr	r2, [pc, #20]	; (b6eec <_GLOBAL__sub_I_System+0x20>)
   b6ed6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b6ed8:	2000      	movs	r0, #0
   b6eda:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b6ede:	f7ff be29 	b.w	b6b34 <set_system_mode>
   b6ee2:	bf00      	nop
   b6ee4:	2003e6d8 	.word	0x2003e6d8
   b6ee8:	2003e6cc 	.word	0x2003e6cc
   b6eec:	ffff0000 	.word	0xffff0000

000b6ef0 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b6ef0:	b510      	push	{r4, lr}
   b6ef2:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b6ef4:	f001 ff30 	bl	b8d58 <strlen>
   b6ef8:	3801      	subs	r0, #1
   b6efa:	1823      	adds	r3, r4, r0
   b6efc:	4620      	mov	r0, r4
	while(i<j){
   b6efe:	4283      	cmp	r3, r0
   b6f00:	d906      	bls.n	b6f10 <_Z11str_reversePc+0x20>
		c = *i;
   b6f02:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b6f04:	7819      	ldrb	r1, [r3, #0]
   b6f06:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b6f0a:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b6f0e:	e7f6      	b.n	b6efe <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b6f10:	bd10      	pop	{r4, pc}

000b6f12 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b6f12:	b570      	push	{r4, r5, r6, lr}
   b6f14:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b6f16:	1e91      	subs	r1, r2, #2
   b6f18:	2922      	cmp	r1, #34	; 0x22
   b6f1a:	d81d      	bhi.n	b6f58 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b6f1c:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b6f1e:	b930      	cbnz	r0, b6f2e <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b6f20:	4423      	add	r3, r4
            *ptr++ = '0';
   b6f22:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b6f24:	429d      	cmp	r5, r3
   b6f26:	d210      	bcs.n	b6f4a <ultoa+0x38>
            *ptr++ = '0';
   b6f28:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b6f2c:	e7fa      	b.n	b6f24 <ultoa+0x12>
            result.quot = a/radix;
   b6f2e:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b6f32:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b6f36:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b6f38:	2809      	cmp	r0, #9
                *ptr += '0';
   b6f3a:	bf94      	ite	ls
   b6f3c:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b6f3e:	3157      	addhi	r1, #87	; 0x57
   b6f40:	b2c9      	uxtb	r1, r1
   b6f42:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b6f46:	4630      	mov	r0, r6
	while(a){
   b6f48:	e7e9      	b.n	b6f1e <ultoa+0xc>

	*ptr = '\0';
   b6f4a:	2300      	movs	r3, #0
	str_reverse(buffer);
   b6f4c:	4620      	mov	r0, r4
	*ptr = '\0';
   b6f4e:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b6f50:	f7ff ffce 	bl	b6ef0 <_Z11str_reversePc>
	return buffer;
   b6f54:	4620      	mov	r0, r4
}
   b6f56:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b6f58:	2000      	movs	r0, #0
   b6f5a:	e7fc      	b.n	b6f56 <ultoa+0x44>

000b6f5c <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b6f5c:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b6f5e:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b6f60:	460c      	mov	r4, r1
   b6f62:	4615      	mov	r5, r2
	if(a<0){
   b6f64:	da0e      	bge.n	b6f84 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b6f66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b6f6a:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b6f6e:	bf14      	ite	ne
   b6f70:	4258      	negne	r0, r3
   b6f72:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b6f74:	2301      	movs	r3, #1
		*buffer = '-';
   b6f76:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b6f78:	462a      	mov	r2, r5
   b6f7a:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b6f7c:	f7ff ffc9 	bl	b6f12 <ultoa>
	}
	return buffer;
}
   b6f80:	4620      	mov	r0, r4
   b6f82:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b6f84:	2301      	movs	r3, #1
   b6f86:	e7f9      	b.n	b6f7c <itoa+0x20>

000b6f88 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b6f88:	b510      	push	{r4, lr}
   b6f8a:	4604      	mov	r4, r0
{
	free(buffer);
   b6f8c:	6800      	ldr	r0, [r0, #0]
   b6f8e:	f7ff fe75 	bl	b6c7c <free>
}
   b6f92:	4620      	mov	r0, r4
   b6f94:	bd10      	pop	{r4, pc}

000b6f96 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b6f96:	b510      	push	{r4, lr}
   b6f98:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b6f9a:	6800      	ldr	r0, [r0, #0]
   b6f9c:	b108      	cbz	r0, b6fa2 <_ZN6String10invalidateEv+0xc>
   b6f9e:	f7ff fe6d 	bl	b6c7c <free>
	buffer = NULL;
   b6fa2:	2300      	movs	r3, #0
	capacity = len = 0;
   b6fa4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b6fa8:	6023      	str	r3, [r4, #0]
}
   b6faa:	bd10      	pop	{r4, pc}

000b6fac <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b6fac:	b538      	push	{r3, r4, r5, lr}
   b6fae:	4604      	mov	r4, r0
   b6fb0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b6fb2:	6800      	ldr	r0, [r0, #0]
   b6fb4:	3101      	adds	r1, #1
   b6fb6:	f7ff fe69 	bl	b6c8c <realloc>
	if (newbuffer) {
   b6fba:	b110      	cbz	r0, b6fc2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b6fbc:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b6fc0:	2001      	movs	r0, #1
	}
	return 0;
}
   b6fc2:	bd38      	pop	{r3, r4, r5, pc}

000b6fc4 <_ZN6String7reserveEj>:
{
   b6fc4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b6fc6:	6803      	ldr	r3, [r0, #0]
{
   b6fc8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b6fca:	b123      	cbz	r3, b6fd6 <_ZN6String7reserveEj+0x12>
   b6fcc:	6843      	ldr	r3, [r0, #4]
   b6fce:	428b      	cmp	r3, r1
   b6fd0:	d301      	bcc.n	b6fd6 <_ZN6String7reserveEj+0x12>
   b6fd2:	2001      	movs	r0, #1
}
   b6fd4:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b6fd6:	4620      	mov	r0, r4
   b6fd8:	f7ff ffe8 	bl	b6fac <_ZN6String12changeBufferEj>
   b6fdc:	2800      	cmp	r0, #0
   b6fde:	d0f9      	beq.n	b6fd4 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b6fe0:	68a3      	ldr	r3, [r4, #8]
   b6fe2:	2b00      	cmp	r3, #0
   b6fe4:	d1f5      	bne.n	b6fd2 <_ZN6String7reserveEj+0xe>
   b6fe6:	6822      	ldr	r2, [r4, #0]
   b6fe8:	7013      	strb	r3, [r2, #0]
   b6fea:	e7f2      	b.n	b6fd2 <_ZN6String7reserveEj+0xe>

000b6fec <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b6fec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6fee:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b6ff0:	4611      	mov	r1, r2
   b6ff2:	9201      	str	r2, [sp, #4]
{
   b6ff4:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b6ff6:	f7ff ffe5 	bl	b6fc4 <_ZN6String7reserveEj>
   b6ffa:	9a01      	ldr	r2, [sp, #4]
   b6ffc:	b928      	cbnz	r0, b700a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b6ffe:	4620      	mov	r0, r4
   b7000:	f7ff ffc9 	bl	b6f96 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b7004:	4620      	mov	r0, r4
   b7006:	b003      	add	sp, #12
   b7008:	bd30      	pop	{r4, r5, pc}
	len = length;
   b700a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b700c:	4629      	mov	r1, r5
   b700e:	6820      	ldr	r0, [r4, #0]
   b7010:	f001 fe4c 	bl	b8cac <memcpy>
	buffer[len] = 0;
   b7014:	6822      	ldr	r2, [r4, #0]
   b7016:	68a3      	ldr	r3, [r4, #8]
   b7018:	2100      	movs	r1, #0
   b701a:	54d1      	strb	r1, [r2, r3]
	return *this;
   b701c:	e7f2      	b.n	b7004 <_ZN6String4copyEPKcj+0x18>

000b701e <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b701e:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b7020:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b7022:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b7026:	4604      	mov	r4, r0
	len = 0;
   b7028:	6083      	str	r3, [r0, #8]
	flags = 0;
   b702a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b702c:	b141      	cbz	r1, b7040 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b702e:	4608      	mov	r0, r1
   b7030:	9101      	str	r1, [sp, #4]
   b7032:	f001 fe91 	bl	b8d58 <strlen>
   b7036:	9901      	ldr	r1, [sp, #4]
   b7038:	4602      	mov	r2, r0
   b703a:	4620      	mov	r0, r4
   b703c:	f7ff ffd6 	bl	b6fec <_ZN6String4copyEPKcj>
}
   b7040:	4620      	mov	r0, r4
   b7042:	b002      	add	sp, #8
   b7044:	bd10      	pop	{r4, pc}

000b7046 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b7046:	4288      	cmp	r0, r1
{
   b7048:	b510      	push	{r4, lr}
   b704a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b704c:	d005      	beq.n	b705a <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b704e:	680b      	ldr	r3, [r1, #0]
   b7050:	b12b      	cbz	r3, b705e <_ZN6StringaSERKS_+0x18>
   b7052:	688a      	ldr	r2, [r1, #8]
   b7054:	4619      	mov	r1, r3
   b7056:	f7ff ffc9 	bl	b6fec <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b705a:	4620      	mov	r0, r4
   b705c:	bd10      	pop	{r4, pc}
	else invalidate();
   b705e:	f7ff ff9a 	bl	b6f96 <_ZN6String10invalidateEv>
   b7062:	e7fa      	b.n	b705a <_ZN6StringaSERKS_+0x14>

000b7064 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b7064:	b510      	push	{r4, lr}
	buffer = NULL;
   b7066:	2300      	movs	r3, #0
String::String(const String &value)
   b7068:	4604      	mov	r4, r0
	capacity = 0;
   b706a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b706e:	6083      	str	r3, [r0, #8]
	flags = 0;
   b7070:	7303      	strb	r3, [r0, #12]
	*this = value;
   b7072:	f7ff ffe8 	bl	b7046 <_ZN6StringaSERKS_>
}
   b7076:	4620      	mov	r0, r4
   b7078:	bd10      	pop	{r4, pc}

000b707a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b707a:	b513      	push	{r0, r1, r4, lr}
   b707c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b707e:	b159      	cbz	r1, b7098 <_ZN6StringaSEPKc+0x1e>
   b7080:	4608      	mov	r0, r1
   b7082:	9101      	str	r1, [sp, #4]
   b7084:	f001 fe68 	bl	b8d58 <strlen>
   b7088:	9901      	ldr	r1, [sp, #4]
   b708a:	4602      	mov	r2, r0
   b708c:	4620      	mov	r0, r4
   b708e:	f7ff ffad 	bl	b6fec <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b7092:	4620      	mov	r0, r4
   b7094:	b002      	add	sp, #8
   b7096:	bd10      	pop	{r4, pc}
	else invalidate();
   b7098:	f7ff ff7d 	bl	b6f96 <_ZN6String10invalidateEv>
   b709c:	e7f9      	b.n	b7092 <_ZN6StringaSEPKc+0x18>

000b709e <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b709e:	b510      	push	{r4, lr}
   b70a0:	4604      	mov	r4, r0
   b70a2:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b70a4:	2300      	movs	r3, #0
	capacity = 0;
   b70a6:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b70aa:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b70ac:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b70ae:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b70b0:	a901      	add	r1, sp, #4
   b70b2:	f7ff ff53 	bl	b6f5c <itoa>
	*this = buf;
   b70b6:	a901      	add	r1, sp, #4
   b70b8:	4620      	mov	r0, r4
   b70ba:	f7ff ffde 	bl	b707a <_ZN6StringaSEPKc>
}
   b70be:	4620      	mov	r0, r4
   b70c0:	b00a      	add	sp, #40	; 0x28
   b70c2:	bd10      	pop	{r4, pc}

000b70c4 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b70c4:	b570      	push	{r4, r5, r6, lr}
   b70c6:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b70c8:	460e      	mov	r6, r1
   b70ca:	b909      	cbnz	r1, b70d0 <_ZN6String6concatEPKcj+0xc>
   b70cc:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b70ce:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b70d0:	b16a      	cbz	r2, b70ee <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b70d2:	6884      	ldr	r4, [r0, #8]
   b70d4:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b70d6:	4621      	mov	r1, r4
   b70d8:	f7ff ff74 	bl	b6fc4 <_ZN6String7reserveEj>
   b70dc:	2800      	cmp	r0, #0
   b70de:	d0f5      	beq.n	b70cc <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b70e0:	6828      	ldr	r0, [r5, #0]
   b70e2:	68ab      	ldr	r3, [r5, #8]
   b70e4:	4631      	mov	r1, r6
   b70e6:	4418      	add	r0, r3
   b70e8:	f001 fe2e 	bl	b8d48 <strcpy>
	len = newlen;
   b70ec:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b70ee:	2001      	movs	r0, #1
   b70f0:	e7ed      	b.n	b70ce <_ZN6String6concatEPKcj+0xa>

000b70f2 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b70f2:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b70f4:	688a      	ldr	r2, [r1, #8]
   b70f6:	6809      	ldr	r1, [r1, #0]
{
   b70f8:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b70fa:	f7ff ffe3 	bl	b70c4 <_ZN6String6concatEPKcj>
   b70fe:	b910      	cbnz	r0, b7106 <_ZplRK15StringSumHelperRK6String+0x14>
   b7100:	4620      	mov	r0, r4
   b7102:	f7ff ff48 	bl	b6f96 <_ZN6String10invalidateEv>
	return a;
}
   b7106:	4620      	mov	r0, r4
   b7108:	bd10      	pop	{r4, pc}

000b710a <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b710a:	b513      	push	{r0, r1, r4, lr}
   b710c:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b710e:	b929      	cbnz	r1, b711c <_ZplRK15StringSumHelperPKc+0x12>
   b7110:	4620      	mov	r0, r4
   b7112:	f7ff ff40 	bl	b6f96 <_ZN6String10invalidateEv>
	return a;
}
   b7116:	4620      	mov	r0, r4
   b7118:	b002      	add	sp, #8
   b711a:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b711c:	4608      	mov	r0, r1
   b711e:	9101      	str	r1, [sp, #4]
   b7120:	f001 fe1a 	bl	b8d58 <strlen>
   b7124:	9901      	ldr	r1, [sp, #4]
   b7126:	4602      	mov	r2, r0
   b7128:	4620      	mov	r0, r4
   b712a:	f7ff ffcb 	bl	b70c4 <_ZN6String6concatEPKcj>
   b712e:	2800      	cmp	r0, #0
   b7130:	d0ee      	beq.n	b7110 <_ZplRK15StringSumHelperPKc+0x6>
   b7132:	e7f0      	b.n	b7116 <_ZplRK15StringSumHelperPKc+0xc>

000b7134 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   b7134:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b7136:	6882      	ldr	r2, [r0, #8]
   b7138:	b93a      	cbnz	r2, b714a <_ZNK6String6equalsEPKc+0x16>
   b713a:	b121      	cbz	r1, b7146 <_ZNK6String6equalsEPKc+0x12>
   b713c:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   b713e:	fab0 f080 	clz	r0, r0
   b7142:	0940      	lsrs	r0, r0, #5
   b7144:	e000      	b.n	b7148 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b7146:	2001      	movs	r0, #1
}
   b7148:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b714a:	6800      	ldr	r0, [r0, #0]
   b714c:	b909      	cbnz	r1, b7152 <_ZNK6String6equalsEPKc+0x1e>
   b714e:	7800      	ldrb	r0, [r0, #0]
   b7150:	e7f5      	b.n	b713e <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b7152:	f001 fdef 	bl	b8d34 <strcmp>
   b7156:	e7f2      	b.n	b713e <_ZNK6String6equalsEPKc+0xa>

000b7158 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b7158:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b715a:	6843      	ldr	r3, [r0, #4]
   b715c:	3b01      	subs	r3, #1
    {
   b715e:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b7160:	6043      	str	r3, [r0, #4]
   b7162:	b963      	cbnz	r3, b717e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b7164:	6803      	ldr	r3, [r0, #0]
   b7166:	689b      	ldr	r3, [r3, #8]
   b7168:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b716a:	68a3      	ldr	r3, [r4, #8]
   b716c:	3b01      	subs	r3, #1
   b716e:	60a3      	str	r3, [r4, #8]
   b7170:	b92b      	cbnz	r3, b717e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b7172:	6823      	ldr	r3, [r4, #0]
   b7174:	4620      	mov	r0, r4
   b7176:	68db      	ldr	r3, [r3, #12]
        }
    }
   b7178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b717c:	4718      	bx	r3
    }
   b717e:	bd10      	pop	{r4, pc}

000b7180 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b7180:	4802      	ldr	r0, [pc, #8]	; (b718c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b7182:	2300      	movs	r3, #0
   b7184:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b7186:	f7ff bb65 	b.w	b6854 <os_mutex_recursive_create>
   b718a:	bf00      	nop
   b718c:	2003e6dc 	.word	0x2003e6dc

000b7190 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b7190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7192:	4606      	mov	r6, r0
   b7194:	460d      	mov	r5, r1
  size_t n = 0;
   b7196:	188f      	adds	r7, r1, r2
   b7198:	2400      	movs	r4, #0
  while (size--) {
   b719a:	42bd      	cmp	r5, r7
   b719c:	d00c      	beq.n	b71b8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b719e:	6833      	ldr	r3, [r6, #0]
   b71a0:	f815 1b01 	ldrb.w	r1, [r5], #1
   b71a4:	689b      	ldr	r3, [r3, #8]
   b71a6:	4630      	mov	r0, r6
   b71a8:	4798      	blx	r3
     if (chunk>=0)
   b71aa:	1e03      	subs	r3, r0, #0
   b71ac:	db01      	blt.n	b71b2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b71ae:	441c      	add	r4, r3
  while (size--) {
   b71b0:	e7f3      	b.n	b719a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b71b2:	2c00      	cmp	r4, #0
   b71b4:	bf08      	it	eq
   b71b6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b71b8:	4620      	mov	r0, r4
   b71ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b71bc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b71bc:	b513      	push	{r0, r1, r4, lr}
   b71be:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b71c0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b71c2:	b159      	cbz	r1, b71dc <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b71c4:	9101      	str	r1, [sp, #4]
   b71c6:	f001 fdc7 	bl	b8d58 <strlen>
   b71ca:	6823      	ldr	r3, [r4, #0]
   b71cc:	9901      	ldr	r1, [sp, #4]
   b71ce:	68db      	ldr	r3, [r3, #12]
   b71d0:	4602      	mov	r2, r0
   b71d2:	4620      	mov	r0, r4
    }
   b71d4:	b002      	add	sp, #8
   b71d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b71da:	4718      	bx	r3
    }
   b71dc:	b002      	add	sp, #8
   b71de:	bd10      	pop	{r4, pc}

000b71e0 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b71e0:	b508      	push	{r3, lr}
  return write(str);
   b71e2:	f7ff ffeb 	bl	b71bc <_ZN5Print5writeEPKc>
}
   b71e6:	bd08      	pop	{r3, pc}

000b71e8 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b71e8:	6803      	ldr	r3, [r0, #0]
   b71ea:	689b      	ldr	r3, [r3, #8]
   b71ec:	4718      	bx	r3

000b71ee <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b71ee:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b71f0:	210d      	movs	r1, #13
{
   b71f2:	4605      	mov	r5, r0
  size_t n = print('\r');
   b71f4:	f7ff fff8 	bl	b71e8 <_ZN5Print5printEc>
  n += print('\n');
   b71f8:	210a      	movs	r1, #10
  size_t n = print('\r');
   b71fa:	4604      	mov	r4, r0
  n += print('\n');
   b71fc:	4628      	mov	r0, r5
   b71fe:	f7ff fff3 	bl	b71e8 <_ZN5Print5printEc>
  return n;
}
   b7202:	4420      	add	r0, r4
   b7204:	bd38      	pop	{r3, r4, r5, pc}

000b7206 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b7206:	b538      	push	{r3, r4, r5, lr}
   b7208:	4605      	mov	r5, r0
  return write(str);
   b720a:	f7ff ffd7 	bl	b71bc <_ZN5Print5writeEPKc>
   b720e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b7210:	4628      	mov	r0, r5
   b7212:	f7ff ffec 	bl	b71ee <_ZN5Print7printlnEv>
  return n;
}
   b7216:	4420      	add	r0, r4
   b7218:	bd38      	pop	{r3, r4, r5, pc}

000b721a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b721a:	b530      	push	{r4, r5, lr}
   b721c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b721e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b7220:	2a01      	cmp	r2, #1
  *str = '\0';
   b7222:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b7226:	bf98      	it	ls
   b7228:	220a      	movls	r2, #10
   b722a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b722c:	460d      	mov	r5, r1
   b722e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b7232:	fb01 5312 	mls	r3, r1, r2, r5
   b7236:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b723a:	2b09      	cmp	r3, #9
   b723c:	bf94      	ite	ls
   b723e:	3330      	addls	r3, #48	; 0x30
   b7240:	3337      	addhi	r3, #55	; 0x37
   b7242:	b2db      	uxtb	r3, r3
  } while(n);
   b7244:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7246:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b724a:	d9ef      	bls.n	b722c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b724c:	4621      	mov	r1, r4
   b724e:	f7ff ffb5 	bl	b71bc <_ZN5Print5writeEPKc>
}
   b7252:	b00b      	add	sp, #44	; 0x2c
   b7254:	bd30      	pop	{r4, r5, pc}

000b7256 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b7256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b725a:	b086      	sub	sp, #24
   b725c:	af00      	add	r7, sp, #0
   b725e:	4605      	mov	r5, r0
   b7260:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b7262:	1d38      	adds	r0, r7, #4
   b7264:	2114      	movs	r1, #20
{
   b7266:	4614      	mov	r4, r2
    va_copy(args2, args);
   b7268:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b726a:	f7ff fd1f 	bl	b6cac <vsnprintf>

    if (n<bufsize)
   b726e:	2813      	cmp	r0, #19
   b7270:	d80e      	bhi.n	b7290 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b7272:	1d39      	adds	r1, r7, #4
   b7274:	4628      	mov	r0, r5
   b7276:	f7ff ffa1 	bl	b71bc <_ZN5Print5writeEPKc>
   b727a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b727c:	b11e      	cbz	r6, b7286 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b727e:	4628      	mov	r0, r5
   b7280:	f7ff ffb5 	bl	b71ee <_ZN5Print7printlnEv>
   b7284:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b7286:	4620      	mov	r0, r4
   b7288:	3718      	adds	r7, #24
   b728a:	46bd      	mov	sp, r7
   b728c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b7290:	f100 0308 	add.w	r3, r0, #8
   b7294:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b7298:	46e8      	mov	r8, sp
        char bigger[n+1];
   b729a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b729e:	4622      	mov	r2, r4
   b72a0:	1c41      	adds	r1, r0, #1
   b72a2:	683b      	ldr	r3, [r7, #0]
   b72a4:	4668      	mov	r0, sp
   b72a6:	f7ff fd01 	bl	b6cac <vsnprintf>
  return write(str);
   b72aa:	4669      	mov	r1, sp
   b72ac:	4628      	mov	r0, r5
   b72ae:	f7ff ff85 	bl	b71bc <_ZN5Print5writeEPKc>
   b72b2:	4604      	mov	r4, r0
   b72b4:	46c5      	mov	sp, r8
   b72b6:	e7e1      	b.n	b727c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b72b8 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b72b8:	b510      	push	{r4, lr}
   b72ba:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b72bc:	f7ff fab2 	bl	b6824 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b72c0:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b72c2:	6823      	ldr	r3, [r4, #0]
   b72c4:	4620      	mov	r0, r4
   b72c6:	695b      	ldr	r3, [r3, #20]
   b72c8:	4798      	blx	r3
    if (c >= 0) return c;
   b72ca:	2800      	cmp	r0, #0
   b72cc:	da08      	bge.n	b72e0 <_ZN6Stream9timedReadEv+0x28>
   b72ce:	f7ff faa9 	bl	b6824 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b72d2:	68e3      	ldr	r3, [r4, #12]
   b72d4:	1ac0      	subs	r0, r0, r3
   b72d6:	68a3      	ldr	r3, [r4, #8]
   b72d8:	4298      	cmp	r0, r3
   b72da:	d3f2      	bcc.n	b72c2 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b72dc:	f04f 30ff 	mov.w	r0, #4294967295
}
   b72e0:	bd10      	pop	{r4, pc}

000b72e2 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   b72e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b72e6:	4607      	mov	r7, r0
   b72e8:	460c      	mov	r4, r1
   b72ea:	188e      	adds	r6, r1, r2
   b72ec:	460d      	mov	r5, r1
  size_t count = 0;
  while (count < length) {
   b72ee:	42b5      	cmp	r5, r6
   b72f0:	eba5 0804 	sub.w	r8, r5, r4
   b72f4:	d007      	beq.n	b7306 <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   b72f6:	4638      	mov	r0, r7
   b72f8:	f7ff ffde 	bl	b72b8 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   b72fc:	1e03      	subs	r3, r0, #0
   b72fe:	db02      	blt.n	b7306 <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   b7300:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
   b7304:	e7f3      	b.n	b72ee <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
   b7306:	4640      	mov	r0, r8
   b7308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b730c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b730c:	4b01      	ldr	r3, [pc, #4]	; (b7314 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b730e:	4a02      	ldr	r2, [pc, #8]	; (b7318 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b7310:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b7312:	4770      	bx	lr
   b7314:	2003e6e0 	.word	0x2003e6e0
   b7318:	000ba134 	.word	0x000ba134

000b731c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b731c:	4b02      	ldr	r3, [pc, #8]	; (b7328 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b731e:	681a      	ldr	r2, [r3, #0]
   b7320:	4b02      	ldr	r3, [pc, #8]	; (b732c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b7322:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b7324:	4770      	bx	lr
   b7326:	bf00      	nop
   b7328:	2003e524 	.word	0x2003e524
   b732c:	2003e6e4 	.word	0x2003e6e4

000b7330 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   b7330:	428a      	cmp	r2, r1
{
   b7332:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   b7334:	d007      	beq.n	b7346 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   b7336:	1a44      	subs	r4, r0, r1
   b7338:	9802      	ldr	r0, [sp, #8]
   b733a:	1ac0      	subs	r0, r0, r3
   b733c:	4344      	muls	r4, r0
   b733e:	1a50      	subs	r0, r2, r1
   b7340:	fb94 f0f0 	sdiv	r0, r4, r0
   b7344:	4418      	add	r0, r3
}
   b7346:	bd10      	pop	{r4, pc}

000b7348 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b7348:	2100      	movs	r1, #0
   b734a:	f7ff bbfb 	b.w	b6b44 <system_delay_ms>
	...

000b7350 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b7350:	b510      	push	{r4, lr}
   b7352:	4b04      	ldr	r3, [pc, #16]	; (b7364 <_ZN9TCPClientD1Ev+0x14>)
   b7354:	6003      	str	r3, [r0, #0]
   b7356:	4604      	mov	r4, r0
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b7358:	6980      	ldr	r0, [r0, #24]
   b735a:	b108      	cbz	r0, b7360 <_ZN9TCPClientD1Ev+0x10>
	  _M_pi->_M_release();
   b735c:	f7ff fefc 	bl	b7158 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
   b7360:	4620      	mov	r0, r4
   b7362:	bd10      	pop	{r4, pc}
   b7364:	000ba22c 	.word	0x000ba22c

000b7368 <_ZN9TCPClientD0Ev>:
   b7368:	b510      	push	{r4, lr}
   b736a:	4604      	mov	r4, r0
   b736c:	f7ff fff0 	bl	b7350 <_ZN9TCPClientD1Ev>
   b7370:	4620      	mov	r0, r4
   b7372:	211c      	movs	r1, #28
   b7374:	f7fc fe93 	bl	b409e <_ZdlPvj>
   b7378:	4620      	mov	r0, r4
   b737a:	bd10      	pop	{r4, pc}

000b737c <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b737c:	4b01      	ldr	r3, [pc, #4]	; (b7384 <_GLOBAL__sub_I_RGB+0x8>)
   b737e:	2200      	movs	r2, #0
   b7380:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b7382:	4770      	bx	lr
   b7384:	2003e6e8 	.word	0x2003e6e8

000b7388 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b7388:	4b01      	ldr	r3, [pc, #4]	; (b7390 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b738a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b738c:	4770      	bx	lr
   b738e:	bf00      	nop
   b7390:	2003e528 	.word	0x2003e528

000b7394 <serialEventRun>:
{
   b7394:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b7396:	4b0b      	ldr	r3, [pc, #44]	; (b73c4 <serialEventRun+0x30>)
   b7398:	b143      	cbz	r3, b73ac <serialEventRun+0x18>
   b739a:	f000 f985 	bl	b76a8 <_Z16_fetch_usbserialv>
   b739e:	6803      	ldr	r3, [r0, #0]
   b73a0:	691b      	ldr	r3, [r3, #16]
   b73a2:	4798      	blx	r3
   b73a4:	2800      	cmp	r0, #0
   b73a6:	dd01      	ble.n	b73ac <serialEventRun+0x18>
        serialEvent();
   b73a8:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b73ac:	4b06      	ldr	r3, [pc, #24]	; (b73c8 <serialEventRun+0x34>)
   b73ae:	b143      	cbz	r3, b73c2 <serialEventRun+0x2e>
   b73b0:	f000 ff04 	bl	b81bc <_Z22__fetch_global_Serial1v>
   b73b4:	6803      	ldr	r3, [r0, #0]
   b73b6:	691b      	ldr	r3, [r3, #16]
   b73b8:	4798      	blx	r3
   b73ba:	2800      	cmp	r0, #0
   b73bc:	dd01      	ble.n	b73c2 <serialEventRun+0x2e>
        serialEvent1();
   b73be:	f3af 8000 	nop.w
}
   b73c2:	bd08      	pop	{r3, pc}
	...

000b73cc <_post_loop>:
{
   b73cc:	b508      	push	{r3, lr}
	serialEventRun();
   b73ce:	f7ff ffe1 	bl	b7394 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b73d2:	f7ff fa27 	bl	b6824 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b73d6:	4b01      	ldr	r3, [pc, #4]	; (b73dc <_post_loop+0x10>)
   b73d8:	6018      	str	r0, [r3, #0]
}
   b73da:	bd08      	pop	{r3, pc}
   b73dc:	2003e740 	.word	0x2003e740

000b73e0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b73e0:	4805      	ldr	r0, [pc, #20]	; (b73f8 <_Z33system_initialize_user_backup_ramv+0x18>)
   b73e2:	4a06      	ldr	r2, [pc, #24]	; (b73fc <_Z33system_initialize_user_backup_ramv+0x1c>)
   b73e4:	4906      	ldr	r1, [pc, #24]	; (b7400 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b73e6:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b73e8:	1a12      	subs	r2, r2, r0
   b73ea:	f001 fc5f 	bl	b8cac <memcpy>
    __backup_sram_signature = signature;
   b73ee:	4b05      	ldr	r3, [pc, #20]	; (b7404 <_Z33system_initialize_user_backup_ramv+0x24>)
   b73f0:	4a05      	ldr	r2, [pc, #20]	; (b7408 <_Z33system_initialize_user_backup_ramv+0x28>)
   b73f2:	601a      	str	r2, [r3, #0]
}
   b73f4:	bd08      	pop	{r3, pc}
   b73f6:	bf00      	nop
   b73f8:	2003f400 	.word	0x2003f400
   b73fc:	2003f404 	.word	0x2003f404
   b7400:	000ba5c4 	.word	0x000ba5c4
   b7404:	2003f400 	.word	0x2003f400
   b7408:	9a271c1e 	.word	0x9a271c1e

000b740c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b740c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b740e:	2300      	movs	r3, #0
   b7410:	9300      	str	r3, [sp, #0]
   b7412:	461a      	mov	r2, r3
   b7414:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7418:	f7ff fbae 	bl	b6b78 <system_ctrl_set_result>
}
   b741c:	b003      	add	sp, #12
   b741e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7424 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b7424:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b7426:	8843      	ldrh	r3, [r0, #2]
   b7428:	2b0a      	cmp	r3, #10
   b742a:	d008      	beq.n	b743e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b742c:	2b50      	cmp	r3, #80	; 0x50
   b742e:	d10b      	bne.n	b7448 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b7430:	4b09      	ldr	r3, [pc, #36]	; (b7458 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b7432:	681b      	ldr	r3, [r3, #0]
   b7434:	b14b      	cbz	r3, b744a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b7436:	b003      	add	sp, #12
   b7438:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b743c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b743e:	f7ff ffe5 	bl	b740c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b7442:	b003      	add	sp, #12
   b7444:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7448:	2300      	movs	r3, #0
   b744a:	9300      	str	r3, [sp, #0]
   b744c:	461a      	mov	r2, r3
   b744e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7452:	f7ff fb91 	bl	b6b78 <system_ctrl_set_result>
}
   b7456:	e7f4      	b.n	b7442 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b7458:	2003e6fc 	.word	0x2003e6fc

000b745c <module_user_init_hook>:
{
   b745c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b745e:	4812      	ldr	r0, [pc, #72]	; (b74a8 <module_user_init_hook+0x4c>)
   b7460:	2100      	movs	r1, #0
   b7462:	f7ff fc3b 	bl	b6cdc <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b7466:	4b11      	ldr	r3, [pc, #68]	; (b74ac <module_user_init_hook+0x50>)
   b7468:	681a      	ldr	r2, [r3, #0]
   b746a:	4b11      	ldr	r3, [pc, #68]	; (b74b0 <module_user_init_hook+0x54>)
   b746c:	429a      	cmp	r2, r3
   b746e:	4b11      	ldr	r3, [pc, #68]	; (b74b4 <module_user_init_hook+0x58>)
   b7470:	bf0c      	ite	eq
   b7472:	2201      	moveq	r2, #1
   b7474:	2200      	movne	r2, #0
   b7476:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b7478:	d001      	beq.n	b747e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b747a:	f7ff ffb1 	bl	b73e0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b747e:	f7ff f9c1 	bl	b6804 <HAL_RNG_GetRandomNumber>
   b7482:	4604      	mov	r4, r0
    srand(seed);
   b7484:	f001 fc28 	bl	b8cd8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b7488:	4b0b      	ldr	r3, [pc, #44]	; (b74b8 <module_user_init_hook+0x5c>)
   b748a:	b113      	cbz	r3, b7492 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b748c:	4620      	mov	r0, r4
   b748e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b7492:	2100      	movs	r1, #0
   b7494:	4808      	ldr	r0, [pc, #32]	; (b74b8 <module_user_init_hook+0x5c>)
   b7496:	f7ff fbe1 	bl	b6c5c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b749a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b749e:	4807      	ldr	r0, [pc, #28]	; (b74bc <module_user_init_hook+0x60>)
   b74a0:	2100      	movs	r1, #0
   b74a2:	f7ff bb5f 	b.w	b6b64 <system_ctrl_set_app_request_handler>
   b74a6:	bf00      	nop
   b74a8:	000b7389 	.word	0x000b7389
   b74ac:	2003f400 	.word	0x2003f400
   b74b0:	9a271c1e 	.word	0x9a271c1e
   b74b4:	2003e6f8 	.word	0x2003e6f8
   b74b8:	00000000 	.word	0x00000000
   b74bc:	000b7425 	.word	0x000b7425

000b74c0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b74c0:	4770      	bx	lr

000b74c2 <_ZN9IPAddressD0Ev>:
   b74c2:	b510      	push	{r4, lr}
   b74c4:	2118      	movs	r1, #24
   b74c6:	4604      	mov	r4, r0
   b74c8:	f7fc fde9 	bl	b409e <_ZdlPvj>
   b74cc:	4620      	mov	r0, r4
   b74ce:	bd10      	pop	{r4, pc}

000b74d0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b74d0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b74d2:	7d03      	ldrb	r3, [r0, #20]
   b74d4:	2b06      	cmp	r3, #6
{
   b74d6:	b08d      	sub	sp, #52	; 0x34
   b74d8:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b74da:	f100 0704 	add.w	r7, r0, #4
   b74de:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b74e2:	d012      	beq.n	b750a <_ZNK9IPAddress7printToER5Print+0x3a>
   b74e4:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b74e8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b74ec:	220a      	movs	r2, #10
   b74ee:	4630      	mov	r0, r6
   b74f0:	f7ff fe93 	bl	b721a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b74f4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b74f6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b74f8:	d019      	beq.n	b752e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b74fa:	2c00      	cmp	r4, #0
   b74fc:	d0f4      	beq.n	b74e8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b74fe:	212e      	movs	r1, #46	; 0x2e
   b7500:	4630      	mov	r0, r6
   b7502:	f7ff fe71 	bl	b71e8 <_ZN5Print5printEc>
   b7506:	4404      	add	r4, r0
   b7508:	e7ee      	b.n	b74e8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b750a:	232f      	movs	r3, #47	; 0x2f
   b750c:	466a      	mov	r2, sp
   b750e:	4639      	mov	r1, r7
   b7510:	200a      	movs	r0, #10
		buf[0] = 0;
   b7512:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7516:	f7ff f9a5 	bl	b6864 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b751a:	4668      	mov	r0, sp
   b751c:	f001 fc1c 	bl	b8d58 <strlen>
   b7520:	6833      	ldr	r3, [r6, #0]
   b7522:	4602      	mov	r2, r0
   b7524:	68db      	ldr	r3, [r3, #12]
   b7526:	4669      	mov	r1, sp
   b7528:	4630      	mov	r0, r6
   b752a:	4798      	blx	r3
   b752c:	4604      	mov	r4, r0
    }
    return n;
}
   b752e:	4620      	mov	r0, r4
   b7530:	b00d      	add	sp, #52	; 0x34
   b7532:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7534 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b7534:	b510      	push	{r4, lr}
   b7536:	4b05      	ldr	r3, [pc, #20]	; (b754c <_ZN9IPAddressC1Ev+0x18>)
   b7538:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b753a:	2211      	movs	r2, #17
   b753c:	f840 3b04 	str.w	r3, [r0], #4
   b7540:	2100      	movs	r1, #0
   b7542:	f001 fbc1 	bl	b8cc8 <memset>
}
   b7546:	4620      	mov	r0, r4
   b7548:	bd10      	pop	{r4, pc}
   b754a:	bf00      	nop
   b754c:	000ba15c 	.word	0x000ba15c

000b7550 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b7550:	4603      	mov	r3, r0
   b7552:	4a07      	ldr	r2, [pc, #28]	; (b7570 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b7554:	b510      	push	{r4, lr}
   b7556:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b755a:	f101 0210 	add.w	r2, r1, #16
   b755e:	f851 4b04 	ldr.w	r4, [r1], #4
   b7562:	f843 4b04 	str.w	r4, [r3], #4
   b7566:	4291      	cmp	r1, r2
   b7568:	d1f9      	bne.n	b755e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b756a:	780a      	ldrb	r2, [r1, #0]
   b756c:	701a      	strb	r2, [r3, #0]
}
   b756e:	bd10      	pop	{r4, pc}
   b7570:	000ba15c 	.word	0x000ba15c

000b7574 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b7574:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b7576:	2b04      	cmp	r3, #4
   b7578:	d104      	bne.n	b7584 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b757a:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b757c:	3800      	subs	r0, #0
   b757e:	bf18      	it	ne
   b7580:	2001      	movne	r0, #1
   b7582:	4770      	bx	lr
    } else if (version() == 6) {
   b7584:	2b06      	cmp	r3, #6
   b7586:	d107      	bne.n	b7598 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7588:	6843      	ldr	r3, [r0, #4]
   b758a:	b93b      	cbnz	r3, b759c <_ZNK9IPAddresscvbEv+0x28>
   b758c:	6883      	ldr	r3, [r0, #8]
   b758e:	b92b      	cbnz	r3, b759c <_ZNK9IPAddresscvbEv+0x28>
   b7590:	68c3      	ldr	r3, [r0, #12]
   b7592:	b91b      	cbnz	r3, b759c <_ZNK9IPAddresscvbEv+0x28>
   b7594:	6900      	ldr	r0, [r0, #16]
   b7596:	e7f1      	b.n	b757c <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b7598:	2000      	movs	r0, #0
   b759a:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b759c:	2001      	movs	r0, #1
}
   b759e:	4770      	bx	lr

000b75a0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b75a0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b75a2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b75a6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b75aa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b75ae:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b75b2:	2304      	movs	r3, #4
   b75b4:	6041      	str	r1, [r0, #4]
   b75b6:	7503      	strb	r3, [r0, #20]
}
   b75b8:	bd10      	pop	{r4, pc}
	...

000b75bc <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   b75bc:	b513      	push	{r0, r1, r4, lr}
   b75be:	4c04      	ldr	r4, [pc, #16]	; (b75d0 <_ZN9IPAddressC1Ehhhh+0x14>)
   b75c0:	6004      	str	r4, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   b75c2:	f89d 4010 	ldrb.w	r4, [sp, #16]
   b75c6:	9400      	str	r4, [sp, #0]
   b75c8:	f7ff ffea 	bl	b75a0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b75cc:	b002      	add	sp, #8
   b75ce:	bd10      	pop	{r4, pc}
   b75d0:	000ba15c 	.word	0x000ba15c

000b75d4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b75d4:	b507      	push	{r0, r1, r2, lr}
   b75d6:	4b06      	ldr	r3, [pc, #24]	; (b75f0 <_ZN9IPAddressC1EPKh+0x1c>)
   b75d8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b75da:	78cb      	ldrb	r3, [r1, #3]
   b75dc:	9300      	str	r3, [sp, #0]
   b75de:	788b      	ldrb	r3, [r1, #2]
   b75e0:	784a      	ldrb	r2, [r1, #1]
   b75e2:	7809      	ldrb	r1, [r1, #0]
   b75e4:	f7ff ffdc 	bl	b75a0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b75e8:	b003      	add	sp, #12
   b75ea:	f85d fb04 	ldr.w	pc, [sp], #4
   b75ee:	bf00      	nop
   b75f0:	000ba15c 	.word	0x000ba15c

000b75f4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b75f4:	7441      	strb	r1, [r0, #17]
}
   b75f6:	4770      	bx	lr

000b75f8 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b75f8:	4770      	bx	lr

000b75fa <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b75fa:	4770      	bx	lr

000b75fc <_ZN9USBSerial4readEv>:
{
   b75fc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b75fe:	2100      	movs	r1, #0
   b7600:	7c00      	ldrb	r0, [r0, #16]
   b7602:	f7ff fa6f 	bl	b6ae4 <HAL_USB_USART_Receive_Data>
}
   b7606:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b760a:	bd08      	pop	{r3, pc}

000b760c <_ZN9USBSerial4peekEv>:
{
   b760c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b760e:	2101      	movs	r1, #1
   b7610:	7c00      	ldrb	r0, [r0, #16]
   b7612:	f7ff fa67 	bl	b6ae4 <HAL_USB_USART_Receive_Data>
}
   b7616:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b761a:	bd08      	pop	{r3, pc}

000b761c <_ZN9USBSerial17availableForWriteEv>:
{
   b761c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b761e:	7c00      	ldrb	r0, [r0, #16]
   b7620:	f7ff fa58 	bl	b6ad4 <HAL_USB_USART_Available_Data_For_Write>
}
   b7624:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7628:	bd08      	pop	{r3, pc}

000b762a <_ZN9USBSerial9availableEv>:
{
   b762a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b762c:	7c00      	ldrb	r0, [r0, #16]
   b762e:	f7ff fa49 	bl	b6ac4 <HAL_USB_USART_Available_Data>
}
   b7632:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7636:	bd08      	pop	{r3, pc}

000b7638 <_ZN9USBSerial5writeEh>:
{
   b7638:	b513      	push	{r0, r1, r4, lr}
   b763a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b763c:	7c00      	ldrb	r0, [r0, #16]
{
   b763e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7640:	f7ff fa48 	bl	b6ad4 <HAL_USB_USART_Available_Data_For_Write>
   b7644:	2800      	cmp	r0, #0
   b7646:	9901      	ldr	r1, [sp, #4]
   b7648:	dc01      	bgt.n	b764e <_ZN9USBSerial5writeEh+0x16>
   b764a:	7c60      	ldrb	r0, [r4, #17]
   b764c:	b120      	cbz	r0, b7658 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b764e:	7c20      	ldrb	r0, [r4, #16]
   b7650:	f7ff fa50 	bl	b6af4 <HAL_USB_USART_Send_Data>
   b7654:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b7658:	b002      	add	sp, #8
   b765a:	bd10      	pop	{r4, pc}

000b765c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b765c:	7c00      	ldrb	r0, [r0, #16]
   b765e:	f7ff ba51 	b.w	b6b04 <HAL_USB_USART_Flush_Data>

000b7662 <_ZN9USBSerialD0Ev>:
   b7662:	b510      	push	{r4, lr}
   b7664:	2114      	movs	r1, #20
   b7666:	4604      	mov	r4, r0
   b7668:	f7fc fd19 	bl	b409e <_ZdlPvj>
   b766c:	4620      	mov	r0, r4
   b766e:	bd10      	pop	{r4, pc}

000b7670 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b7670:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b7672:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7676:	4604      	mov	r4, r0
   b7678:	4608      	mov	r0, r1
   b767a:	2100      	movs	r1, #0
   b767c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7680:	4b04      	ldr	r3, [pc, #16]	; (b7694 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b7682:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7684:	2301      	movs	r3, #1
  _serial = serial;
   b7686:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7688:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b768a:	4611      	mov	r1, r2
   b768c:	f7ff fa12 	bl	b6ab4 <HAL_USB_USART_Init>
}
   b7690:	4620      	mov	r0, r4
   b7692:	bd10      	pop	{r4, pc}
   b7694:	000ba170 	.word	0x000ba170

000b7698 <_Z19acquireSerialBufferv>:
{
   b7698:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b769a:	2214      	movs	r2, #20
{
   b769c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b769e:	2100      	movs	r1, #0
   b76a0:	f001 fb12 	bl	b8cc8 <memset>
}
   b76a4:	4620      	mov	r0, r4
   b76a6:	bd10      	pop	{r4, pc}

000b76a8 <_Z16_fetch_usbserialv>:
{
   b76a8:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b76aa:	4c0f      	ldr	r4, [pc, #60]	; (b76e8 <_Z16_fetch_usbserialv+0x40>)
{
   b76ac:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b76ae:	a803      	add	r0, sp, #12
   b76b0:	f7ff fff2 	bl	b7698 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b76b4:	7821      	ldrb	r1, [r4, #0]
   b76b6:	f3bf 8f5b 	dmb	ish
   b76ba:	f011 0101 	ands.w	r1, r1, #1
   b76be:	d10f      	bne.n	b76e0 <_Z16_fetch_usbserialv+0x38>
   b76c0:	4620      	mov	r0, r4
   b76c2:	9101      	str	r1, [sp, #4]
   b76c4:	f7fc fcfa 	bl	b40bc <__cxa_guard_acquire>
   b76c8:	9901      	ldr	r1, [sp, #4]
   b76ca:	b148      	cbz	r0, b76e0 <_Z16_fetch_usbserialv+0x38>
   b76cc:	aa03      	add	r2, sp, #12
   b76ce:	4807      	ldr	r0, [pc, #28]	; (b76ec <_Z16_fetch_usbserialv+0x44>)
   b76d0:	f7ff ffce 	bl	b7670 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b76d4:	4620      	mov	r0, r4
   b76d6:	f7fc fcf6 	bl	b40c6 <__cxa_guard_release>
   b76da:	4805      	ldr	r0, [pc, #20]	; (b76f0 <_Z16_fetch_usbserialv+0x48>)
   b76dc:	f001 fad8 	bl	b8c90 <atexit>
	return _usbserial;
}
   b76e0:	4802      	ldr	r0, [pc, #8]	; (b76ec <_Z16_fetch_usbserialv+0x44>)
   b76e2:	b008      	add	sp, #32
   b76e4:	bd10      	pop	{r4, pc}
   b76e6:	bf00      	nop
   b76e8:	2003e700 	.word	0x2003e700
   b76ec:	2003e704 	.word	0x2003e704
   b76f0:	000b75f9 	.word	0x000b75f9

000b76f4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b76f4:	4770      	bx	lr

000b76f6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b76f6:	7441      	strb	r1, [r0, #17]
}
   b76f8:	4770      	bx	lr

000b76fa <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b76fa:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b76fc:	7c00      	ldrb	r0, [r0, #16]
   b76fe:	f7ff f8f9 	bl	b68f4 <hal_usart_available_data_for_write>
}
   b7702:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7706:	bd08      	pop	{r3, pc}

000b7708 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b7708:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b770a:	7c00      	ldrb	r0, [r0, #16]
   b770c:	f7ff f8ca 	bl	b68a4 <hal_usart_available>
}
   b7710:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7714:	bd08      	pop	{r3, pc}

000b7716 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b7716:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b7718:	7c00      	ldrb	r0, [r0, #16]
   b771a:	f7ff f8d3 	bl	b68c4 <hal_usart_peek>
}
   b771e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7722:	bd08      	pop	{r3, pc}

000b7724 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b7724:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b7726:	7c00      	ldrb	r0, [r0, #16]
   b7728:	f7ff f8c4 	bl	b68b4 <hal_usart_read>
}
   b772c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7730:	bd08      	pop	{r3, pc}

000b7732 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b7732:	7c00      	ldrb	r0, [r0, #16]
   b7734:	f7ff b8ce 	b.w	b68d4 <hal_usart_flush>

000b7738 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b7738:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b773a:	7c45      	ldrb	r5, [r0, #17]
{
   b773c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b773e:	b12d      	cbz	r5, b774c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b7740:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b7742:	b003      	add	sp, #12
   b7744:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b7748:	f7ff b8a4 	b.w	b6894 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b774c:	7c00      	ldrb	r0, [r0, #16]
   b774e:	9101      	str	r1, [sp, #4]
   b7750:	f7ff f8d0 	bl	b68f4 <hal_usart_available_data_for_write>
   b7754:	2800      	cmp	r0, #0
   b7756:	9901      	ldr	r1, [sp, #4]
   b7758:	dcf2      	bgt.n	b7740 <_ZN11USARTSerial5writeEh+0x8>
}
   b775a:	4628      	mov	r0, r5
   b775c:	b003      	add	sp, #12
   b775e:	bd30      	pop	{r4, r5, pc}

000b7760 <_ZN11USARTSerialD0Ev>:
   b7760:	b510      	push	{r4, lr}
   b7762:	2114      	movs	r1, #20
   b7764:	4604      	mov	r4, r0
   b7766:	f7fc fc9a 	bl	b409e <_ZdlPvj>
   b776a:	4620      	mov	r0, r4
   b776c:	bd10      	pop	{r4, pc}
	...

000b7770 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b7770:	b510      	push	{r4, lr}
   b7772:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7776:	4604      	mov	r4, r0
   b7778:	4608      	mov	r0, r1
   b777a:	4611      	mov	r1, r2
   b777c:	2200      	movs	r2, #0
   b777e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b7782:	4b04      	ldr	r3, [pc, #16]	; (b7794 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b7784:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7786:	2301      	movs	r3, #1
  _serial = serial;
   b7788:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b778a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b778c:	f7ff f8ba 	bl	b6904 <hal_usart_init_ex>
}
   b7790:	4620      	mov	r0, r4
   b7792:	bd10      	pop	{r4, pc}
   b7794:	000ba1a0 	.word	0x000ba1a0

000b7798 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b7798:	4770      	bx	lr

000b779a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b779a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b779c:	4606      	mov	r6, r0
   b779e:	4615      	mov	r5, r2
   b77a0:	460c      	mov	r4, r1
   b77a2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b77a4:	42bc      	cmp	r4, r7
   b77a6:	d006      	beq.n	b77b6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b77a8:	6833      	ldr	r3, [r6, #0]
   b77aa:	f814 1b01 	ldrb.w	r1, [r4], #1
   b77ae:	689b      	ldr	r3, [r3, #8]
   b77b0:	4630      	mov	r0, r6
   b77b2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b77b4:	e7f6      	b.n	b77a4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b77b6:	4628      	mov	r0, r5
   b77b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b77ba <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b77ba:	7c00      	ldrb	r0, [r0, #16]
   b77bc:	2200      	movs	r2, #0
   b77be:	f7ff b8c9 	b.w	b6954 <hal_i2c_write>

000b77c2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b77c2:	7c00      	ldrb	r0, [r0, #16]
   b77c4:	2100      	movs	r1, #0
   b77c6:	f7ff b8cd 	b.w	b6964 <hal_i2c_available>

000b77ca <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b77ca:	7c00      	ldrb	r0, [r0, #16]
   b77cc:	2100      	movs	r1, #0
   b77ce:	f7ff b8d1 	b.w	b6974 <hal_i2c_read>

000b77d2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b77d2:	7c00      	ldrb	r0, [r0, #16]
   b77d4:	2100      	movs	r1, #0
   b77d6:	f7ff b8d5 	b.w	b6984 <hal_i2c_peek>

000b77da <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b77da:	7c00      	ldrb	r0, [r0, #16]
   b77dc:	2100      	movs	r1, #0
   b77de:	f7ff b8d9 	b.w	b6994 <hal_i2c_flush>

000b77e2 <_ZN7TwoWireD0Ev>:
   b77e2:	b510      	push	{r4, lr}
   b77e4:	2114      	movs	r1, #20
   b77e6:	4604      	mov	r4, r0
   b77e8:	f7fc fc59 	bl	b409e <_ZdlPvj>
   b77ec:	4620      	mov	r0, r4
   b77ee:	bd10      	pop	{r4, pc}

000b77f0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b77f0:	b510      	push	{r4, lr}
   b77f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b77f6:	4604      	mov	r4, r0
   b77f8:	4608      	mov	r0, r1
   b77fa:	2100      	movs	r1, #0
   b77fc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7800:	4b03      	ldr	r3, [pc, #12]	; (b7810 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b7802:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b7804:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b7806:	4611      	mov	r1, r2
   b7808:	f7ff f8d4 	bl	b69b4 <hal_i2c_init>
}
   b780c:	4620      	mov	r0, r4
   b780e:	bd10      	pop	{r4, pc}
   b7810:	000ba1d0 	.word	0x000ba1d0

000b7814 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b7814:	7c00      	ldrb	r0, [r0, #16]
   b7816:	2200      	movs	r2, #0
   b7818:	f7ff b87c 	b.w	b6914 <hal_i2c_set_speed>

000b781c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b781c:	2300      	movs	r3, #0
   b781e:	7c00      	ldrb	r0, [r0, #16]
   b7820:	461a      	mov	r2, r3
   b7822:	4619      	mov	r1, r3
   b7824:	f7ff b87e 	b.w	b6924 <hal_i2c_begin>

000b7828 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b7828:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b782a:	2200      	movs	r2, #0
   b782c:	2314      	movs	r3, #20
   b782e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b7832:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b7836:	780b      	ldrb	r3, [r1, #0]
   b7838:	f88d 3008 	strb.w	r3, [sp, #8]
   b783c:	684b      	ldr	r3, [r1, #4]
   b783e:	9303      	str	r3, [sp, #12]
   b7840:	68cb      	ldr	r3, [r1, #12]
   b7842:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b7844:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b7846:	7a0b      	ldrb	r3, [r1, #8]
   b7848:	9305      	str	r3, [sp, #20]
   b784a:	a901      	add	r1, sp, #4
   b784c:	f7ff f8ba 	bl	b69c4 <hal_i2c_request_ex>
}
   b7850:	b007      	add	sp, #28
   b7852:	f85d fb04 	ldr.w	pc, [sp], #4

000b7856 <_ZN7TwoWire11requestFromEhjh>:
{
   b7856:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b7858:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b785a:	f88d 1000 	strb.w	r1, [sp]
   b785e:	f04f 0164 	mov.w	r1, #100	; 0x64
   b7862:	9103      	str	r1, [sp, #12]
   b7864:	bf18      	it	ne
   b7866:	2301      	movne	r3, #1
   b7868:	4669      	mov	r1, sp
    size_ = size;
   b786a:	9201      	str	r2, [sp, #4]
   b786c:	f88d 3008 	strb.w	r3, [sp, #8]
   b7870:	f7ff ffda 	bl	b7828 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b7874:	b005      	add	sp, #20
   b7876:	f85d fb04 	ldr.w	pc, [sp], #4

000b787a <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b787a:	2301      	movs	r3, #1
   b787c:	f7ff bfeb 	b.w	b7856 <_ZN7TwoWire11requestFromEhjh>

000b7880 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b7880:	7c00      	ldrb	r0, [r0, #16]
   b7882:	2200      	movs	r2, #0
   b7884:	f7ff b856 	b.w	b6934 <hal_i2c_begin_transmission>

000b7888 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b7888:	b2c9      	uxtb	r1, r1
   b788a:	f7ff bff9 	b.w	b7880 <_ZN7TwoWire17beginTransmissionEh>

000b788e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b788e:	7c00      	ldrb	r0, [r0, #16]
   b7890:	2200      	movs	r2, #0
   b7892:	f7ff b857 	b.w	b6944 <hal_i2c_end_transmission>

000b7896 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b7896:	2101      	movs	r1, #1
   b7898:	f7ff bff9 	b.w	b788e <_ZN7TwoWire15endTransmissionEh>

000b789c <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b789c:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b789e:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b78a0:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b78a4:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b78a6:	2201      	movs	r2, #1
   b78a8:	f04f 33ff 	mov.w	r3, #4294967295
   b78ac:	f10d 0107 	add.w	r1, sp, #7
   b78b0:	47a0      	blx	r4
}
   b78b2:	b002      	add	sp, #8
   b78b4:	bd10      	pop	{r4, pc}

000b78b6 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b78b6:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b78b8:	6803      	ldr	r3, [r0, #0]
   b78ba:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b78bc:	f04f 33ff 	mov.w	r3, #4294967295
   b78c0:	46a4      	mov	ip, r4
}
   b78c2:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b78c6:	4760      	bx	ip

000b78c8 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b78c8:	b513      	push	{r0, r1, r4, lr}
   b78ca:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b78cc:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b78ce:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b78d2:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b78d4:	f10d 0107 	add.w	r1, sp, #7
   b78d8:	2201      	movs	r2, #1
   b78da:	47a0      	blx	r4
}
   b78dc:	b002      	add	sp, #8
   b78de:	bd10      	pop	{r4, pc}

000b78e0 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b78e0:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b78e2:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b78e4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b78e8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b78ec:	429a      	cmp	r2, r3
int TCPClient::read() {
   b78ee:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b78f0:	d008      	beq.n	b7904 <_ZN9TCPClient4readEv+0x24>
   b78f2:	6963      	ldr	r3, [r4, #20]
   b78f4:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b78f8:	1c51      	adds	r1, r2, #1
   b78fa:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b78fe:	4413      	add	r3, r2
   b7900:	7918      	ldrb	r0, [r3, #4]
}
   b7902:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7904:	6803      	ldr	r3, [r0, #0]
   b7906:	691b      	ldr	r3, [r3, #16]
   b7908:	4798      	blx	r3
   b790a:	2800      	cmp	r0, #0
   b790c:	d1f1      	bne.n	b78f2 <_ZN9TCPClient4readEv+0x12>
   b790e:	f04f 30ff 	mov.w	r0, #4294967295
   b7912:	e7f6      	b.n	b7902 <_ZN9TCPClient4readEv+0x22>

000b7914 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b7914:	4770      	bx	lr

000b7916 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b7916:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b7918:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b791a:	43c0      	mvns	r0, r0
   b791c:	0fc0      	lsrs	r0, r0, #31
   b791e:	4770      	bx	lr

000b7920 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7920:	4770      	bx	lr
	...

000b7924 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7924:	4b06      	ldr	r3, [pc, #24]	; (b7940 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b7926:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7928:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b792a:	f100 040c 	add.w	r4, r0, #12
	    ||
   b792e:	d005      	beq.n	b793c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7930:	4608      	mov	r0, r1
   b7932:	f000 fca5 	bl	b8280 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b7936:	2800      	cmp	r0, #0
   b7938:	bf08      	it	eq
   b793a:	2400      	moveq	r4, #0
      }
   b793c:	4620      	mov	r0, r4
   b793e:	bd10      	pop	{r4, pc}
   b7940:	000ba12c 	.word	0x000ba12c

000b7944 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7944:	b510      	push	{r4, lr}
   b7946:	21ac      	movs	r1, #172	; 0xac
   b7948:	4604      	mov	r4, r0
   b794a:	f7fc fba8 	bl	b409e <_ZdlPvj>
   b794e:	4620      	mov	r0, r4
   b7950:	bd10      	pop	{r4, pc}

000b7952 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b7952:	21ac      	movs	r1, #172	; 0xac
   b7954:	f7fc bba3 	b.w	b409e <_ZdlPvj>

000b7958 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b7958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b795c:	f04f 0800 	mov.w	r8, #0
   b7960:	b086      	sub	sp, #24
   b7962:	461c      	mov	r4, r3
   b7964:	f8c0 8004 	str.w	r8, [r0, #4]
   b7968:	4605      	mov	r5, r0
   b796a:	460e      	mov	r6, r1
   b796c:	4617      	mov	r7, r2
    struct timeval tv = {};
   b796e:	4641      	mov	r1, r8
   b7970:	2210      	movs	r2, #16
   b7972:	a802      	add	r0, sp, #8
   b7974:	f001 f9a8 	bl	b8cc8 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b7978:	1c63      	adds	r3, r4, #1
   b797a:	d009      	beq.n	b7990 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b797c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7980:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b7984:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b7988:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b798c:	435c      	muls	r4, r3
   b798e:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b7990:	6968      	ldr	r0, [r5, #20]
   b7992:	2310      	movs	r3, #16
   b7994:	9300      	str	r3, [sp, #0]
   b7996:	6800      	ldr	r0, [r0, #0]
   b7998:	ab02      	add	r3, sp, #8
   b799a:	f241 0205 	movw	r2, #4101	; 0x1005
   b799e:	f640 71ff 	movw	r1, #4095	; 0xfff
   b79a2:	f7ff f817 	bl	b69d4 <sock_setsockopt>
    if (ret < 0) {
   b79a6:	2800      	cmp	r0, #0
   b79a8:	da07      	bge.n	b79ba <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b79aa:	f7ff f987 	bl	b6cbc <__errno>
   b79ae:	6803      	ldr	r3, [r0, #0]
   b79b0:	606b      	str	r3, [r5, #4]
        return 0;
   b79b2:	2000      	movs	r0, #0
}
   b79b4:	b006      	add	sp, #24
   b79b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b79ba:	6968      	ldr	r0, [r5, #20]
   b79bc:	2300      	movs	r3, #0
   b79be:	6800      	ldr	r0, [r0, #0]
   b79c0:	463a      	mov	r2, r7
   b79c2:	4631      	mov	r1, r6
   b79c4:	f7ff f826 	bl	b6a14 <sock_send>
    if (ret < 0) {
   b79c8:	1e03      	subs	r3, r0, #0
   b79ca:	dbee      	blt.n	b79aa <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b79cc:	4618      	mov	r0, r3
   b79ce:	e7f1      	b.n	b79b4 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b79d0 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b79d0:	b530      	push	{r4, r5, lr}
   b79d2:	b087      	sub	sp, #28
   b79d4:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b79d6:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b79d8:	4668      	mov	r0, sp
   b79da:	f7ff fdfb 	bl	b75d4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b79de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b79e0:	3404      	adds	r4, #4
   b79e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b79e4:	682b      	ldr	r3, [r5, #0]
   b79e6:	7023      	strb	r3, [r4, #0]
    }
   b79e8:	b007      	add	sp, #28
   b79ea:	bd30      	pop	{r4, r5, pc}

000b79ec <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b79ec:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b79ee:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b79f0:	4b05      	ldr	r3, [pc, #20]	; (b7a08 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b79f2:	4604      	mov	r4, r0
   b79f4:	358c      	adds	r5, #140	; 0x8c
   b79f6:	f844 3b04 	str.w	r3, [r4], #4
   b79fa:	4606      	mov	r6, r0
   b79fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b79fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7a00:	682b      	ldr	r3, [r5, #0]
   b7a02:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b7a04:	4630      	mov	r0, r6
   b7a06:	bd70      	pop	{r4, r5, r6, pc}
   b7a08:	000ba15c 	.word	0x000ba15c

000b7a0c <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7a0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7a10:	4698      	mov	r8, r3
    stop();
   b7a12:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7a14:	b093      	sub	sp, #76	; 0x4c
   b7a16:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b7a18:	2400      	movs	r4, #0
    stop();
   b7a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7a1c:	4606      	mov	r6, r0
   b7a1e:	4617      	mov	r7, r2
    stop();
   b7a20:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7a22:	4628      	mov	r0, r5
   b7a24:	466b      	mov	r3, sp
   b7a26:	4622      	mov	r2, r4
   b7a28:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b7a2a:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7a2c:	f7fe fe9a 	bl	b6764 <netdb_getaddrinfo>
   b7a30:	4605      	mov	r5, r0
   b7a32:	2800      	cmp	r0, #0
   b7a34:	d163      	bne.n	b7afe <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b7a36:	9b00      	ldr	r3, [sp, #0]
   b7a38:	2b00      	cmp	r3, #0
   b7a3a:	d04b      	beq.n	b7ad4 <_ZN9TCPClient7connectEPKctm+0xc8>
   b7a3c:	695b      	ldr	r3, [r3, #20]
   b7a3e:	2b00      	cmp	r3, #0
   b7a40:	d048      	beq.n	b7ad4 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b7a42:	a806      	add	r0, sp, #24
   b7a44:	f7ff fd76 	bl	b7534 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b7a48:	9b00      	ldr	r3, [sp, #0]
   b7a4a:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b7a4c:	7863      	ldrb	r3, [r4, #1]
   b7a4e:	2b02      	cmp	r3, #2
   b7a50:	d104      	bne.n	b7a5c <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b7a52:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b7a54:	a806      	add	r0, sp, #24
   b7a56:	f7ff ffbb 	bl	b79d0 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b7a5a:	e026      	b.n	b7aaa <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b7a5c:	2b0a      	cmp	r3, #10
   b7a5e:	d124      	bne.n	b7aaa <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b7a60:	2211      	movs	r2, #17
   b7a62:	4629      	mov	r1, r5
   b7a64:	a801      	add	r0, sp, #4
   b7a66:	f001 f92f 	bl	b8cc8 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b7a6a:	68a3      	ldr	r3, [r4, #8]
   b7a6c:	2b00      	cmp	r3, #0
   b7a6e:	d038      	beq.n	b7ae2 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b7a70:	f104 0308 	add.w	r3, r4, #8
   b7a74:	f10d 0c04 	add.w	ip, sp, #4
   b7a78:	3418      	adds	r4, #24
   b7a7a:	6818      	ldr	r0, [r3, #0]
   b7a7c:	6859      	ldr	r1, [r3, #4]
   b7a7e:	4662      	mov	r2, ip
   b7a80:	c203      	stmia	r2!, {r0, r1}
   b7a82:	3308      	adds	r3, #8
   b7a84:	42a3      	cmp	r3, r4
   b7a86:	4694      	mov	ip, r2
   b7a88:	d1f7      	bne.n	b7a7a <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b7a8a:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b7a8c:	a901      	add	r1, sp, #4
   b7a8e:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b7a90:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b7a94:	f7ff fd5c 	bl	b7550 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7a98:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b7a9c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b7aa0:	ac07      	add	r4, sp, #28
   b7aa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7aa4:	f8dc 3000 	ldr.w	r3, [ip]
   b7aa8:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b7aaa:	a806      	add	r0, sp, #24
   b7aac:	f7ff fd62 	bl	b7574 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b7ab0:	b180      	cbz	r0, b7ad4 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b7ab2:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b7ab4:	ad07      	add	r5, sp, #28
   b7ab6:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b7aba:	4b12      	ldr	r3, [pc, #72]	; (b7b04 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b7abc:	930c      	str	r3, [sp, #48]	; 0x30
   b7abe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7ac0:	ac0d      	add	r4, sp, #52	; 0x34
   b7ac2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7ac4:	682b      	ldr	r3, [r5, #0]
   b7ac6:	7023      	strb	r3, [r4, #0]
   b7ac8:	463a      	mov	r2, r7
   b7aca:	4643      	mov	r3, r8
   b7acc:	a90c      	add	r1, sp, #48	; 0x30
   b7ace:	4630      	mov	r0, r6
   b7ad0:	47c8      	blx	r9
   b7ad2:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b7ad4:	9800      	ldr	r0, [sp, #0]
   b7ad6:	f7fe fe3d 	bl	b6754 <netdb_freeaddrinfo>
}
   b7ada:	4628      	mov	r0, r5
   b7adc:	b013      	add	sp, #76	; 0x4c
   b7ade:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b7ae2:	68e3      	ldr	r3, [r4, #12]
   b7ae4:	2b00      	cmp	r3, #0
   b7ae6:	d1c3      	bne.n	b7a70 <_ZN9TCPClient7connectEPKctm+0x64>
   b7ae8:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b7aec:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b7af0:	f7fe fec0 	bl	b6874 <inet_htonl>
   b7af4:	4581      	cmp	r9, r0
   b7af6:	d1bb      	bne.n	b7a70 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b7af8:	f104 0114 	add.w	r1, r4, #20
   b7afc:	e7aa      	b.n	b7a54 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7afe:	4625      	mov	r5, r4
   b7b00:	e7e8      	b.n	b7ad4 <_ZN9TCPClient7connectEPKctm+0xc8>
   b7b02:	bf00      	nop
   b7b04:	000ba15c 	.word	0x000ba15c

000b7b08 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b7b08:	b538      	push	{r3, r4, r5, lr}
   b7b0a:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b7b0c:	681a      	ldr	r2, [r3, #0]
   b7b0e:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b7b10:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b7b12:	da10      	bge.n	b7b36 <_ZN9TCPClient9connectedEv+0x2e>
   b7b14:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7b18:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7b1c:	429a      	cmp	r2, r3
   b7b1e:	d10a      	bne.n	b7b36 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b7b20:	6803      	ldr	r3, [r0, #0]
   b7b22:	691b      	ldr	r3, [r3, #16]
   b7b24:	4798      	blx	r3
        if (!rv) {
   b7b26:	4604      	mov	r4, r0
   b7b28:	b928      	cbnz	r0, b7b36 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b7b2a:	682b      	ldr	r3, [r5, #0]
   b7b2c:	4628      	mov	r0, r5
   b7b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7b30:	4798      	blx	r3
        rv = available();
   b7b32:	4620      	mov	r0, r4
}
   b7b34:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b7b36:	2001      	movs	r0, #1
   b7b38:	e7fc      	b.n	b7b34 <_ZN9TCPClient9connectedEv+0x2c>

000b7b3a <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b7b3a:	b510      	push	{r4, lr}
   b7b3c:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7b3e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7b42:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7b46:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b7b48:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7b4a:	d005      	beq.n	b7b58 <_ZN9TCPClient4peekEv+0x1e>
   b7b4c:	6963      	ldr	r3, [r4, #20]
   b7b4e:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b7b52:	4413      	add	r3, r2
   b7b54:	7918      	ldrb	r0, [r3, #4]
}
   b7b56:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7b58:	6803      	ldr	r3, [r0, #0]
   b7b5a:	691b      	ldr	r3, [r3, #16]
   b7b5c:	4798      	blx	r3
   b7b5e:	2800      	cmp	r0, #0
   b7b60:	d1f4      	bne.n	b7b4c <_ZN9TCPClient4peekEv+0x12>
   b7b62:	f04f 30ff 	mov.w	r0, #4294967295
   b7b66:	e7f6      	b.n	b7b56 <_ZN9TCPClient4peekEv+0x1c>

000b7b68 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b7b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7b6a:	6943      	ldr	r3, [r0, #20]
   b7b6c:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b7b6e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7b72:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7b76:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b7b78:	4605      	mov	r5, r0
   b7b7a:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b7b7c:	d016      	beq.n	b7bac <_ZN9TCPClient4readEPhj+0x44>
   b7b7e:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b7b80:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b7b84:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b7b88:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b7b8a:	42bc      	cmp	r4, r7
   b7b8c:	bf28      	it	cs
   b7b8e:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b7b90:	3304      	adds	r3, #4
   b7b92:	4622      	mov	r2, r4
   b7b94:	4419      	add	r1, r3
   b7b96:	4630      	mov	r0, r6
   b7b98:	f001 f888 	bl	b8cac <memcpy>
   b7b9c:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b7b9e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b7ba2:	4423      	add	r3, r4
   b7ba4:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b7ba8:	4620      	mov	r0, r4
   b7baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b7bac:	6803      	ldr	r3, [r0, #0]
   b7bae:	691b      	ldr	r3, [r3, #16]
   b7bb0:	4798      	blx	r3
   b7bb2:	2800      	cmp	r0, #0
   b7bb4:	d1e3      	bne.n	b7b7e <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b7bb6:	f04f 34ff 	mov.w	r4, #4294967295
   b7bba:	e7f5      	b.n	b7ba8 <_ZN9TCPClient4readEPhj+0x40>

000b7bbc <_ZN9TCPClient12flush_bufferEv>:
   b7bbc:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b7bbe:	2300      	movs	r3, #0
   b7bc0:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b7bc4:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b7bc6:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b7bca:	4770      	bx	lr

000b7bcc <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7bd0:	461f      	mov	r7, r3
    stop();
   b7bd2:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7bd4:	460c      	mov	r4, r1
    stop();
   b7bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7bd8:	b08a      	sub	sp, #40	; 0x28
   b7bda:	4605      	mov	r5, r0
   b7bdc:	4616      	mov	r6, r2
    stop();
   b7bde:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b7be0:	7d23      	ldrb	r3, [r4, #20]
   b7be2:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b7be6:	2b04      	cmp	r3, #4
   b7be8:	bf0c      	ite	eq
   b7bea:	2002      	moveq	r0, #2
   b7bec:	200a      	movne	r0, #10
   b7bee:	2206      	movs	r2, #6
   b7bf0:	2101      	movs	r1, #1
   b7bf2:	f7fe ff17 	bl	b6a24 <sock_socket>
   b7bf6:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b7bfa:	696b      	ldr	r3, [r5, #20]
   b7bfc:	681b      	ldr	r3, [r3, #0]
   b7bfe:	2b00      	cmp	r3, #0
   b7c00:	da08      	bge.n	b7c14 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b7c02:	682b      	ldr	r3, [r5, #0]
   b7c04:	4628      	mov	r0, r5
   b7c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7c08:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b7c0a:	4798      	blx	r3
}
   b7c0c:	4620      	mov	r0, r4
   b7c0e:	b00a      	add	sp, #40	; 0x28
   b7c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b7c14:	4628      	mov	r0, r5
   b7c16:	f7ff ffd1 	bl	b7bbc <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b7c1a:	b1b7      	cbz	r7, b7c4a <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b7c1c:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7c1e:	a903      	add	r1, sp, #12
   b7c20:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b7c22:	9303      	str	r3, [sp, #12]
   b7c24:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7c28:	f7fe fde4 	bl	b67f4 <if_index_to_name>
   b7c2c:	2800      	cmp	r0, #0
   b7c2e:	d1e8      	bne.n	b7c02 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b7c30:	6968      	ldr	r0, [r5, #20]
   b7c32:	2306      	movs	r3, #6
   b7c34:	9300      	str	r3, [sp, #0]
   b7c36:	6800      	ldr	r0, [r0, #0]
   b7c38:	ab03      	add	r3, sp, #12
   b7c3a:	f241 020b 	movw	r2, #4107	; 0x100b
   b7c3e:	f640 71ff 	movw	r1, #4095	; 0xfff
   b7c42:	f7fe fec7 	bl	b69d4 <sock_setsockopt>
   b7c46:	2800      	cmp	r0, #0
   b7c48:	d1db      	bne.n	b7c02 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b7c4a:	221c      	movs	r2, #28
   b7c4c:	2100      	movs	r1, #0
   b7c4e:	a803      	add	r0, sp, #12
   b7c50:	f001 f83a 	bl	b8cc8 <memset>
    if (ip.version() == 4) {
   b7c54:	7d23      	ldrb	r3, [r4, #20]
   b7c56:	2b04      	cmp	r3, #4
   b7c58:	d11d      	bne.n	b7c96 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b7c5a:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b7c5e:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b7c60:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b7c64:	f7fe fe0e 	bl	b6884 <inet_htons>
   b7c68:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b7c6c:	6860      	ldr	r0, [r4, #4]
   b7c6e:	f7fe fe01 	bl	b6874 <inet_htonl>
   b7c72:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b7c74:	696b      	ldr	r3, [r5, #20]
   b7c76:	221c      	movs	r2, #28
   b7c78:	6818      	ldr	r0, [r3, #0]
   b7c7a:	a903      	add	r1, sp, #12
   b7c7c:	f7fe feba 	bl	b69f4 <sock_connect>
   b7c80:	2800      	cmp	r0, #0
   b7c82:	d1be      	bne.n	b7c02 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b7c84:	3404      	adds	r4, #4
   b7c86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7c88:	696d      	ldr	r5, [r5, #20]
   b7c8a:	358c      	adds	r5, #140	; 0x8c
   b7c8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7c8e:	6823      	ldr	r3, [r4, #0]
   b7c90:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b7c92:	2401      	movs	r4, #1
   b7c94:	e7ba      	b.n	b7c0c <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b7c96:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b7c9a:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b7c9c:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b7ca0:	f7fe fdf0 	bl	b6884 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b7ca4:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b7ca6:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b7caa:	1d23      	adds	r3, r4, #4
   b7cac:	f104 0714 	add.w	r7, r4, #20
   b7cb0:	6818      	ldr	r0, [r3, #0]
   b7cb2:	6859      	ldr	r1, [r3, #4]
   b7cb4:	4632      	mov	r2, r6
   b7cb6:	c203      	stmia	r2!, {r0, r1}
   b7cb8:	3308      	adds	r3, #8
   b7cba:	42bb      	cmp	r3, r7
   b7cbc:	4616      	mov	r6, r2
   b7cbe:	d1f7      	bne.n	b7cb0 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b7cc0:	e7d8      	b.n	b7c74 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b7cc4 <_ZN9TCPClient9availableEv>:
{
   b7cc4:	b530      	push	{r4, r5, lr}
   b7cc6:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b7cc8:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b7ccc:	b08b      	sub	sp, #44	; 0x2c
   b7cce:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b7cd0:	b12b      	cbz	r3, b7cde <_ZN9TCPClient9availableEv+0x1a>
   b7cd2:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b7cd6:	429a      	cmp	r2, r3
   b7cd8:	d101      	bne.n	b7cde <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b7cda:	f7ff ff6f 	bl	b7bbc <_ZN9TCPClient12flush_bufferEv>
   b7cde:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b7ce0:	6808      	ldr	r0, [r1, #0]
   b7ce2:	2800      	cmp	r0, #0
   b7ce4:	db18      	blt.n	b7d18 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b7ce6:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b7cea:	2d7f      	cmp	r5, #127	; 0x7f
   b7cec:	d814      	bhi.n	b7d18 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b7cee:	3104      	adds	r1, #4
   b7cf0:	2308      	movs	r3, #8
   b7cf2:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b7cf6:	4429      	add	r1, r5
   b7cf8:	f7fe fe84 	bl	b6a04 <sock_recv>
            if (ret > 0) {
   b7cfc:	2800      	cmp	r0, #0
   b7cfe:	dd13      	ble.n	b7d28 <_ZN9TCPClient9availableEv+0x64>
   b7d00:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b7d02:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7d06:	b90a      	cbnz	r2, b7d0c <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b7d08:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b7d0c:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b7d0e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7d12:	4410      	add	r0, r2
   b7d14:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b7d18:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b7d1a:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b7d1e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b7d22:	1ac0      	subs	r0, r0, r3
   b7d24:	b00b      	add	sp, #44	; 0x2c
   b7d26:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b7d28:	f7fe ffc8 	bl	b6cbc <__errno>
   b7d2c:	6803      	ldr	r3, [r0, #0]
   b7d2e:	2b0b      	cmp	r3, #11
   b7d30:	d0f2      	beq.n	b7d18 <_ZN9TCPClient9availableEv+0x54>
   b7d32:	f7fe ffc3 	bl	b6cbc <__errno>
   b7d36:	6803      	ldr	r3, [r0, #0]
   b7d38:	2b0b      	cmp	r3, #11
   b7d3a:	d0ed      	beq.n	b7d18 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b7d3c:	2320      	movs	r3, #32
   b7d3e:	2500      	movs	r5, #0
   b7d40:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b7d44:	f7fe ffba 	bl	b6cbc <__errno>
   b7d48:	6803      	ldr	r3, [r0, #0]
   b7d4a:	9301      	str	r3, [sp, #4]
   b7d4c:	4b08      	ldr	r3, [pc, #32]	; (b7d70 <_ZN9TCPClient9availableEv+0xac>)
   b7d4e:	4909      	ldr	r1, [pc, #36]	; (b7d74 <_ZN9TCPClient9availableEv+0xb0>)
   b7d50:	9300      	str	r3, [sp, #0]
   b7d52:	aa02      	add	r2, sp, #8
   b7d54:	462b      	mov	r3, r5
   b7d56:	2032      	movs	r0, #50	; 0x32
   b7d58:	f7fe fee4 	bl	b6b24 <log_message>
                    sock_close(d_->sock);
   b7d5c:	6963      	ldr	r3, [r4, #20]
   b7d5e:	6818      	ldr	r0, [r3, #0]
   b7d60:	f7fe fe40 	bl	b69e4 <sock_close>
   b7d64:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b7d66:	f04f 32ff 	mov.w	r2, #4294967295
   b7d6a:	601a      	str	r2, [r3, #0]
   b7d6c:	e7d4      	b.n	b7d18 <_ZN9TCPClient9availableEv+0x54>
   b7d6e:	bf00      	nop
   b7d70:	000ba1f7 	.word	0x000ba1f7
   b7d74:	000ba1f0 	.word	0x000ba1f0

000b7d78 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b7d78:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b7d7a:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b7d7c:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b7d7e:	6818      	ldr	r0, [r3, #0]
   b7d80:	2800      	cmp	r0, #0
   b7d82:	db01      	blt.n	b7d88 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b7d84:	f7fe fe2e 	bl	b69e4 <sock_close>
   b7d88:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b7d8a:	f04f 32ff 	mov.w	r2, #4294967295
   b7d8e:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b7d90:	6960      	ldr	r0, [r4, #20]
   b7d92:	2211      	movs	r2, #17
   b7d94:	2100      	movs	r1, #0
   b7d96:	308c      	adds	r0, #140	; 0x8c
   b7d98:	f000 ff96 	bl	b8cc8 <memset>
    flush_buffer();
   b7d9c:	4620      	mov	r0, r4
}
   b7d9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b7da2:	f7ff bf0b 	b.w	b7bbc <_ZN9TCPClient12flush_bufferEv>

000b7da6 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b7da6:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b7da8:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b7daa:	4604      	mov	r4, r0
          total(0) {
   b7dac:	6001      	str	r1, [r0, #0]
   b7dae:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b7db2:	3088      	adds	r0, #136	; 0x88
   b7db4:	f7ff fbbe 	bl	b7534 <_ZN9IPAddressC1Ev>
}
   b7db8:	4620      	mov	r0, r4
   b7dba:	bd10      	pop	{r4, pc}

000b7dbc <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b7dbc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7dbe:	2300      	movs	r3, #0
   b7dc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b7dc4:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b7dc8:	4a0e      	ldr	r2, [pc, #56]	; (b7e04 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b7dca:	6103      	str	r3, [r0, #16]
   b7dcc:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7dce:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b7dd0:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b7dd2:	20ac      	movs	r0, #172	; 0xac
   b7dd4:	9101      	str	r1, [sp, #4]
   b7dd6:	f7fc f95e 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b7dda:	1e05      	subs	r5, r0, #0
   b7ddc:	f105 060c 	add.w	r6, r5, #12
   b7de0:	d008      	beq.n	b7df4 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b7de2:	2301      	movs	r3, #1
   b7de4:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b7de8:	4b07      	ldr	r3, [pc, #28]	; (b7e08 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b7dea:	9901      	ldr	r1, [sp, #4]
   b7dec:	602b      	str	r3, [r5, #0]
   b7dee:	4630      	mov	r0, r6
   b7df0:	f7ff ffd9 	bl	b7da6 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b7df4:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b7df6:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b7dfa:	f7ff fedf 	bl	b7bbc <_ZN9TCPClient12flush_bufferEv>
}
   b7dfe:	b002      	add	sp, #8
   b7e00:	bd70      	pop	{r4, r5, r6, pc}
   b7e02:	bf00      	nop
   b7e04:	000ba22c 	.word	0x000ba22c
   b7e08:	000ba210 	.word	0x000ba210

000b7e0c <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b7e0c:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b7e0e:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   b7e12:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b7e14:	f7ff ffd2 	bl	b7dbc <_ZN9TCPClientC1Ei>
}
   b7e18:	4620      	mov	r0, r4
   b7e1a:	bd10      	pop	{r4, pc}

000b7e1c <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b7e1c:	b510      	push	{r4, lr}
   b7e1e:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b7e20:	6800      	ldr	r0, [r0, #0]
   b7e22:	2800      	cmp	r0, #0
   b7e24:	db01      	blt.n	b7e2a <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b7e26:	f7fe fddd 	bl	b69e4 <sock_close>
    }
}
   b7e2a:	4620      	mov	r0, r4
   b7e2c:	bd10      	pop	{r4, pc}

000b7e2e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b7e2e:	300c      	adds	r0, #12
   b7e30:	f7ff bff4 	b.w	b7e1c <_ZN9TCPClient4DataD1Ev>

000b7e34 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b7e34:	2200      	movs	r2, #0
   b7e36:	6840      	ldr	r0, [r0, #4]
   b7e38:	4611      	mov	r1, r2
   b7e3a:	f7fe bebf 	b.w	b6bbc <network_ready>

000b7e3e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7e3e:	2200      	movs	r2, #0
   b7e40:	6840      	ldr	r0, [r0, #4]
   b7e42:	4611      	mov	r1, r2
   b7e44:	f7fe beda 	b.w	b6bfc <network_listening>

000b7e48 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7e48:	2200      	movs	r2, #0
   b7e4a:	6840      	ldr	r0, [r0, #4]
   b7e4c:	4611      	mov	r1, r2
   b7e4e:	f7fe bee5 	b.w	b6c1c <network_get_listen_timeout>

000b7e52 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7e52:	6840      	ldr	r0, [r0, #4]
   b7e54:	2200      	movs	r2, #0
   b7e56:	f7fe bed9 	b.w	b6c0c <network_set_listen_timeout>

000b7e5a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7e5a:	6840      	ldr	r0, [r0, #4]
   b7e5c:	2200      	movs	r2, #0
   b7e5e:	f081 0101 	eor.w	r1, r1, #1
   b7e62:	f7fe bec3 	b.w	b6bec <network_listen>

000b7e66 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7e66:	2300      	movs	r3, #0
   b7e68:	6840      	ldr	r0, [r0, #4]
   b7e6a:	461a      	mov	r2, r3
   b7e6c:	4619      	mov	r1, r3
   b7e6e:	f7fe beb5 	b.w	b6bdc <network_off>

000b7e72 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7e72:	2300      	movs	r3, #0
   b7e74:	6840      	ldr	r0, [r0, #4]
   b7e76:	461a      	mov	r2, r3
   b7e78:	4619      	mov	r1, r3
   b7e7a:	f7fe bea7 	b.w	b6bcc <network_on>

000b7e7e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7e7e:	2200      	movs	r2, #0
   b7e80:	6840      	ldr	r0, [r0, #4]
   b7e82:	4611      	mov	r1, r2
   b7e84:	f7fe be8a 	b.w	b6b9c <network_connecting>

000b7e88 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7e88:	6840      	ldr	r0, [r0, #4]
   b7e8a:	2200      	movs	r2, #0
   b7e8c:	2102      	movs	r1, #2
   b7e8e:	f7fe be8d 	b.w	b6bac <network_disconnect>

000b7e92 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7e92:	2300      	movs	r3, #0
   b7e94:	6840      	ldr	r0, [r0, #4]
   b7e96:	461a      	mov	r2, r3
   b7e98:	f7fe be78 	b.w	b6b8c <network_connect>

000b7e9c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b7e9c:	4b02      	ldr	r3, [pc, #8]	; (b7ea8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b7e9e:	2204      	movs	r2, #4
   b7ea0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b7ea2:	4a02      	ldr	r2, [pc, #8]	; (b7eac <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b7ea4:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b7ea6:	4770      	bx	lr
   b7ea8:	2003e718 	.word	0x2003e718
   b7eac:	000ba278 	.word	0x000ba278

000b7eb0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b7eb0:	2300      	movs	r3, #0
   b7eb2:	6840      	ldr	r0, [r0, #4]
   b7eb4:	461a      	mov	r2, r3
   b7eb6:	f7fe be69 	b.w	b6b8c <network_connect>

000b7eba <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b7eba:	6840      	ldr	r0, [r0, #4]
   b7ebc:	2200      	movs	r2, #0
   b7ebe:	2102      	movs	r1, #2
   b7ec0:	f7fe be74 	b.w	b6bac <network_disconnect>

000b7ec4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b7ec4:	2200      	movs	r2, #0
   b7ec6:	6840      	ldr	r0, [r0, #4]
   b7ec8:	4611      	mov	r1, r2
   b7eca:	f7fe be67 	b.w	b6b9c <network_connecting>

000b7ece <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b7ece:	2200      	movs	r2, #0
   b7ed0:	6840      	ldr	r0, [r0, #4]
   b7ed2:	4611      	mov	r1, r2
   b7ed4:	f7fe be72 	b.w	b6bbc <network_ready>

000b7ed8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b7ed8:	2300      	movs	r3, #0
   b7eda:	6840      	ldr	r0, [r0, #4]
   b7edc:	461a      	mov	r2, r3
   b7ede:	4619      	mov	r1, r3
   b7ee0:	f7fe be74 	b.w	b6bcc <network_on>

000b7ee4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b7ee4:	2300      	movs	r3, #0
   b7ee6:	6840      	ldr	r0, [r0, #4]
   b7ee8:	461a      	mov	r2, r3
   b7eea:	4619      	mov	r1, r3
   b7eec:	f7fe be76 	b.w	b6bdc <network_off>

000b7ef0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b7ef0:	6840      	ldr	r0, [r0, #4]
   b7ef2:	2100      	movs	r1, #0
   b7ef4:	f7fe be9a 	b.w	b6c2c <network_is_on>

000b7ef8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b7ef8:	6840      	ldr	r0, [r0, #4]
   b7efa:	2100      	movs	r1, #0
   b7efc:	f7fe be9e 	b.w	b6c3c <network_is_off>

000b7f00 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b7f00:	6840      	ldr	r0, [r0, #4]
   b7f02:	2200      	movs	r2, #0
   b7f04:	f081 0101 	eor.w	r1, r1, #1
   b7f08:	f7fe be70 	b.w	b6bec <network_listen>

000b7f0c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b7f0c:	6840      	ldr	r0, [r0, #4]
   b7f0e:	2200      	movs	r2, #0
   b7f10:	f7fe be7c 	b.w	b6c0c <network_set_listen_timeout>

000b7f14 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b7f14:	2200      	movs	r2, #0
   b7f16:	6840      	ldr	r0, [r0, #4]
   b7f18:	4611      	mov	r1, r2
   b7f1a:	f7fe be7f 	b.w	b6c1c <network_get_listen_timeout>

000b7f1e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b7f1e:	2200      	movs	r2, #0
   b7f20:	6840      	ldr	r0, [r0, #4]
   b7f22:	4611      	mov	r1, r2
   b7f24:	f7fe be6a 	b.w	b6bfc <network_listening>

000b7f28 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b7f28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7f2c:	b095      	sub	sp, #84	; 0x54
   b7f2e:	4614      	mov	r4, r2
   b7f30:	460d      	mov	r5, r1
   b7f32:	4607      	mov	r7, r0
    IPAddress addr;
   b7f34:	f7ff fafe 	bl	b7534 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b7f38:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b7f3a:	221c      	movs	r2, #28
   b7f3c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b7f3e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b7f40:	f000 fec2 	bl	b8cc8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b7f44:	2340      	movs	r3, #64	; 0x40
   b7f46:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b7f48:	4620      	mov	r0, r4
   b7f4a:	466b      	mov	r3, sp
   b7f4c:	aa0c      	add	r2, sp, #48	; 0x30
   b7f4e:	2100      	movs	r1, #0
   b7f50:	f7fe fc08 	bl	b6764 <netdb_getaddrinfo>
    if (!r) {
   b7f54:	4604      	mov	r4, r0
   b7f56:	2800      	cmp	r0, #0
   b7f58:	d14b      	bne.n	b7ff2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b7f5a:	4602      	mov	r2, r0
   b7f5c:	2101      	movs	r1, #1
   b7f5e:	6868      	ldr	r0, [r5, #4]
   b7f60:	f7fe fe2c 	bl	b6bbc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7f64:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b7f66:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7f68:	4622      	mov	r2, r4
   b7f6a:	6868      	ldr	r0, [r5, #4]
   b7f6c:	f7fe fe26 	bl	b6bbc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7f70:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7f72:	4681      	mov	r9, r0
        bool ok = false;
   b7f74:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7f76:	2e00      	cmp	r6, #0
   b7f78:	d03b      	beq.n	b7ff2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b7f7a:	2900      	cmp	r1, #0
   b7f7c:	d139      	bne.n	b7ff2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b7f7e:	6873      	ldr	r3, [r6, #4]
   b7f80:	2b02      	cmp	r3, #2
   b7f82:	d003      	beq.n	b7f8c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b7f84:	2b0a      	cmp	r3, #10
   b7f86:	d011      	beq.n	b7fac <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7f88:	69f6      	ldr	r6, [r6, #28]
   b7f8a:	e7f4      	b.n	b7f76 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b7f8c:	f1b8 0f00 	cmp.w	r8, #0
   b7f90:	d0fa      	beq.n	b7f88 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b7f92:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b7f94:	a806      	add	r0, sp, #24
   b7f96:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b7f98:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b7f9a:	f7ff fb1b 	bl	b75d4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b7f9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7fa0:	1d3c      	adds	r4, r7, #4
   b7fa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7fa4:	682b      	ldr	r3, [r5, #0]
   b7fa6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7fa8:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b7faa:	e7ed      	b.n	b7f88 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b7fac:	f1b9 0f00 	cmp.w	r9, #0
   b7fb0:	d0ea      	beq.n	b7f88 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b7fb2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b7fb4:	2210      	movs	r2, #16
   b7fb6:	a801      	add	r0, sp, #4
   b7fb8:	f000 fe86 	bl	b8cc8 <memset>
                    a.v = 6;
   b7fbc:	2306      	movs	r3, #6
   b7fbe:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b7fc2:	ad01      	add	r5, sp, #4
   b7fc4:	f104 0308 	add.w	r3, r4, #8
   b7fc8:	3418      	adds	r4, #24
   b7fca:	6818      	ldr	r0, [r3, #0]
   b7fcc:	6859      	ldr	r1, [r3, #4]
   b7fce:	462a      	mov	r2, r5
   b7fd0:	c203      	stmia	r2!, {r0, r1}
   b7fd2:	3308      	adds	r3, #8
   b7fd4:	42a3      	cmp	r3, r4
   b7fd6:	4615      	mov	r5, r2
   b7fd8:	d1f7      	bne.n	b7fca <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b7fda:	a901      	add	r1, sp, #4
   b7fdc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b7fde:	ad07      	add	r5, sp, #28
   b7fe0:	f7ff fab6 	bl	b7550 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7fe4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7fe6:	1d3c      	adds	r4, r7, #4
   b7fe8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7fea:	682b      	ldr	r3, [r5, #0]
   b7fec:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7fee:	4649      	mov	r1, r9
   b7ff0:	e7ca      	b.n	b7f88 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b7ff2:	9800      	ldr	r0, [sp, #0]
   b7ff4:	f7fe fbae 	bl	b6754 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b7ff8:	4638      	mov	r0, r7
   b7ffa:	b015      	add	sp, #84	; 0x54
   b7ffc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b8000 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b8000:	4b02      	ldr	r3, [pc, #8]	; (b800c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b8002:	4a03      	ldr	r2, [pc, #12]	; (b8010 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b8004:	601a      	str	r2, [r3, #0]
   b8006:	2200      	movs	r2, #0
   b8008:	605a      	str	r2, [r3, #4]

} // spark
   b800a:	4770      	bx	lr
   b800c:	2003e720 	.word	0x2003e720
   b8010:	000ba2b4 	.word	0x000ba2b4

000b8014 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b8014:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b8016:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b8018:	d902      	bls.n	b8020 <pinAvailable+0xc>
    return false;
   b801a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b801c:	b002      	add	sp, #8
   b801e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b8020:	f1a0 030b 	sub.w	r3, r0, #11
   b8024:	2b02      	cmp	r3, #2
   b8026:	d81a      	bhi.n	b805e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b8028:	4c17      	ldr	r4, [pc, #92]	; (b8088 <pinAvailable+0x74>)
   b802a:	7821      	ldrb	r1, [r4, #0]
   b802c:	f3bf 8f5b 	dmb	ish
   b8030:	f011 0101 	ands.w	r1, r1, #1
   b8034:	d10b      	bne.n	b804e <pinAvailable+0x3a>
   b8036:	4620      	mov	r0, r4
   b8038:	9101      	str	r1, [sp, #4]
   b803a:	f7fc f83f 	bl	b40bc <__cxa_guard_acquire>
   b803e:	9901      	ldr	r1, [sp, #4]
   b8040:	b128      	cbz	r0, b804e <pinAvailable+0x3a>
   b8042:	4812      	ldr	r0, [pc, #72]	; (b808c <pinAvailable+0x78>)
   b8044:	f7fe fe96 	bl	b6d74 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b8048:	4620      	mov	r0, r4
   b804a:	f7fc f83c 	bl	b40c6 <__cxa_guard_release>
   b804e:	4b0f      	ldr	r3, [pc, #60]	; (b808c <pinAvailable+0x78>)
   b8050:	7818      	ldrb	r0, [r3, #0]
   b8052:	f7fe fd07 	bl	b6a64 <hal_spi_is_enabled>
   b8056:	2800      	cmp	r0, #0
   b8058:	d1df      	bne.n	b801a <pinAvailable+0x6>
  return true; // 'pin' is available
   b805a:	2001      	movs	r0, #1
   b805c:	e7de      	b.n	b801c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b805e:	2801      	cmp	r0, #1
   b8060:	d809      	bhi.n	b8076 <pinAvailable+0x62>
   b8062:	f000 f8e7 	bl	b8234 <_Z19__fetch_global_Wirev>
   b8066:	2100      	movs	r1, #0
   b8068:	7c00      	ldrb	r0, [r0, #16]
   b806a:	f7fe fc9b 	bl	b69a4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b806e:	f080 0001 	eor.w	r0, r0, #1
   b8072:	b2c0      	uxtb	r0, r0
   b8074:	e7d2      	b.n	b801c <pinAvailable+0x8>
   b8076:	3809      	subs	r0, #9
   b8078:	2801      	cmp	r0, #1
   b807a:	d8ee      	bhi.n	b805a <pinAvailable+0x46>
   b807c:	f000 f89e 	bl	b81bc <_Z22__fetch_global_Serial1v>
   b8080:	7c00      	ldrb	r0, [r0, #16]
   b8082:	f7fe fc2f 	bl	b68e4 <hal_usart_is_enabled>
   b8086:	e7f2      	b.n	b806e <pinAvailable+0x5a>
   b8088:	2003e6b8 	.word	0x2003e6b8
   b808c:	2003e6bc 	.word	0x2003e6bc

000b8090 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b8090:	2823      	cmp	r0, #35	; 0x23
{
   b8092:	b538      	push	{r3, r4, r5, lr}
   b8094:	4604      	mov	r4, r0
   b8096:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b8098:	d80a      	bhi.n	b80b0 <pinMode+0x20>
   b809a:	29ff      	cmp	r1, #255	; 0xff
   b809c:	d008      	beq.n	b80b0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b809e:	f7ff ffb9 	bl	b8014 <pinAvailable>
   b80a2:	b128      	cbz	r0, b80b0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b80a4:	4629      	mov	r1, r5
   b80a6:	4620      	mov	r0, r4
}
   b80a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b80ac:	f7fe bb6a 	b.w	b6784 <HAL_Pin_Mode>
}
   b80b0:	bd38      	pop	{r3, r4, r5, pc}

000b80b2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b80b2:	b538      	push	{r3, r4, r5, lr}
   b80b4:	4604      	mov	r4, r0
   b80b6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b80b8:	f7fe fb6c 	bl	b6794 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b80bc:	28ff      	cmp	r0, #255	; 0xff
   b80be:	d010      	beq.n	b80e2 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b80c0:	2806      	cmp	r0, #6
   b80c2:	d804      	bhi.n	b80ce <digitalWrite+0x1c>
   b80c4:	234d      	movs	r3, #77	; 0x4d
   b80c6:	fa23 f000 	lsr.w	r0, r3, r0
   b80ca:	07c3      	lsls	r3, r0, #31
   b80cc:	d409      	bmi.n	b80e2 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b80ce:	4620      	mov	r0, r4
   b80d0:	f7ff ffa0 	bl	b8014 <pinAvailable>
   b80d4:	b128      	cbz	r0, b80e2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b80d6:	4629      	mov	r1, r5
   b80d8:	4620      	mov	r0, r4
}
   b80da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b80de:	f7fe bb61 	b.w	b67a4 <HAL_GPIO_Write>
}
   b80e2:	bd38      	pop	{r3, r4, r5, pc}

000b80e4 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b80e4:	b510      	push	{r4, lr}
   b80e6:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b80e8:	f7fe fb54 	bl	b6794 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b80ec:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b80ee:	b2db      	uxtb	r3, r3
   b80f0:	2b01      	cmp	r3, #1
   b80f2:	d908      	bls.n	b8106 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b80f4:	4620      	mov	r0, r4
   b80f6:	f7ff ff8d 	bl	b8014 <pinAvailable>
   b80fa:	b120      	cbz	r0, b8106 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b80fc:	4620      	mov	r0, r4
}
   b80fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b8102:	f7fe bb57 	b.w	b67b4 <HAL_GPIO_Read>
}
   b8106:	2000      	movs	r0, #0
   b8108:	bd10      	pop	{r4, pc}

000b810a <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b810a:	280d      	cmp	r0, #13
{
   b810c:	b510      	push	{r4, lr}
   b810e:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b8110:	bf9c      	itt	ls
   b8112:	340e      	addls	r4, #14
   b8114:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b8116:	4620      	mov	r0, r4
   b8118:	f7ff ff7c 	bl	b8014 <pinAvailable>
   b811c:	b150      	cbz	r0, b8134 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b811e:	2103      	movs	r1, #3
   b8120:	4620      	mov	r0, r4
   b8122:	f7fe fb27 	bl	b6774 <HAL_Validate_Pin_Function>
   b8126:	2803      	cmp	r0, #3
   b8128:	d104      	bne.n	b8134 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b812a:	4620      	mov	r0, r4
}
   b812c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b8130:	f7fe bb50 	b.w	b67d4 <hal_adc_read>
}
   b8134:	2000      	movs	r0, #0
   b8136:	bd10      	pop	{r4, pc}

000b8138 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   b8138:	b538      	push	{r3, r4, r5, lr}
   b813a:	4604      	mov	r4, r0
   b813c:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   b813e:	f7ff ff69 	bl	b8014 <pinAvailable>
   b8142:	b1f0      	cbz	r0, b8182 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   b8144:	2104      	movs	r1, #4
   b8146:	4620      	mov	r0, r4
   b8148:	f7fe fb14 	bl	b6774 <HAL_Validate_Pin_Function>
   b814c:	2804      	cmp	r0, #4
   b814e:	d105      	bne.n	b815c <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   b8150:	b2a9      	uxth	r1, r5
   b8152:	4620      	mov	r0, r4
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
   b8154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
   b8158:	f7fe bb34 	b.w	b67c4 <HAL_DAC_Write>
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   b815c:	2102      	movs	r1, #2
   b815e:	4620      	mov	r0, r4
   b8160:	f7fe fb08 	bl	b6774 <HAL_Validate_Pin_Function>
   b8164:	2802      	cmp	r0, #2
   b8166:	d10c      	bne.n	b8182 <_Z11analogWritetm+0x4a>
        PinMode mode = HAL_Get_Pin_Mode(pin);
   b8168:	4620      	mov	r0, r4
   b816a:	f7fe fb13 	bl	b6794 <HAL_Get_Pin_Mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   b816e:	2801      	cmp	r0, #1
   b8170:	d001      	beq.n	b8176 <_Z11analogWritetm+0x3e>
   b8172:	2804      	cmp	r0, #4
   b8174:	d105      	bne.n	b8182 <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
   b8176:	4629      	mov	r1, r5
   b8178:	4620      	mov	r0, r4
}
   b817a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
   b817e:	f7fe bb31 	b.w	b67e4 <hal_pwm_write_ext>
}
   b8182:	bd38      	pop	{r3, r4, r5, pc}

000b8184 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8184:	4770      	bx	lr
	...

000b8188 <_Z20acquireSerial1Bufferv>:
{
   b8188:	b538      	push	{r3, r4, r5, lr}
   b818a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b818c:	2514      	movs	r5, #20
   b818e:	462a      	mov	r2, r5
   b8190:	2100      	movs	r1, #0
   b8192:	f000 fd99 	bl	b8cc8 <memset>
   b8196:	8025      	strh	r5, [r4, #0]
   b8198:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b819a:	4907      	ldr	r1, [pc, #28]	; (b81b8 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b819c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b819e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b81a0:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b81a2:	f000 f86b 	bl	b827c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b81a6:	4904      	ldr	r1, [pc, #16]	; (b81b8 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b81a8:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b81aa:	4628      	mov	r0, r5
   b81ac:	f000 f866 	bl	b827c <_ZnajRKSt9nothrow_t>
    };
   b81b0:	60e0      	str	r0, [r4, #12]
}
   b81b2:	4620      	mov	r0, r4
   b81b4:	bd38      	pop	{r3, r4, r5, pc}
   b81b6:	bf00      	nop
   b81b8:	000ba2e8 	.word	0x000ba2e8

000b81bc <_Z22__fetch_global_Serial1v>:
{
   b81bc:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b81be:	4d0e      	ldr	r5, [pc, #56]	; (b81f8 <_Z22__fetch_global_Serial1v+0x3c>)
   b81c0:	7829      	ldrb	r1, [r5, #0]
   b81c2:	f3bf 8f5b 	dmb	ish
   b81c6:	f011 0401 	ands.w	r4, r1, #1
{
   b81ca:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b81cc:	d111      	bne.n	b81f2 <_Z22__fetch_global_Serial1v+0x36>
   b81ce:	4628      	mov	r0, r5
   b81d0:	f7fb ff74 	bl	b40bc <__cxa_guard_acquire>
   b81d4:	b168      	cbz	r0, b81f2 <_Z22__fetch_global_Serial1v+0x36>
   b81d6:	a801      	add	r0, sp, #4
   b81d8:	f7ff ffd6 	bl	b8188 <_Z20acquireSerial1Bufferv>
   b81dc:	aa01      	add	r2, sp, #4
   b81de:	4621      	mov	r1, r4
   b81e0:	4806      	ldr	r0, [pc, #24]	; (b81fc <_Z22__fetch_global_Serial1v+0x40>)
   b81e2:	f7ff fac5 	bl	b7770 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b81e6:	4628      	mov	r0, r5
   b81e8:	f7fb ff6d 	bl	b40c6 <__cxa_guard_release>
   b81ec:	4804      	ldr	r0, [pc, #16]	; (b8200 <_Z22__fetch_global_Serial1v+0x44>)
   b81ee:	f000 fd4f 	bl	b8c90 <atexit>
    return serial1;
}
   b81f2:	4802      	ldr	r0, [pc, #8]	; (b81fc <_Z22__fetch_global_Serial1v+0x40>)
   b81f4:	b007      	add	sp, #28
   b81f6:	bd30      	pop	{r4, r5, pc}
   b81f8:	2003e728 	.word	0x2003e728
   b81fc:	2003e72c 	.word	0x2003e72c
   b8200:	000b8185 	.word	0x000b8185

000b8204 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8204:	4770      	bx	lr
	...

000b8208 <_Z17acquireWireBufferv>:
{
   b8208:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b820a:	2520      	movs	r5, #32
   b820c:	2314      	movs	r3, #20
{
   b820e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b8210:	6003      	str	r3, [r0, #0]
   b8212:	6085      	str	r5, [r0, #8]
   b8214:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b8216:	4906      	ldr	r1, [pc, #24]	; (b8230 <_Z17acquireWireBufferv+0x28>)
   b8218:	4628      	mov	r0, r5
   b821a:	f000 f82f 	bl	b827c <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b821e:	4904      	ldr	r1, [pc, #16]	; (b8230 <_Z17acquireWireBufferv+0x28>)
	};
   b8220:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b8222:	4628      	mov	r0, r5
   b8224:	f000 f82a 	bl	b827c <_ZnajRKSt9nothrow_t>
	};
   b8228:	60e0      	str	r0, [r4, #12]
}
   b822a:	4620      	mov	r0, r4
   b822c:	bd38      	pop	{r3, r4, r5, pc}
   b822e:	bf00      	nop
   b8230:	000ba2e8 	.word	0x000ba2e8

000b8234 <_Z19__fetch_global_Wirev>:
{
   b8234:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8236:	4d0e      	ldr	r5, [pc, #56]	; (b8270 <_Z19__fetch_global_Wirev+0x3c>)
   b8238:	7829      	ldrb	r1, [r5, #0]
   b823a:	f3bf 8f5b 	dmb	ish
   b823e:	f011 0401 	ands.w	r4, r1, #1
{
   b8242:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8244:	d111      	bne.n	b826a <_Z19__fetch_global_Wirev+0x36>
   b8246:	4628      	mov	r0, r5
   b8248:	f7fb ff38 	bl	b40bc <__cxa_guard_acquire>
   b824c:	b168      	cbz	r0, b826a <_Z19__fetch_global_Wirev+0x36>
   b824e:	a801      	add	r0, sp, #4
   b8250:	f7ff ffda 	bl	b8208 <_Z17acquireWireBufferv>
   b8254:	aa01      	add	r2, sp, #4
   b8256:	4621      	mov	r1, r4
   b8258:	4806      	ldr	r0, [pc, #24]	; (b8274 <_Z19__fetch_global_Wirev+0x40>)
   b825a:	f7ff fac9 	bl	b77f0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b825e:	4628      	mov	r0, r5
   b8260:	f7fb ff31 	bl	b40c6 <__cxa_guard_release>
   b8264:	4804      	ldr	r0, [pc, #16]	; (b8278 <_Z19__fetch_global_Wirev+0x44>)
   b8266:	f000 fd13 	bl	b8c90 <atexit>
	return wire;
}
   b826a:	4802      	ldr	r0, [pc, #8]	; (b8274 <_Z19__fetch_global_Wirev+0x40>)
   b826c:	b007      	add	sp, #28
   b826e:	bd30      	pop	{r4, r5, pc}
   b8270:	2003e744 	.word	0x2003e744
   b8274:	2003e748 	.word	0x2003e748
   b8278:	000b8205 	.word	0x000b8205

000b827c <_ZnajRKSt9nothrow_t>:
   b827c:	f7fb bf0d 	b.w	b409a <_Znaj>

000b8280 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b8280:	4901      	ldr	r1, [pc, #4]	; (b8288 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b8282:	f000 b8f9 	b.w	b8478 <_ZNKSt9type_infoeqERKS_>
   b8286:	bf00      	nop
   b8288:	000ba304 	.word	0x000ba304

000b828c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b828c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b828e:	2400      	movs	r4, #0
   b8290:	2310      	movs	r3, #16
   b8292:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b8296:	6803      	ldr	r3, [r0, #0]
   b8298:	4615      	mov	r5, r2
   b829a:	699e      	ldr	r6, [r3, #24]
   b829c:	6812      	ldr	r2, [r2, #0]
   b829e:	466b      	mov	r3, sp
   b82a0:	e9cd 4400 	strd	r4, r4, [sp]
   b82a4:	47b0      	blx	r6
   b82a6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b82aa:	f003 0306 	and.w	r3, r3, #6
   b82ae:	2b06      	cmp	r3, #6
   b82b0:	bf03      	ittte	eq
   b82b2:	9b00      	ldreq	r3, [sp, #0]
   b82b4:	602b      	streq	r3, [r5, #0]
   b82b6:	2001      	moveq	r0, #1
   b82b8:	4620      	movne	r0, r4
   b82ba:	b004      	add	sp, #16
   b82bc:	bd70      	pop	{r4, r5, r6, pc}

000b82be <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b82be:	9800      	ldr	r0, [sp, #0]
   b82c0:	4290      	cmp	r0, r2
   b82c2:	bf14      	ite	ne
   b82c4:	2001      	movne	r0, #1
   b82c6:	2006      	moveq	r0, #6
   b82c8:	4770      	bx	lr
	...

000b82cc <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b82cc:	b510      	push	{r4, lr}
   b82ce:	4b03      	ldr	r3, [pc, #12]	; (b82dc <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b82d0:	6003      	str	r3, [r0, #0]
   b82d2:	4604      	mov	r4, r0
   b82d4:	f000 f8cd 	bl	b8472 <_ZNSt9type_infoD1Ev>
   b82d8:	4620      	mov	r0, r4
   b82da:	bd10      	pop	{r4, pc}
   b82dc:	000ba344 	.word	0x000ba344

000b82e0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b82e0:	b510      	push	{r4, lr}
   b82e2:	4604      	mov	r4, r0
   b82e4:	f7ff fff2 	bl	b82cc <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b82e8:	4620      	mov	r0, r4
   b82ea:	2108      	movs	r1, #8
   b82ec:	f7fb fed7 	bl	b409e <_ZdlPvj>
   b82f0:	4620      	mov	r0, r4
   b82f2:	bd10      	pop	{r4, pc}

000b82f4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b82f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b82f8:	461f      	mov	r7, r3
   b82fa:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b82fe:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b8302:	4598      	cmp	r8, r3
   b8304:	4606      	mov	r6, r0
   b8306:	4615      	mov	r5, r2
   b8308:	d107      	bne.n	b831a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b830a:	9907      	ldr	r1, [sp, #28]
   b830c:	f000 f8b4 	bl	b8478 <_ZNKSt9type_infoeqERKS_>
   b8310:	b118      	cbz	r0, b831a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b8312:	7165      	strb	r5, [r4, #5]
   b8314:	2000      	movs	r0, #0
   b8316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b831a:	4639      	mov	r1, r7
   b831c:	4630      	mov	r0, r6
   b831e:	f000 f8ab 	bl	b8478 <_ZNKSt9type_infoeqERKS_>
   b8322:	2800      	cmp	r0, #0
   b8324:	d0f6      	beq.n	b8314 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b8326:	2301      	movs	r3, #1
   b8328:	f8c4 8000 	str.w	r8, [r4]
   b832c:	7125      	strb	r5, [r4, #4]
   b832e:	71a3      	strb	r3, [r4, #6]
   b8330:	e7f0      	b.n	b8314 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b8332 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b8332:	b538      	push	{r3, r4, r5, lr}
   b8334:	4615      	mov	r5, r2
   b8336:	461c      	mov	r4, r3
   b8338:	f000 f89e 	bl	b8478 <_ZNKSt9type_infoeqERKS_>
   b833c:	b120      	cbz	r0, b8348 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b833e:	2308      	movs	r3, #8
   b8340:	60e3      	str	r3, [r4, #12]
   b8342:	2306      	movs	r3, #6
   b8344:	6025      	str	r5, [r4, #0]
   b8346:	7123      	strb	r3, [r4, #4]
   b8348:	bd38      	pop	{r3, r4, r5, pc}

000b834a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b834a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b834c:	4605      	mov	r5, r0
   b834e:	460c      	mov	r4, r1
   b8350:	9201      	str	r2, [sp, #4]
   b8352:	461e      	mov	r6, r3
   b8354:	f000 f890 	bl	b8478 <_ZNKSt9type_infoeqERKS_>
   b8358:	b950      	cbnz	r0, b8370 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b835a:	2e03      	cmp	r6, #3
   b835c:	d808      	bhi.n	b8370 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b835e:	6823      	ldr	r3, [r4, #0]
   b8360:	9a01      	ldr	r2, [sp, #4]
   b8362:	695b      	ldr	r3, [r3, #20]
   b8364:	4629      	mov	r1, r5
   b8366:	4620      	mov	r0, r4
   b8368:	b002      	add	sp, #8
   b836a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b836e:	4718      	bx	r3
   b8370:	b002      	add	sp, #8
   b8372:	bd70      	pop	{r4, r5, r6, pc}

000b8374 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b8374:	b510      	push	{r4, lr}
   b8376:	4b03      	ldr	r3, [pc, #12]	; (b8384 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b8378:	6003      	str	r3, [r0, #0]
   b837a:	4604      	mov	r4, r0
   b837c:	f7ff ffa6 	bl	b82cc <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b8380:	4620      	mov	r0, r4
   b8382:	bd10      	pop	{r4, pc}
   b8384:	000ba3a4 	.word	0x000ba3a4

000b8388 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b8388:	b510      	push	{r4, lr}
   b838a:	4604      	mov	r4, r0
   b838c:	f7ff fff2 	bl	b8374 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b8390:	4620      	mov	r0, r4
   b8392:	210c      	movs	r1, #12
   b8394:	f7fb fe83 	bl	b409e <_ZdlPvj>
   b8398:	4620      	mov	r0, r4
   b839a:	bd10      	pop	{r4, pc}

000b839c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b839c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b839e:	9f08      	ldr	r7, [sp, #32]
   b83a0:	4297      	cmp	r7, r2
   b83a2:	4605      	mov	r5, r0
   b83a4:	460e      	mov	r6, r1
   b83a6:	4614      	mov	r4, r2
   b83a8:	d00a      	beq.n	b83c0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b83aa:	68a8      	ldr	r0, [r5, #8]
   b83ac:	6802      	ldr	r2, [r0, #0]
   b83ae:	9708      	str	r7, [sp, #32]
   b83b0:	6a15      	ldr	r5, [r2, #32]
   b83b2:	4631      	mov	r1, r6
   b83b4:	4622      	mov	r2, r4
   b83b6:	46ac      	mov	ip, r5
   b83b8:	b003      	add	sp, #12
   b83ba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b83be:	4760      	bx	ip
   b83c0:	4619      	mov	r1, r3
   b83c2:	9301      	str	r3, [sp, #4]
   b83c4:	f000 f858 	bl	b8478 <_ZNKSt9type_infoeqERKS_>
   b83c8:	9b01      	ldr	r3, [sp, #4]
   b83ca:	2800      	cmp	r0, #0
   b83cc:	d0ed      	beq.n	b83aa <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b83ce:	2006      	movs	r0, #6
   b83d0:	b003      	add	sp, #12
   b83d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b83d4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b83d4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b83d8:	460d      	mov	r5, r1
   b83da:	4619      	mov	r1, r3
   b83dc:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b83e0:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b83e4:	4681      	mov	r9, r0
   b83e6:	4617      	mov	r7, r2
   b83e8:	4698      	mov	r8, r3
   b83ea:	f000 f845 	bl	b8478 <_ZNKSt9type_infoeqERKS_>
   b83ee:	b190      	cbz	r0, b8416 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b83f0:	2d00      	cmp	r5, #0
   b83f2:	6034      	str	r4, [r6, #0]
   b83f4:	7137      	strb	r7, [r6, #4]
   b83f6:	db09      	blt.n	b840c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b83f8:	1961      	adds	r1, r4, r5
   b83fa:	458a      	cmp	sl, r1
   b83fc:	bf0c      	ite	eq
   b83fe:	2106      	moveq	r1, #6
   b8400:	2101      	movne	r1, #1
   b8402:	71b1      	strb	r1, [r6, #6]
   b8404:	2000      	movs	r0, #0
   b8406:	b001      	add	sp, #4
   b8408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b840c:	3502      	adds	r5, #2
   b840e:	d1f9      	bne.n	b8404 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8410:	2301      	movs	r3, #1
   b8412:	71b3      	strb	r3, [r6, #6]
   b8414:	e7f6      	b.n	b8404 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8416:	4554      	cmp	r4, sl
   b8418:	d106      	bne.n	b8428 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b841a:	4659      	mov	r1, fp
   b841c:	4648      	mov	r0, r9
   b841e:	f000 f82b 	bl	b8478 <_ZNKSt9type_infoeqERKS_>
   b8422:	b108      	cbz	r0, b8428 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b8424:	7177      	strb	r7, [r6, #5]
   b8426:	e7ed      	b.n	b8404 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8428:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b842c:	6803      	ldr	r3, [r0, #0]
   b842e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b8432:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b8436:	69dc      	ldr	r4, [r3, #28]
   b8438:	463a      	mov	r2, r7
   b843a:	4643      	mov	r3, r8
   b843c:	4629      	mov	r1, r5
   b843e:	46a4      	mov	ip, r4
   b8440:	b001      	add	sp, #4
   b8442:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8446:	4760      	bx	ip

000b8448 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b8448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b844c:	4607      	mov	r7, r0
   b844e:	460c      	mov	r4, r1
   b8450:	4615      	mov	r5, r2
   b8452:	461e      	mov	r6, r3
   b8454:	f7ff ff6d 	bl	b8332 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b8458:	b948      	cbnz	r0, b846e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b845a:	68b8      	ldr	r0, [r7, #8]
   b845c:	6803      	ldr	r3, [r0, #0]
   b845e:	699f      	ldr	r7, [r3, #24]
   b8460:	462a      	mov	r2, r5
   b8462:	4633      	mov	r3, r6
   b8464:	4621      	mov	r1, r4
   b8466:	46bc      	mov	ip, r7
   b8468:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b846c:	4760      	bx	ip
   b846e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b8472 <_ZNSt9type_infoD1Ev>:
   b8472:	4770      	bx	lr

000b8474 <_ZNKSt9type_info14__is_pointer_pEv>:
   b8474:	2000      	movs	r0, #0
   b8476:	4770      	bx	lr

000b8478 <_ZNKSt9type_infoeqERKS_>:
   b8478:	4281      	cmp	r1, r0
   b847a:	b508      	push	{r3, lr}
   b847c:	d00e      	beq.n	b849c <_ZNKSt9type_infoeqERKS_+0x24>
   b847e:	6840      	ldr	r0, [r0, #4]
   b8480:	7803      	ldrb	r3, [r0, #0]
   b8482:	2b2a      	cmp	r3, #42	; 0x2a
   b8484:	d00c      	beq.n	b84a0 <_ZNKSt9type_infoeqERKS_+0x28>
   b8486:	6849      	ldr	r1, [r1, #4]
   b8488:	780b      	ldrb	r3, [r1, #0]
   b848a:	2b2a      	cmp	r3, #42	; 0x2a
   b848c:	bf08      	it	eq
   b848e:	3101      	addeq	r1, #1
   b8490:	f000 fc50 	bl	b8d34 <strcmp>
   b8494:	fab0 f080 	clz	r0, r0
   b8498:	0940      	lsrs	r0, r0, #5
   b849a:	bd08      	pop	{r3, pc}
   b849c:	2001      	movs	r0, #1
   b849e:	e7fc      	b.n	b849a <_ZNKSt9type_infoeqERKS_+0x22>
   b84a0:	2000      	movs	r0, #0
   b84a2:	e7fa      	b.n	b849a <_ZNKSt9type_infoeqERKS_+0x22>

000b84a4 <__aeabi_drsub>:
   b84a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b84a8:	e002      	b.n	b84b0 <__adddf3>
   b84aa:	bf00      	nop

000b84ac <__aeabi_dsub>:
   b84ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b84b0 <__adddf3>:
   b84b0:	b530      	push	{r4, r5, lr}
   b84b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b84b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b84ba:	ea94 0f05 	teq	r4, r5
   b84be:	bf08      	it	eq
   b84c0:	ea90 0f02 	teqeq	r0, r2
   b84c4:	bf1f      	itttt	ne
   b84c6:	ea54 0c00 	orrsne.w	ip, r4, r0
   b84ca:	ea55 0c02 	orrsne.w	ip, r5, r2
   b84ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b84d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b84d6:	f000 80e2 	beq.w	b869e <__adddf3+0x1ee>
   b84da:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b84de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b84e2:	bfb8      	it	lt
   b84e4:	426d      	neglt	r5, r5
   b84e6:	dd0c      	ble.n	b8502 <__adddf3+0x52>
   b84e8:	442c      	add	r4, r5
   b84ea:	ea80 0202 	eor.w	r2, r0, r2
   b84ee:	ea81 0303 	eor.w	r3, r1, r3
   b84f2:	ea82 0000 	eor.w	r0, r2, r0
   b84f6:	ea83 0101 	eor.w	r1, r3, r1
   b84fa:	ea80 0202 	eor.w	r2, r0, r2
   b84fe:	ea81 0303 	eor.w	r3, r1, r3
   b8502:	2d36      	cmp	r5, #54	; 0x36
   b8504:	bf88      	it	hi
   b8506:	bd30      	pophi	{r4, r5, pc}
   b8508:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b850c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b8510:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b8514:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b8518:	d002      	beq.n	b8520 <__adddf3+0x70>
   b851a:	4240      	negs	r0, r0
   b851c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b8520:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b8524:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b8528:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b852c:	d002      	beq.n	b8534 <__adddf3+0x84>
   b852e:	4252      	negs	r2, r2
   b8530:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b8534:	ea94 0f05 	teq	r4, r5
   b8538:	f000 80a7 	beq.w	b868a <__adddf3+0x1da>
   b853c:	f1a4 0401 	sub.w	r4, r4, #1
   b8540:	f1d5 0e20 	rsbs	lr, r5, #32
   b8544:	db0d      	blt.n	b8562 <__adddf3+0xb2>
   b8546:	fa02 fc0e 	lsl.w	ip, r2, lr
   b854a:	fa22 f205 	lsr.w	r2, r2, r5
   b854e:	1880      	adds	r0, r0, r2
   b8550:	f141 0100 	adc.w	r1, r1, #0
   b8554:	fa03 f20e 	lsl.w	r2, r3, lr
   b8558:	1880      	adds	r0, r0, r2
   b855a:	fa43 f305 	asr.w	r3, r3, r5
   b855e:	4159      	adcs	r1, r3
   b8560:	e00e      	b.n	b8580 <__adddf3+0xd0>
   b8562:	f1a5 0520 	sub.w	r5, r5, #32
   b8566:	f10e 0e20 	add.w	lr, lr, #32
   b856a:	2a01      	cmp	r2, #1
   b856c:	fa03 fc0e 	lsl.w	ip, r3, lr
   b8570:	bf28      	it	cs
   b8572:	f04c 0c02 	orrcs.w	ip, ip, #2
   b8576:	fa43 f305 	asr.w	r3, r3, r5
   b857a:	18c0      	adds	r0, r0, r3
   b857c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b8580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b8584:	d507      	bpl.n	b8596 <__adddf3+0xe6>
   b8586:	f04f 0e00 	mov.w	lr, #0
   b858a:	f1dc 0c00 	rsbs	ip, ip, #0
   b858e:	eb7e 0000 	sbcs.w	r0, lr, r0
   b8592:	eb6e 0101 	sbc.w	r1, lr, r1
   b8596:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b859a:	d31b      	bcc.n	b85d4 <__adddf3+0x124>
   b859c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b85a0:	d30c      	bcc.n	b85bc <__adddf3+0x10c>
   b85a2:	0849      	lsrs	r1, r1, #1
   b85a4:	ea5f 0030 	movs.w	r0, r0, rrx
   b85a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b85ac:	f104 0401 	add.w	r4, r4, #1
   b85b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b85b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b85b8:	f080 809a 	bcs.w	b86f0 <__adddf3+0x240>
   b85bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b85c0:	bf08      	it	eq
   b85c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b85c6:	f150 0000 	adcs.w	r0, r0, #0
   b85ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b85ce:	ea41 0105 	orr.w	r1, r1, r5
   b85d2:	bd30      	pop	{r4, r5, pc}
   b85d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b85d8:	4140      	adcs	r0, r0
   b85da:	eb41 0101 	adc.w	r1, r1, r1
   b85de:	3c01      	subs	r4, #1
   b85e0:	bf28      	it	cs
   b85e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b85e6:	d2e9      	bcs.n	b85bc <__adddf3+0x10c>
   b85e8:	f091 0f00 	teq	r1, #0
   b85ec:	bf04      	itt	eq
   b85ee:	4601      	moveq	r1, r0
   b85f0:	2000      	moveq	r0, #0
   b85f2:	fab1 f381 	clz	r3, r1
   b85f6:	bf08      	it	eq
   b85f8:	3320      	addeq	r3, #32
   b85fa:	f1a3 030b 	sub.w	r3, r3, #11
   b85fe:	f1b3 0220 	subs.w	r2, r3, #32
   b8602:	da0c      	bge.n	b861e <__adddf3+0x16e>
   b8604:	320c      	adds	r2, #12
   b8606:	dd08      	ble.n	b861a <__adddf3+0x16a>
   b8608:	f102 0c14 	add.w	ip, r2, #20
   b860c:	f1c2 020c 	rsb	r2, r2, #12
   b8610:	fa01 f00c 	lsl.w	r0, r1, ip
   b8614:	fa21 f102 	lsr.w	r1, r1, r2
   b8618:	e00c      	b.n	b8634 <__adddf3+0x184>
   b861a:	f102 0214 	add.w	r2, r2, #20
   b861e:	bfd8      	it	le
   b8620:	f1c2 0c20 	rsble	ip, r2, #32
   b8624:	fa01 f102 	lsl.w	r1, r1, r2
   b8628:	fa20 fc0c 	lsr.w	ip, r0, ip
   b862c:	bfdc      	itt	le
   b862e:	ea41 010c 	orrle.w	r1, r1, ip
   b8632:	4090      	lslle	r0, r2
   b8634:	1ae4      	subs	r4, r4, r3
   b8636:	bfa2      	ittt	ge
   b8638:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b863c:	4329      	orrge	r1, r5
   b863e:	bd30      	popge	{r4, r5, pc}
   b8640:	ea6f 0404 	mvn.w	r4, r4
   b8644:	3c1f      	subs	r4, #31
   b8646:	da1c      	bge.n	b8682 <__adddf3+0x1d2>
   b8648:	340c      	adds	r4, #12
   b864a:	dc0e      	bgt.n	b866a <__adddf3+0x1ba>
   b864c:	f104 0414 	add.w	r4, r4, #20
   b8650:	f1c4 0220 	rsb	r2, r4, #32
   b8654:	fa20 f004 	lsr.w	r0, r0, r4
   b8658:	fa01 f302 	lsl.w	r3, r1, r2
   b865c:	ea40 0003 	orr.w	r0, r0, r3
   b8660:	fa21 f304 	lsr.w	r3, r1, r4
   b8664:	ea45 0103 	orr.w	r1, r5, r3
   b8668:	bd30      	pop	{r4, r5, pc}
   b866a:	f1c4 040c 	rsb	r4, r4, #12
   b866e:	f1c4 0220 	rsb	r2, r4, #32
   b8672:	fa20 f002 	lsr.w	r0, r0, r2
   b8676:	fa01 f304 	lsl.w	r3, r1, r4
   b867a:	ea40 0003 	orr.w	r0, r0, r3
   b867e:	4629      	mov	r1, r5
   b8680:	bd30      	pop	{r4, r5, pc}
   b8682:	fa21 f004 	lsr.w	r0, r1, r4
   b8686:	4629      	mov	r1, r5
   b8688:	bd30      	pop	{r4, r5, pc}
   b868a:	f094 0f00 	teq	r4, #0
   b868e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b8692:	bf06      	itte	eq
   b8694:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b8698:	3401      	addeq	r4, #1
   b869a:	3d01      	subne	r5, #1
   b869c:	e74e      	b.n	b853c <__adddf3+0x8c>
   b869e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b86a2:	bf18      	it	ne
   b86a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b86a8:	d029      	beq.n	b86fe <__adddf3+0x24e>
   b86aa:	ea94 0f05 	teq	r4, r5
   b86ae:	bf08      	it	eq
   b86b0:	ea90 0f02 	teqeq	r0, r2
   b86b4:	d005      	beq.n	b86c2 <__adddf3+0x212>
   b86b6:	ea54 0c00 	orrs.w	ip, r4, r0
   b86ba:	bf04      	itt	eq
   b86bc:	4619      	moveq	r1, r3
   b86be:	4610      	moveq	r0, r2
   b86c0:	bd30      	pop	{r4, r5, pc}
   b86c2:	ea91 0f03 	teq	r1, r3
   b86c6:	bf1e      	ittt	ne
   b86c8:	2100      	movne	r1, #0
   b86ca:	2000      	movne	r0, #0
   b86cc:	bd30      	popne	{r4, r5, pc}
   b86ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b86d2:	d105      	bne.n	b86e0 <__adddf3+0x230>
   b86d4:	0040      	lsls	r0, r0, #1
   b86d6:	4149      	adcs	r1, r1
   b86d8:	bf28      	it	cs
   b86da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b86de:	bd30      	pop	{r4, r5, pc}
   b86e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b86e4:	bf3c      	itt	cc
   b86e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b86ea:	bd30      	popcc	{r4, r5, pc}
   b86ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b86f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b86f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b86f8:	f04f 0000 	mov.w	r0, #0
   b86fc:	bd30      	pop	{r4, r5, pc}
   b86fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b8702:	bf1a      	itte	ne
   b8704:	4619      	movne	r1, r3
   b8706:	4610      	movne	r0, r2
   b8708:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b870c:	bf1c      	itt	ne
   b870e:	460b      	movne	r3, r1
   b8710:	4602      	movne	r2, r0
   b8712:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b8716:	bf06      	itte	eq
   b8718:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b871c:	ea91 0f03 	teqeq	r1, r3
   b8720:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b8724:	bd30      	pop	{r4, r5, pc}
   b8726:	bf00      	nop

000b8728 <__aeabi_ui2d>:
   b8728:	f090 0f00 	teq	r0, #0
   b872c:	bf04      	itt	eq
   b872e:	2100      	moveq	r1, #0
   b8730:	4770      	bxeq	lr
   b8732:	b530      	push	{r4, r5, lr}
   b8734:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b8738:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b873c:	f04f 0500 	mov.w	r5, #0
   b8740:	f04f 0100 	mov.w	r1, #0
   b8744:	e750      	b.n	b85e8 <__adddf3+0x138>
   b8746:	bf00      	nop

000b8748 <__aeabi_i2d>:
   b8748:	f090 0f00 	teq	r0, #0
   b874c:	bf04      	itt	eq
   b874e:	2100      	moveq	r1, #0
   b8750:	4770      	bxeq	lr
   b8752:	b530      	push	{r4, r5, lr}
   b8754:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b8758:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b875c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b8760:	bf48      	it	mi
   b8762:	4240      	negmi	r0, r0
   b8764:	f04f 0100 	mov.w	r1, #0
   b8768:	e73e      	b.n	b85e8 <__adddf3+0x138>
   b876a:	bf00      	nop

000b876c <__aeabi_f2d>:
   b876c:	0042      	lsls	r2, r0, #1
   b876e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b8772:	ea4f 0131 	mov.w	r1, r1, rrx
   b8776:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b877a:	bf1f      	itttt	ne
   b877c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b8780:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b8784:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b8788:	4770      	bxne	lr
   b878a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b878e:	bf08      	it	eq
   b8790:	4770      	bxeq	lr
   b8792:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b8796:	bf04      	itt	eq
   b8798:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b879c:	4770      	bxeq	lr
   b879e:	b530      	push	{r4, r5, lr}
   b87a0:	f44f 7460 	mov.w	r4, #896	; 0x380
   b87a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b87a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b87ac:	e71c      	b.n	b85e8 <__adddf3+0x138>
   b87ae:	bf00      	nop

000b87b0 <__aeabi_ul2d>:
   b87b0:	ea50 0201 	orrs.w	r2, r0, r1
   b87b4:	bf08      	it	eq
   b87b6:	4770      	bxeq	lr
   b87b8:	b530      	push	{r4, r5, lr}
   b87ba:	f04f 0500 	mov.w	r5, #0
   b87be:	e00a      	b.n	b87d6 <__aeabi_l2d+0x16>

000b87c0 <__aeabi_l2d>:
   b87c0:	ea50 0201 	orrs.w	r2, r0, r1
   b87c4:	bf08      	it	eq
   b87c6:	4770      	bxeq	lr
   b87c8:	b530      	push	{r4, r5, lr}
   b87ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b87ce:	d502      	bpl.n	b87d6 <__aeabi_l2d+0x16>
   b87d0:	4240      	negs	r0, r0
   b87d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b87d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b87da:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b87de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b87e2:	f43f aed8 	beq.w	b8596 <__adddf3+0xe6>
   b87e6:	f04f 0203 	mov.w	r2, #3
   b87ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b87ee:	bf18      	it	ne
   b87f0:	3203      	addne	r2, #3
   b87f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b87f6:	bf18      	it	ne
   b87f8:	3203      	addne	r2, #3
   b87fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b87fe:	f1c2 0320 	rsb	r3, r2, #32
   b8802:	fa00 fc03 	lsl.w	ip, r0, r3
   b8806:	fa20 f002 	lsr.w	r0, r0, r2
   b880a:	fa01 fe03 	lsl.w	lr, r1, r3
   b880e:	ea40 000e 	orr.w	r0, r0, lr
   b8812:	fa21 f102 	lsr.w	r1, r1, r2
   b8816:	4414      	add	r4, r2
   b8818:	e6bd      	b.n	b8596 <__adddf3+0xe6>
   b881a:	bf00      	nop

000b881c <__aeabi_dmul>:
   b881c:	b570      	push	{r4, r5, r6, lr}
   b881e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b8822:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b8826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b882a:	bf1d      	ittte	ne
   b882c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b8830:	ea94 0f0c 	teqne	r4, ip
   b8834:	ea95 0f0c 	teqne	r5, ip
   b8838:	f000 f8de 	bleq	b89f8 <__aeabi_dmul+0x1dc>
   b883c:	442c      	add	r4, r5
   b883e:	ea81 0603 	eor.w	r6, r1, r3
   b8842:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b8846:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b884a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b884e:	bf18      	it	ne
   b8850:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b8854:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b8858:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b885c:	d038      	beq.n	b88d0 <__aeabi_dmul+0xb4>
   b885e:	fba0 ce02 	umull	ip, lr, r0, r2
   b8862:	f04f 0500 	mov.w	r5, #0
   b8866:	fbe1 e502 	umlal	lr, r5, r1, r2
   b886a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b886e:	fbe0 e503 	umlal	lr, r5, r0, r3
   b8872:	f04f 0600 	mov.w	r6, #0
   b8876:	fbe1 5603 	umlal	r5, r6, r1, r3
   b887a:	f09c 0f00 	teq	ip, #0
   b887e:	bf18      	it	ne
   b8880:	f04e 0e01 	orrne.w	lr, lr, #1
   b8884:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b8888:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b888c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b8890:	d204      	bcs.n	b889c <__aeabi_dmul+0x80>
   b8892:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b8896:	416d      	adcs	r5, r5
   b8898:	eb46 0606 	adc.w	r6, r6, r6
   b889c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b88a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b88a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b88a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b88ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b88b0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b88b4:	bf88      	it	hi
   b88b6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b88ba:	d81e      	bhi.n	b88fa <__aeabi_dmul+0xde>
   b88bc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b88c0:	bf08      	it	eq
   b88c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b88c6:	f150 0000 	adcs.w	r0, r0, #0
   b88ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b88ce:	bd70      	pop	{r4, r5, r6, pc}
   b88d0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b88d4:	ea46 0101 	orr.w	r1, r6, r1
   b88d8:	ea40 0002 	orr.w	r0, r0, r2
   b88dc:	ea81 0103 	eor.w	r1, r1, r3
   b88e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b88e4:	bfc2      	ittt	gt
   b88e6:	ebd4 050c 	rsbsgt	r5, r4, ip
   b88ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b88ee:	bd70      	popgt	{r4, r5, r6, pc}
   b88f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b88f4:	f04f 0e00 	mov.w	lr, #0
   b88f8:	3c01      	subs	r4, #1
   b88fa:	f300 80ab 	bgt.w	b8a54 <__aeabi_dmul+0x238>
   b88fe:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b8902:	bfde      	ittt	le
   b8904:	2000      	movle	r0, #0
   b8906:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b890a:	bd70      	pople	{r4, r5, r6, pc}
   b890c:	f1c4 0400 	rsb	r4, r4, #0
   b8910:	3c20      	subs	r4, #32
   b8912:	da35      	bge.n	b8980 <__aeabi_dmul+0x164>
   b8914:	340c      	adds	r4, #12
   b8916:	dc1b      	bgt.n	b8950 <__aeabi_dmul+0x134>
   b8918:	f104 0414 	add.w	r4, r4, #20
   b891c:	f1c4 0520 	rsb	r5, r4, #32
   b8920:	fa00 f305 	lsl.w	r3, r0, r5
   b8924:	fa20 f004 	lsr.w	r0, r0, r4
   b8928:	fa01 f205 	lsl.w	r2, r1, r5
   b892c:	ea40 0002 	orr.w	r0, r0, r2
   b8930:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b8934:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b8938:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b893c:	fa21 f604 	lsr.w	r6, r1, r4
   b8940:	eb42 0106 	adc.w	r1, r2, r6
   b8944:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b8948:	bf08      	it	eq
   b894a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b894e:	bd70      	pop	{r4, r5, r6, pc}
   b8950:	f1c4 040c 	rsb	r4, r4, #12
   b8954:	f1c4 0520 	rsb	r5, r4, #32
   b8958:	fa00 f304 	lsl.w	r3, r0, r4
   b895c:	fa20 f005 	lsr.w	r0, r0, r5
   b8960:	fa01 f204 	lsl.w	r2, r1, r4
   b8964:	ea40 0002 	orr.w	r0, r0, r2
   b8968:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b896c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b8970:	f141 0100 	adc.w	r1, r1, #0
   b8974:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b8978:	bf08      	it	eq
   b897a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b897e:	bd70      	pop	{r4, r5, r6, pc}
   b8980:	f1c4 0520 	rsb	r5, r4, #32
   b8984:	fa00 f205 	lsl.w	r2, r0, r5
   b8988:	ea4e 0e02 	orr.w	lr, lr, r2
   b898c:	fa20 f304 	lsr.w	r3, r0, r4
   b8990:	fa01 f205 	lsl.w	r2, r1, r5
   b8994:	ea43 0302 	orr.w	r3, r3, r2
   b8998:	fa21 f004 	lsr.w	r0, r1, r4
   b899c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b89a0:	fa21 f204 	lsr.w	r2, r1, r4
   b89a4:	ea20 0002 	bic.w	r0, r0, r2
   b89a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b89ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b89b0:	bf08      	it	eq
   b89b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b89b6:	bd70      	pop	{r4, r5, r6, pc}
   b89b8:	f094 0f00 	teq	r4, #0
   b89bc:	d10f      	bne.n	b89de <__aeabi_dmul+0x1c2>
   b89be:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b89c2:	0040      	lsls	r0, r0, #1
   b89c4:	eb41 0101 	adc.w	r1, r1, r1
   b89c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b89cc:	bf08      	it	eq
   b89ce:	3c01      	subeq	r4, #1
   b89d0:	d0f7      	beq.n	b89c2 <__aeabi_dmul+0x1a6>
   b89d2:	ea41 0106 	orr.w	r1, r1, r6
   b89d6:	f095 0f00 	teq	r5, #0
   b89da:	bf18      	it	ne
   b89dc:	4770      	bxne	lr
   b89de:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b89e2:	0052      	lsls	r2, r2, #1
   b89e4:	eb43 0303 	adc.w	r3, r3, r3
   b89e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b89ec:	bf08      	it	eq
   b89ee:	3d01      	subeq	r5, #1
   b89f0:	d0f7      	beq.n	b89e2 <__aeabi_dmul+0x1c6>
   b89f2:	ea43 0306 	orr.w	r3, r3, r6
   b89f6:	4770      	bx	lr
   b89f8:	ea94 0f0c 	teq	r4, ip
   b89fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b8a00:	bf18      	it	ne
   b8a02:	ea95 0f0c 	teqne	r5, ip
   b8a06:	d00c      	beq.n	b8a22 <__aeabi_dmul+0x206>
   b8a08:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b8a0c:	bf18      	it	ne
   b8a0e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b8a12:	d1d1      	bne.n	b89b8 <__aeabi_dmul+0x19c>
   b8a14:	ea81 0103 	eor.w	r1, r1, r3
   b8a18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b8a1c:	f04f 0000 	mov.w	r0, #0
   b8a20:	bd70      	pop	{r4, r5, r6, pc}
   b8a22:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b8a26:	bf06      	itte	eq
   b8a28:	4610      	moveq	r0, r2
   b8a2a:	4619      	moveq	r1, r3
   b8a2c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b8a30:	d019      	beq.n	b8a66 <__aeabi_dmul+0x24a>
   b8a32:	ea94 0f0c 	teq	r4, ip
   b8a36:	d102      	bne.n	b8a3e <__aeabi_dmul+0x222>
   b8a38:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b8a3c:	d113      	bne.n	b8a66 <__aeabi_dmul+0x24a>
   b8a3e:	ea95 0f0c 	teq	r5, ip
   b8a42:	d105      	bne.n	b8a50 <__aeabi_dmul+0x234>
   b8a44:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b8a48:	bf1c      	itt	ne
   b8a4a:	4610      	movne	r0, r2
   b8a4c:	4619      	movne	r1, r3
   b8a4e:	d10a      	bne.n	b8a66 <__aeabi_dmul+0x24a>
   b8a50:	ea81 0103 	eor.w	r1, r1, r3
   b8a54:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b8a58:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b8a5c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b8a60:	f04f 0000 	mov.w	r0, #0
   b8a64:	bd70      	pop	{r4, r5, r6, pc}
   b8a66:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b8a6a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b8a6e:	bd70      	pop	{r4, r5, r6, pc}

000b8a70 <__aeabi_ddiv>:
   b8a70:	b570      	push	{r4, r5, r6, lr}
   b8a72:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b8a76:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b8a7a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b8a7e:	bf1d      	ittte	ne
   b8a80:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b8a84:	ea94 0f0c 	teqne	r4, ip
   b8a88:	ea95 0f0c 	teqne	r5, ip
   b8a8c:	f000 f8a7 	bleq	b8bde <__aeabi_ddiv+0x16e>
   b8a90:	eba4 0405 	sub.w	r4, r4, r5
   b8a94:	ea81 0e03 	eor.w	lr, r1, r3
   b8a98:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b8a9c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b8aa0:	f000 8088 	beq.w	b8bb4 <__aeabi_ddiv+0x144>
   b8aa4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b8aa8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b8aac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b8ab0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b8ab4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b8ab8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b8abc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b8ac0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b8ac4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b8ac8:	429d      	cmp	r5, r3
   b8aca:	bf08      	it	eq
   b8acc:	4296      	cmpeq	r6, r2
   b8ace:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b8ad2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b8ad6:	d202      	bcs.n	b8ade <__aeabi_ddiv+0x6e>
   b8ad8:	085b      	lsrs	r3, r3, #1
   b8ada:	ea4f 0232 	mov.w	r2, r2, rrx
   b8ade:	1ab6      	subs	r6, r6, r2
   b8ae0:	eb65 0503 	sbc.w	r5, r5, r3
   b8ae4:	085b      	lsrs	r3, r3, #1
   b8ae6:	ea4f 0232 	mov.w	r2, r2, rrx
   b8aea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b8aee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b8af2:	ebb6 0e02 	subs.w	lr, r6, r2
   b8af6:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8afa:	bf22      	ittt	cs
   b8afc:	1ab6      	subcs	r6, r6, r2
   b8afe:	4675      	movcs	r5, lr
   b8b00:	ea40 000c 	orrcs.w	r0, r0, ip
   b8b04:	085b      	lsrs	r3, r3, #1
   b8b06:	ea4f 0232 	mov.w	r2, r2, rrx
   b8b0a:	ebb6 0e02 	subs.w	lr, r6, r2
   b8b0e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8b12:	bf22      	ittt	cs
   b8b14:	1ab6      	subcs	r6, r6, r2
   b8b16:	4675      	movcs	r5, lr
   b8b18:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b8b1c:	085b      	lsrs	r3, r3, #1
   b8b1e:	ea4f 0232 	mov.w	r2, r2, rrx
   b8b22:	ebb6 0e02 	subs.w	lr, r6, r2
   b8b26:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8b2a:	bf22      	ittt	cs
   b8b2c:	1ab6      	subcs	r6, r6, r2
   b8b2e:	4675      	movcs	r5, lr
   b8b30:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b8b34:	085b      	lsrs	r3, r3, #1
   b8b36:	ea4f 0232 	mov.w	r2, r2, rrx
   b8b3a:	ebb6 0e02 	subs.w	lr, r6, r2
   b8b3e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8b42:	bf22      	ittt	cs
   b8b44:	1ab6      	subcs	r6, r6, r2
   b8b46:	4675      	movcs	r5, lr
   b8b48:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b8b4c:	ea55 0e06 	orrs.w	lr, r5, r6
   b8b50:	d018      	beq.n	b8b84 <__aeabi_ddiv+0x114>
   b8b52:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b8b56:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b8b5a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b8b5e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b8b62:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b8b66:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b8b6a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b8b6e:	d1c0      	bne.n	b8af2 <__aeabi_ddiv+0x82>
   b8b70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b8b74:	d10b      	bne.n	b8b8e <__aeabi_ddiv+0x11e>
   b8b76:	ea41 0100 	orr.w	r1, r1, r0
   b8b7a:	f04f 0000 	mov.w	r0, #0
   b8b7e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b8b82:	e7b6      	b.n	b8af2 <__aeabi_ddiv+0x82>
   b8b84:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b8b88:	bf04      	itt	eq
   b8b8a:	4301      	orreq	r1, r0
   b8b8c:	2000      	moveq	r0, #0
   b8b8e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b8b92:	bf88      	it	hi
   b8b94:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b8b98:	f63f aeaf 	bhi.w	b88fa <__aeabi_dmul+0xde>
   b8b9c:	ebb5 0c03 	subs.w	ip, r5, r3
   b8ba0:	bf04      	itt	eq
   b8ba2:	ebb6 0c02 	subseq.w	ip, r6, r2
   b8ba6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b8baa:	f150 0000 	adcs.w	r0, r0, #0
   b8bae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b8bb2:	bd70      	pop	{r4, r5, r6, pc}
   b8bb4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b8bb8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b8bbc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b8bc0:	bfc2      	ittt	gt
   b8bc2:	ebd4 050c 	rsbsgt	r5, r4, ip
   b8bc6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b8bca:	bd70      	popgt	{r4, r5, r6, pc}
   b8bcc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b8bd0:	f04f 0e00 	mov.w	lr, #0
   b8bd4:	3c01      	subs	r4, #1
   b8bd6:	e690      	b.n	b88fa <__aeabi_dmul+0xde>
   b8bd8:	ea45 0e06 	orr.w	lr, r5, r6
   b8bdc:	e68d      	b.n	b88fa <__aeabi_dmul+0xde>
   b8bde:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b8be2:	ea94 0f0c 	teq	r4, ip
   b8be6:	bf08      	it	eq
   b8be8:	ea95 0f0c 	teqeq	r5, ip
   b8bec:	f43f af3b 	beq.w	b8a66 <__aeabi_dmul+0x24a>
   b8bf0:	ea94 0f0c 	teq	r4, ip
   b8bf4:	d10a      	bne.n	b8c0c <__aeabi_ddiv+0x19c>
   b8bf6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b8bfa:	f47f af34 	bne.w	b8a66 <__aeabi_dmul+0x24a>
   b8bfe:	ea95 0f0c 	teq	r5, ip
   b8c02:	f47f af25 	bne.w	b8a50 <__aeabi_dmul+0x234>
   b8c06:	4610      	mov	r0, r2
   b8c08:	4619      	mov	r1, r3
   b8c0a:	e72c      	b.n	b8a66 <__aeabi_dmul+0x24a>
   b8c0c:	ea95 0f0c 	teq	r5, ip
   b8c10:	d106      	bne.n	b8c20 <__aeabi_ddiv+0x1b0>
   b8c12:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b8c16:	f43f aefd 	beq.w	b8a14 <__aeabi_dmul+0x1f8>
   b8c1a:	4610      	mov	r0, r2
   b8c1c:	4619      	mov	r1, r3
   b8c1e:	e722      	b.n	b8a66 <__aeabi_dmul+0x24a>
   b8c20:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b8c24:	bf18      	it	ne
   b8c26:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b8c2a:	f47f aec5 	bne.w	b89b8 <__aeabi_dmul+0x19c>
   b8c2e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b8c32:	f47f af0d 	bne.w	b8a50 <__aeabi_dmul+0x234>
   b8c36:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b8c3a:	f47f aeeb 	bne.w	b8a14 <__aeabi_dmul+0x1f8>
   b8c3e:	e712      	b.n	b8a66 <__aeabi_dmul+0x24a>

000b8c40 <__aeabi_d2iz>:
   b8c40:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b8c44:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b8c48:	d215      	bcs.n	b8c76 <__aeabi_d2iz+0x36>
   b8c4a:	d511      	bpl.n	b8c70 <__aeabi_d2iz+0x30>
   b8c4c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b8c50:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b8c54:	d912      	bls.n	b8c7c <__aeabi_d2iz+0x3c>
   b8c56:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b8c5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b8c5e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b8c62:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b8c66:	fa23 f002 	lsr.w	r0, r3, r2
   b8c6a:	bf18      	it	ne
   b8c6c:	4240      	negne	r0, r0
   b8c6e:	4770      	bx	lr
   b8c70:	f04f 0000 	mov.w	r0, #0
   b8c74:	4770      	bx	lr
   b8c76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b8c7a:	d105      	bne.n	b8c88 <__aeabi_d2iz+0x48>
   b8c7c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b8c80:	bf08      	it	eq
   b8c82:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b8c86:	4770      	bx	lr
   b8c88:	f04f 0000 	mov.w	r0, #0
   b8c8c:	4770      	bx	lr
   b8c8e:	bf00      	nop

000b8c90 <atexit>:
   b8c90:	2300      	movs	r3, #0
   b8c92:	4601      	mov	r1, r0
   b8c94:	461a      	mov	r2, r3
   b8c96:	4618      	mov	r0, r3
   b8c98:	f000 b906 	b.w	b8ea8 <__register_exitproc>

000b8c9c <atoi>:
   b8c9c:	220a      	movs	r2, #10
   b8c9e:	2100      	movs	r1, #0
   b8ca0:	f000 b8f8 	b.w	b8e94 <strtol>

000b8ca4 <atol>:
   b8ca4:	220a      	movs	r2, #10
   b8ca6:	2100      	movs	r1, #0
   b8ca8:	f000 b8f4 	b.w	b8e94 <strtol>

000b8cac <memcpy>:
   b8cac:	440a      	add	r2, r1
   b8cae:	4291      	cmp	r1, r2
   b8cb0:	f100 33ff 	add.w	r3, r0, #4294967295
   b8cb4:	d100      	bne.n	b8cb8 <memcpy+0xc>
   b8cb6:	4770      	bx	lr
   b8cb8:	b510      	push	{r4, lr}
   b8cba:	f811 4b01 	ldrb.w	r4, [r1], #1
   b8cbe:	f803 4f01 	strb.w	r4, [r3, #1]!
   b8cc2:	4291      	cmp	r1, r2
   b8cc4:	d1f9      	bne.n	b8cba <memcpy+0xe>
   b8cc6:	bd10      	pop	{r4, pc}

000b8cc8 <memset>:
   b8cc8:	4402      	add	r2, r0
   b8cca:	4603      	mov	r3, r0
   b8ccc:	4293      	cmp	r3, r2
   b8cce:	d100      	bne.n	b8cd2 <memset+0xa>
   b8cd0:	4770      	bx	lr
   b8cd2:	f803 1b01 	strb.w	r1, [r3], #1
   b8cd6:	e7f9      	b.n	b8ccc <memset+0x4>

000b8cd8 <srand>:
   b8cd8:	b538      	push	{r3, r4, r5, lr}
   b8cda:	4b10      	ldr	r3, [pc, #64]	; (b8d1c <srand+0x44>)
   b8cdc:	681d      	ldr	r5, [r3, #0]
   b8cde:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8ce0:	4604      	mov	r4, r0
   b8ce2:	b9b3      	cbnz	r3, b8d12 <srand+0x3a>
   b8ce4:	2018      	movs	r0, #24
   b8ce6:	f7fd ffc1 	bl	b6c6c <malloc>
   b8cea:	4602      	mov	r2, r0
   b8cec:	63a8      	str	r0, [r5, #56]	; 0x38
   b8cee:	b920      	cbnz	r0, b8cfa <srand+0x22>
   b8cf0:	4b0b      	ldr	r3, [pc, #44]	; (b8d20 <srand+0x48>)
   b8cf2:	480c      	ldr	r0, [pc, #48]	; (b8d24 <srand+0x4c>)
   b8cf4:	2142      	movs	r1, #66	; 0x42
   b8cf6:	f7fd ffe9 	bl	b6ccc <__assert_func>
   b8cfa:	490b      	ldr	r1, [pc, #44]	; (b8d28 <srand+0x50>)
   b8cfc:	4b0b      	ldr	r3, [pc, #44]	; (b8d2c <srand+0x54>)
   b8cfe:	e9c0 1300 	strd	r1, r3, [r0]
   b8d02:	4b0b      	ldr	r3, [pc, #44]	; (b8d30 <srand+0x58>)
   b8d04:	6083      	str	r3, [r0, #8]
   b8d06:	230b      	movs	r3, #11
   b8d08:	8183      	strh	r3, [r0, #12]
   b8d0a:	2100      	movs	r1, #0
   b8d0c:	2001      	movs	r0, #1
   b8d0e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b8d12:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8d14:	2200      	movs	r2, #0
   b8d16:	611c      	str	r4, [r3, #16]
   b8d18:	615a      	str	r2, [r3, #20]
   b8d1a:	bd38      	pop	{r3, r4, r5, pc}
   b8d1c:	2003e528 	.word	0x2003e528
   b8d20:	000ba3dd 	.word	0x000ba3dd
   b8d24:	000ba3f4 	.word	0x000ba3f4
   b8d28:	abcd330e 	.word	0xabcd330e
   b8d2c:	e66d1234 	.word	0xe66d1234
   b8d30:	0005deec 	.word	0x0005deec

000b8d34 <strcmp>:
   b8d34:	f810 2b01 	ldrb.w	r2, [r0], #1
   b8d38:	f811 3b01 	ldrb.w	r3, [r1], #1
   b8d3c:	2a01      	cmp	r2, #1
   b8d3e:	bf28      	it	cs
   b8d40:	429a      	cmpcs	r2, r3
   b8d42:	d0f7      	beq.n	b8d34 <strcmp>
   b8d44:	1ad0      	subs	r0, r2, r3
   b8d46:	4770      	bx	lr

000b8d48 <strcpy>:
   b8d48:	4603      	mov	r3, r0
   b8d4a:	f811 2b01 	ldrb.w	r2, [r1], #1
   b8d4e:	f803 2b01 	strb.w	r2, [r3], #1
   b8d52:	2a00      	cmp	r2, #0
   b8d54:	d1f9      	bne.n	b8d4a <strcpy+0x2>
   b8d56:	4770      	bx	lr

000b8d58 <strlen>:
   b8d58:	4603      	mov	r3, r0
   b8d5a:	f813 2b01 	ldrb.w	r2, [r3], #1
   b8d5e:	2a00      	cmp	r2, #0
   b8d60:	d1fb      	bne.n	b8d5a <strlen+0x2>
   b8d62:	1a18      	subs	r0, r3, r0
   b8d64:	3801      	subs	r0, #1
   b8d66:	4770      	bx	lr

000b8d68 <strncpy>:
   b8d68:	b510      	push	{r4, lr}
   b8d6a:	3901      	subs	r1, #1
   b8d6c:	4603      	mov	r3, r0
   b8d6e:	b132      	cbz	r2, b8d7e <strncpy+0x16>
   b8d70:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b8d74:	f803 4b01 	strb.w	r4, [r3], #1
   b8d78:	3a01      	subs	r2, #1
   b8d7a:	2c00      	cmp	r4, #0
   b8d7c:	d1f7      	bne.n	b8d6e <strncpy+0x6>
   b8d7e:	441a      	add	r2, r3
   b8d80:	2100      	movs	r1, #0
   b8d82:	4293      	cmp	r3, r2
   b8d84:	d100      	bne.n	b8d88 <strncpy+0x20>
   b8d86:	bd10      	pop	{r4, pc}
   b8d88:	f803 1b01 	strb.w	r1, [r3], #1
   b8d8c:	e7f9      	b.n	b8d82 <strncpy+0x1a>
	...

000b8d90 <_strtol_l.constprop.0>:
   b8d90:	2b01      	cmp	r3, #1
   b8d92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b8d96:	d001      	beq.n	b8d9c <_strtol_l.constprop.0+0xc>
   b8d98:	2b24      	cmp	r3, #36	; 0x24
   b8d9a:	d906      	bls.n	b8daa <_strtol_l.constprop.0+0x1a>
   b8d9c:	f7fd ff8e 	bl	b6cbc <__errno>
   b8da0:	2316      	movs	r3, #22
   b8da2:	6003      	str	r3, [r0, #0]
   b8da4:	2000      	movs	r0, #0
   b8da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b8daa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b8e90 <_strtol_l.constprop.0+0x100>
   b8dae:	460d      	mov	r5, r1
   b8db0:	462e      	mov	r6, r5
   b8db2:	f815 4b01 	ldrb.w	r4, [r5], #1
   b8db6:	f814 700c 	ldrb.w	r7, [r4, ip]
   b8dba:	f017 0708 	ands.w	r7, r7, #8
   b8dbe:	d1f7      	bne.n	b8db0 <_strtol_l.constprop.0+0x20>
   b8dc0:	2c2d      	cmp	r4, #45	; 0x2d
   b8dc2:	d132      	bne.n	b8e2a <_strtol_l.constprop.0+0x9a>
   b8dc4:	782c      	ldrb	r4, [r5, #0]
   b8dc6:	2701      	movs	r7, #1
   b8dc8:	1cb5      	adds	r5, r6, #2
   b8dca:	2b00      	cmp	r3, #0
   b8dcc:	d05b      	beq.n	b8e86 <_strtol_l.constprop.0+0xf6>
   b8dce:	2b10      	cmp	r3, #16
   b8dd0:	d109      	bne.n	b8de6 <_strtol_l.constprop.0+0x56>
   b8dd2:	2c30      	cmp	r4, #48	; 0x30
   b8dd4:	d107      	bne.n	b8de6 <_strtol_l.constprop.0+0x56>
   b8dd6:	782c      	ldrb	r4, [r5, #0]
   b8dd8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b8ddc:	2c58      	cmp	r4, #88	; 0x58
   b8dde:	d14d      	bne.n	b8e7c <_strtol_l.constprop.0+0xec>
   b8de0:	786c      	ldrb	r4, [r5, #1]
   b8de2:	2310      	movs	r3, #16
   b8de4:	3502      	adds	r5, #2
   b8de6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b8dea:	f108 38ff 	add.w	r8, r8, #4294967295
   b8dee:	f04f 0c00 	mov.w	ip, #0
   b8df2:	fbb8 f9f3 	udiv	r9, r8, r3
   b8df6:	4666      	mov	r6, ip
   b8df8:	fb03 8a19 	mls	sl, r3, r9, r8
   b8dfc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b8e00:	f1be 0f09 	cmp.w	lr, #9
   b8e04:	d816      	bhi.n	b8e34 <_strtol_l.constprop.0+0xa4>
   b8e06:	4674      	mov	r4, lr
   b8e08:	42a3      	cmp	r3, r4
   b8e0a:	dd24      	ble.n	b8e56 <_strtol_l.constprop.0+0xc6>
   b8e0c:	f1bc 0f00 	cmp.w	ip, #0
   b8e10:	db1e      	blt.n	b8e50 <_strtol_l.constprop.0+0xc0>
   b8e12:	45b1      	cmp	r9, r6
   b8e14:	d31c      	bcc.n	b8e50 <_strtol_l.constprop.0+0xc0>
   b8e16:	d101      	bne.n	b8e1c <_strtol_l.constprop.0+0x8c>
   b8e18:	45a2      	cmp	sl, r4
   b8e1a:	db19      	blt.n	b8e50 <_strtol_l.constprop.0+0xc0>
   b8e1c:	fb06 4603 	mla	r6, r6, r3, r4
   b8e20:	f04f 0c01 	mov.w	ip, #1
   b8e24:	f815 4b01 	ldrb.w	r4, [r5], #1
   b8e28:	e7e8      	b.n	b8dfc <_strtol_l.constprop.0+0x6c>
   b8e2a:	2c2b      	cmp	r4, #43	; 0x2b
   b8e2c:	bf04      	itt	eq
   b8e2e:	782c      	ldrbeq	r4, [r5, #0]
   b8e30:	1cb5      	addeq	r5, r6, #2
   b8e32:	e7ca      	b.n	b8dca <_strtol_l.constprop.0+0x3a>
   b8e34:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b8e38:	f1be 0f19 	cmp.w	lr, #25
   b8e3c:	d801      	bhi.n	b8e42 <_strtol_l.constprop.0+0xb2>
   b8e3e:	3c37      	subs	r4, #55	; 0x37
   b8e40:	e7e2      	b.n	b8e08 <_strtol_l.constprop.0+0x78>
   b8e42:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b8e46:	f1be 0f19 	cmp.w	lr, #25
   b8e4a:	d804      	bhi.n	b8e56 <_strtol_l.constprop.0+0xc6>
   b8e4c:	3c57      	subs	r4, #87	; 0x57
   b8e4e:	e7db      	b.n	b8e08 <_strtol_l.constprop.0+0x78>
   b8e50:	f04f 3cff 	mov.w	ip, #4294967295
   b8e54:	e7e6      	b.n	b8e24 <_strtol_l.constprop.0+0x94>
   b8e56:	f1bc 0f00 	cmp.w	ip, #0
   b8e5a:	da05      	bge.n	b8e68 <_strtol_l.constprop.0+0xd8>
   b8e5c:	2322      	movs	r3, #34	; 0x22
   b8e5e:	6003      	str	r3, [r0, #0]
   b8e60:	4646      	mov	r6, r8
   b8e62:	b942      	cbnz	r2, b8e76 <_strtol_l.constprop.0+0xe6>
   b8e64:	4630      	mov	r0, r6
   b8e66:	e79e      	b.n	b8da6 <_strtol_l.constprop.0+0x16>
   b8e68:	b107      	cbz	r7, b8e6c <_strtol_l.constprop.0+0xdc>
   b8e6a:	4276      	negs	r6, r6
   b8e6c:	2a00      	cmp	r2, #0
   b8e6e:	d0f9      	beq.n	b8e64 <_strtol_l.constprop.0+0xd4>
   b8e70:	f1bc 0f00 	cmp.w	ip, #0
   b8e74:	d000      	beq.n	b8e78 <_strtol_l.constprop.0+0xe8>
   b8e76:	1e69      	subs	r1, r5, #1
   b8e78:	6011      	str	r1, [r2, #0]
   b8e7a:	e7f3      	b.n	b8e64 <_strtol_l.constprop.0+0xd4>
   b8e7c:	2430      	movs	r4, #48	; 0x30
   b8e7e:	2b00      	cmp	r3, #0
   b8e80:	d1b1      	bne.n	b8de6 <_strtol_l.constprop.0+0x56>
   b8e82:	2308      	movs	r3, #8
   b8e84:	e7af      	b.n	b8de6 <_strtol_l.constprop.0+0x56>
   b8e86:	2c30      	cmp	r4, #48	; 0x30
   b8e88:	d0a5      	beq.n	b8dd6 <_strtol_l.constprop.0+0x46>
   b8e8a:	230a      	movs	r3, #10
   b8e8c:	e7ab      	b.n	b8de6 <_strtol_l.constprop.0+0x56>
   b8e8e:	bf00      	nop
   b8e90:	000ba472 	.word	0x000ba472

000b8e94 <strtol>:
   b8e94:	4613      	mov	r3, r2
   b8e96:	460a      	mov	r2, r1
   b8e98:	4601      	mov	r1, r0
   b8e9a:	4802      	ldr	r0, [pc, #8]	; (b8ea4 <strtol+0x10>)
   b8e9c:	6800      	ldr	r0, [r0, #0]
   b8e9e:	f7ff bf77 	b.w	b8d90 <_strtol_l.constprop.0>
   b8ea2:	bf00      	nop
   b8ea4:	2003e528 	.word	0x2003e528

000b8ea8 <__register_exitproc>:
   b8ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8eac:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b8f68 <__register_exitproc+0xc0>
   b8eb0:	4606      	mov	r6, r0
   b8eb2:	f8d8 0000 	ldr.w	r0, [r8]
   b8eb6:	461f      	mov	r7, r3
   b8eb8:	460d      	mov	r5, r1
   b8eba:	4691      	mov	r9, r2
   b8ebc:	f000 f856 	bl	b8f6c <__retarget_lock_acquire_recursive>
   b8ec0:	4b25      	ldr	r3, [pc, #148]	; (b8f58 <__register_exitproc+0xb0>)
   b8ec2:	681c      	ldr	r4, [r3, #0]
   b8ec4:	b934      	cbnz	r4, b8ed4 <__register_exitproc+0x2c>
   b8ec6:	4c25      	ldr	r4, [pc, #148]	; (b8f5c <__register_exitproc+0xb4>)
   b8ec8:	601c      	str	r4, [r3, #0]
   b8eca:	4b25      	ldr	r3, [pc, #148]	; (b8f60 <__register_exitproc+0xb8>)
   b8ecc:	b113      	cbz	r3, b8ed4 <__register_exitproc+0x2c>
   b8ece:	681b      	ldr	r3, [r3, #0]
   b8ed0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b8ed4:	6863      	ldr	r3, [r4, #4]
   b8ed6:	2b1f      	cmp	r3, #31
   b8ed8:	dd07      	ble.n	b8eea <__register_exitproc+0x42>
   b8eda:	f8d8 0000 	ldr.w	r0, [r8]
   b8ede:	f000 f847 	bl	b8f70 <__retarget_lock_release_recursive>
   b8ee2:	f04f 30ff 	mov.w	r0, #4294967295
   b8ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b8eea:	b34e      	cbz	r6, b8f40 <__register_exitproc+0x98>
   b8eec:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b8ef0:	b988      	cbnz	r0, b8f16 <__register_exitproc+0x6e>
   b8ef2:	4b1c      	ldr	r3, [pc, #112]	; (b8f64 <__register_exitproc+0xbc>)
   b8ef4:	b923      	cbnz	r3, b8f00 <__register_exitproc+0x58>
   b8ef6:	f8d8 0000 	ldr.w	r0, [r8]
   b8efa:	f000 f838 	bl	b8f6e <__retarget_lock_release>
   b8efe:	e7f0      	b.n	b8ee2 <__register_exitproc+0x3a>
   b8f00:	f44f 7084 	mov.w	r0, #264	; 0x108
   b8f04:	f7fd feb2 	bl	b6c6c <malloc>
   b8f08:	2800      	cmp	r0, #0
   b8f0a:	d0f4      	beq.n	b8ef6 <__register_exitproc+0x4e>
   b8f0c:	2300      	movs	r3, #0
   b8f0e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b8f12:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b8f16:	6863      	ldr	r3, [r4, #4]
   b8f18:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b8f1c:	2201      	movs	r2, #1
   b8f1e:	409a      	lsls	r2, r3
   b8f20:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b8f24:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b8f28:	4313      	orrs	r3, r2
   b8f2a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b8f2e:	2e02      	cmp	r6, #2
   b8f30:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b8f34:	bf02      	ittt	eq
   b8f36:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b8f3a:	4313      	orreq	r3, r2
   b8f3c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b8f40:	6863      	ldr	r3, [r4, #4]
   b8f42:	f8d8 0000 	ldr.w	r0, [r8]
   b8f46:	1c5a      	adds	r2, r3, #1
   b8f48:	3302      	adds	r3, #2
   b8f4a:	6062      	str	r2, [r4, #4]
   b8f4c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b8f50:	f000 f80e 	bl	b8f70 <__retarget_lock_release_recursive>
   b8f54:	2000      	movs	r0, #0
   b8f56:	e7c6      	b.n	b8ee6 <__register_exitproc+0x3e>
   b8f58:	2003e7e8 	.word	0x2003e7e8
   b8f5c:	2003e75c 	.word	0x2003e75c
   b8f60:	00000000 	.word	0x00000000
   b8f64:	000b6c6d 	.word	0x000b6c6d
   b8f68:	2003e58c 	.word	0x2003e58c

000b8f6c <__retarget_lock_acquire_recursive>:
   b8f6c:	4770      	bx	lr

000b8f6e <__retarget_lock_release>:
   b8f6e:	4770      	bx	lr

000b8f70 <__retarget_lock_release_recursive>:
   b8f70:	4770      	bx	lr

000b8f72 <link_code_end>:
	...

000b8f74 <dynalib_user>:
   b8f74:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b8f84:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b8f94:	7620 7269 7574 6c61 2500 0069 6c25 0069      virtual.%i.%li.
   b8fa4:	6d41 6962 6e65 2074 694c 6867 2074 654c     Ambient Light Le
   b8fb4:	6576 3a6c 5400 6d65 6570 6172 7574 6572     vel:.Temperature
   b8fc4:	003a 4320 6c65 6973 7375 002c 4620 6861     :. Celsius,. Fah
   b8fd4:	6572 686e 6965 2e74 5300 7465 7920 756f     renheit..Set you
   b8fe4:	2072 6f70 6e69 7374 002e 6f50 6574 746e     r points..Potent
   b8ff4:	6f69 656d 6574 3a72 5000 696f 746e 4f20     iometer:.Point O
   b9004:	656e 003a 6f50 6e69 2074 7754 3a6f 5400     ne:.Point Two:.T
   b9014:	6168 6b6e 7920 756f 6620 726f 7320 7465     hank you for set
   b9024:	6974 676e 6900 006e 756f 0074 7770 006d     ting.in.out.pwm.
   b9034:	7764 6100 0077 6552 4b65 7244 4f57 5246     dw.aw.ReeKDrWOFR
   b9044:	4c6d 566a 3373 3357 7a55 6a36 5957 5449     mLjVs3W3Uz6jWYIT
   b9054:	6f53 4432 4a35 4300 656c 7261 6e69 2067     So2D5J.Clearing 
   b9064:	6573 2074 6f70 6e69 7374 002e 6553 2074     set points..Set 
   b9074:	6f70 6e69 7374 6320 656c 7261 6465 002e     points cleared..
   b9084:	7776 2500 2e32 6637 4100 4300 5900 756f     vw.%2.7f.A.C.You
   b9094:	2072 6f50 6e69 7374 003a 6948 6867 5020     r Points:.High P
   b90a4:	696f 746e 003a 6f4c 2077 6f50 6e69 3a74     oint:.Low Point:
   b90b4:	4c00 574f 4800 4749 0048 4f47 444f 5400     .LOW.HIGH.GOOD.T
   b90c4:	6568 4120 626d 6569 746e 4c20 6769 7468     he Ambient Light
   b90d4:	4c20 7665 6c65 7020 7361 6573 2064 6874      Level passed th
   b90e4:	2065 6968 6867 7020 696f 746e 7920 756f     e high point you
   b90f4:	7320 7465 202e 6854 2065 696c 6867 2074      set. The light 
   b9104:	656c 6576 206c 7369 0020 6854 2065 6d41     level is .The Am
   b9114:	6962 6e65 2074 694c 6867 2074 654c 6576     bient Light Leve
   b9124:	206c 6170 7373 6465 7420 6568 6c20 776f     l passed the low
   b9134:	7020 696f 746e 7920 756f 7320 7465 202e      point you set. 
   b9144:	6854 2065 696c 6867 2074 656c 6576 206c     The light level 
   b9154:	7369 0020                                   is .

000b9158 <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
   b9158:	6c62 6b6e 6e69 0066 6576 0072 2e31 2e31     blnkinf.ver.1.1.
   b9168:	0030 2d68 6562 7461 3400 0035 7562 6666     0.h-beat.45.buff
   b9178:	692d 006e 3031 3432 6400 7665 5000 7261     -in.1024.dev.Par
   b9188:	6974 6c63 2065 7241 6f67 006e 7562 6c69     ticle Argon.buil
   b9198:	0064 754a 206c 3320 3220 3230 2032 3830     d.Jul  3 2022 08
   b91a8:	353a 3a39 3735 0000 6400 6665 7561 746c     :59:57...default
   b91b8:	0020 534d 0042 534c 0042 533c 4950 6553      .MSB.LSB.<SPISe
   b91c8:	7474 6e69 7367 6420 6665 7561 746c 003e     ttings default>.
   b91d8:	533c 4950 6553 7474 6e69 7367 2520 2573     <SPISettings %s%
   b91e8:	2075 7325 4d20 444f 2545 3e75                u %s MODE%u>.

000b91f5 <_ZL4font>:
   b91f5:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b9205:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b9215:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b9225:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b9235:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b9245:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b9255:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b9265:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b9275:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b9285:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b9295:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b92a5:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b92b5:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b92c5:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b92d5:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b92e5:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b92f5:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b9305:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b9315:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b9325:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b9335:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b9345:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b9355:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b9365:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b9375:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b9385:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b9395:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b93a5:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b93b5:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b93c5:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b93d5:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b93e5:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b93f5:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b9405:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   b9415:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   b9425:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   b9435:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   b9445:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   b9455:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   b9465:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   b9475:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   b9485:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   b9495:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   b94a5:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   b94b5:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   b94c5:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   b94d5:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   b94e5:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   b94f5:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   b9505:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   b9515:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   b9525:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   b9535:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   b9545:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   b9555:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   b9565:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   b9575:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   b9585:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   b9595:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   b95a5:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   b95b5:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   b95c5:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   b95d5:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   b95e5:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   b95f5:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   b9605:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   b9615:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   b9625:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   b9635:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   b9645:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   b9655:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   b9665:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   b9675:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   b9685:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   b9695:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   b96a5:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   b96b5:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   b96c5:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   b96d5:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   b96e5:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....
   b96f5:	0000                                         ...

000b96f8 <_ZTV12Adafruit_GFX>:
	...
   b9708:	5875 000b 7191 000b 40a5 000b 527b 000b     uX...q...@..{R..
   b9718:	527d 000b 52af 000b 528b 000b 529d 000b     }R...R...R...R..
   b9728:	51bd 000b 527b 000b 54a7 000b 54a5 000b     .Q..{R...T...T..
   b9738:	52c7 000b 5305 000b 533f 000b 5385 000b     .R...S..?S...S..
   b9748:	53a1 000b 5425 000b                         .S..%T..

000b9750 <_ZTV16OledWingAdafruit>:
	...
   b9758:	5985 000b 59a5 000b 5875 000b 7191 000b     .Y...Y..uX...q..
   b9768:	5e55 000b 527b 000b 527d 000b 52af 000b     U^..{R..}R...R..
   b9778:	528b 000b 529d 000b 51bd 000b 527b 000b     .R...R...Q..{R..
   b9788:	54a7 000b 5ff3 000b 659b 000b 654d 000b     .T..._...e..Me..
   b9798:	533f 000b 5385 000b 53a1 000b 5425 000b     ?S...S...S..%T..

000b97a8 <_ZTVN8particle11SPISettingsE>:
	...
   b97b0:	5169 000b 513d 000b 513f 000b               iQ..=Q..?Q..

000b97bc <_ZL12splash1_data>:
   b97bc:	0000 0000 0100 0080 0000 0000 0000 0000     ................
   b97cc:	8003 0000 0000 0000 0000 0700 00c0 0000     ................
   b97dc:	0000 0000 0000 c007 0000 0000 0000 0000     ................
   b97ec:	0f00 00c0 0000 0000 0000 0000 e01f 0000     ................
   b97fc:	0000 0000 0000 1f00 00e0 0000 0000 0000     ................
   b980c:	0000 e03f 0000 0000 0000 0000 3f00 00f0     ..?..........?..
	...
   b9824:	f07f 0000 0000 0000 1f00 7ff8 00f0 0000     ................
   b9834:	0000 0000 fe3f f07f 0000 0000 0000 3f00     ....?..........?
   b9844:	7fff 00f0 0000 0000 0000 ff1f e0fb 0000     ................
   b9854:	0000 0000 0f00 f9ff c0ff 0000 0000 0000     ................
   b9864:	ff0f fff9 00f8 0000 0000 0700 f1ff ffff     ................
   b9874:	0000 0000 0000 fc03 ff73 80ff 0000 0000     ........s.......
   b9884:	0100 3ffe ffff 0080 0000 0000 ff00 0f1e     ...?............
   b9894:	00ff 0000 0000 0000 fe7f fc1f 0000 0000     ................
   b98a4:	0000 3f00 ffff 00f8 0000 0000 0000 df0f     ...?............
   b98b4:	e0ff 0000 0000 0000 1f00 ff19 00c0 0000     ................
   b98c4:	0000 0000 3c3f 00ff 0000 0000 0000 7e00     ....?<.........~
   b98d4:	f87c 0000 0000 0000 0000 fe7f 007c 0000     |...........|...
   b98e4:	0000 0000 ff00 fcff 0000 0000 0000 0000     ................
   b98f4:	ffff 00fe 0000 0000 0000 ff00 feff 0000     ................
   b9904:	0000 0000 0100 efff 00fe 0000 0000 0000     ................
   b9914:	ff01 fecf 0000 0000 0000 0300 07ff 00fe     ................
   b9924:	0000 0000 0000 fc03 fe07 0000 0000 0000     ................
   b9934:	0300 03f0 00fe 0000 0000 0000 8001 fe00     ................
	...
   b994c:	0000 007e 0000 0000 0000 0000 3e00 0000     ..~..........>..
	...
   b9964:	000c 0000 0000 0700 0080 00fc 0300 00c0     ................
   b9974:	0000 8007 fc01 0000 c003 0000 0700 0180     ................
   b9984:	00fc 0300 00c0 0000 8007 e001 0000 1e00     ................
   b9994:	0000 0700 0180 00e0 0000 001e e37f 9ff7     ................
   b99a4:	fdf9 78e7 df7b ffc0 fff7 fdbf fffd 7b78     ...x{.........x{
   b99b4:	c0df f7ff bfff fdfd 78ff df7b f0c0 87f7     .........x{.....
   b99c4:	3dbc ffe1 7b78 00de f7f0 bc87 e13d 78f0     .=..x{......=..x
   b99d4:	de7b 0000 87f7 3d80 e0e1 7b78 00de f77f     {......=..x{....
   b99e4:	9f87 e1fd 78e0 de7b ff00 87f7 fdbf e0e1     .....x{.........
   b99f4:	7b78 00de f7f0 bc87 e13d 78e0 de7b f000     x{......=..x{...
   b9a04:	87f7 3dbc e0e1 7b78 00de f7f0 bc87 e13d     ...=..x{......=.
   b9a14:	78e0 de7b ff00 fff7 fdbf e0e1 fb7f c0df     .x{.............
   b9a24:	f7ff bfff e1fd 7fe0 dffb 7cc0 f3f3 3d9f     ...........|...=
   b9a34:	e0e1 7b3e c0cf 0000 0000 0000 0000 0000     ..>{............
   b9a44:	ff00 ffff ffff ffff ffff c0ff ffff ffff     ................
   b9a54:	68fd 11db 311a ffc0 ffff fdff 5a2b 6afb     .h...1......+Z.j
   b9a64:	c0ef ffff ffff 4bfd 3b5b 331a ffc0 ffff     .......K[;.3....
   b9a74:	fdff 5b6b 6adb c0fd                         ..k[.j..

000b9a7c <_ZL12splash2_data>:
   b9a7c:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   b9a8c:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   b9a9c:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   b9ab8:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   b9ac8:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   b9ad8:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   b9ae8:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   b9af8:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   b9b08:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   b9b18:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   b9b28:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   b9b38:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   b9b48:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   b9b58:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   b9b68:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   b9b78:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   b9b88:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   b9b98:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   b9ba8:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   b9bb8:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   b9bc8:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   b9bd8:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   b9be8:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   b9bf8:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   b9c10:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   b9c20:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   b9c30:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   b9c40:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   b9c50:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000b9c5c <_ZTV16Adafruit_SSD1306>:
	...
   b9c64:	5e29 000b 5e41 000b 5875 000b 7191 000b     )^..A^..uX...q..
   b9c74:	5e55 000b 527b 000b 527d 000b 52af 000b     U^..{R..}R...R..
   b9c84:	528b 000b 529d 000b 51bd 000b 527b 000b     .R...R...Q..{R..
   b9c94:	54a7 000b 5ff3 000b 659b 000b 654d 000b     .T..._...e..Me..
   b9ca4:	533f 000b 5385 000b 53a1 000b 5425 000b     ?S...S...S..%T..

000b9cb4 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   b9cb4:	8000 e0c0 f8f0 fefc                         ........

000b9cbc <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   b9cbc:	0100 0703 1f0f 7f3f                         ......?.

000b9cc4 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   b9cc4:	d5ae a880                                   ....

000b9cc8 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   b9cc8:	00d3 8d40                                   ..@.

000b9ccc <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   b9ccc:	0020 c8a1                                    ...

000b9cd0 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   b9cd0:	40db a6a4 af2e                              .@....

000b9cd6 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   b9cd6:	02da 8f81                                   ....

000b9cda <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   b9cda:	12da                                         ...

000b9cdd <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   b9cdd:	02da                                         ...

000b9ce0 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   b9ce0:	0022 21ff 0000 0000                         "..!....

000b9ce8 <_ZL22BlynkReadHandlerVector>:
   b9ce8:	6725 000b 6725 000b 6725 000b 6725 000b     %g..%g..%g..%g..
   b9cf8:	6725 000b 6725 000b 6725 000b 6725 000b     %g..%g..%g..%g..
   b9d08:	6725 000b 6725 000b 6725 000b 6725 000b     %g..%g..%g..%g..
   b9d18:	6725 000b 6725 000b 6725 000b 6725 000b     %g..%g..%g..%g..
   b9d28:	6725 000b 6725 000b 6725 000b 6725 000b     %g..%g..%g..%g..
   b9d38:	6725 000b 6725 000b 6725 000b 6725 000b     %g..%g..%g..%g..
   b9d48:	6725 000b 6725 000b 6725 000b 6725 000b     %g..%g..%g..%g..
   b9d58:	6725 000b 6725 000b 6725 000b 6725 000b     %g..%g..%g..%g..
   b9d68:	6725 000b 6725 000b 6725 000b 6725 000b     %g..%g..%g..%g..
   b9d78:	6725 000b 6725 000b 6725 000b 6725 000b     %g..%g..%g..%g..
   b9d88:	6725 000b 6725 000b 6725 000b 6725 000b     %g..%g..%g..%g..
   b9d98:	6725 000b 6725 000b 6725 000b 6725 000b     %g..%g..%g..%g..
   b9da8:	6725 000b 6725 000b 6725 000b 6725 000b     %g..%g..%g..%g..
   b9db8:	6725 000b 6725 000b 6725 000b 6725 000b     %g..%g..%g..%g..
   b9dc8:	6725 000b 6725 000b 6725 000b 6725 000b     %g..%g..%g..%g..
   b9dd8:	6725 000b 6725 000b 6725 000b 6725 000b     %g..%g..%g..%g..
   b9de8:	6725 000b 6725 000b 6725 000b 6725 000b     %g..%g..%g..%g..
   b9df8:	6725 000b 6725 000b 6725 000b 6725 000b     %g..%g..%g..%g..
   b9e08:	6725 000b 6725 000b 6725 000b 6725 000b     %g..%g..%g..%g..
   b9e18:	6725 000b 6725 000b 6725 000b 6725 000b     %g..%g..%g..%g..
   b9e28:	6725 000b 6725 000b 6725 000b 6725 000b     %g..%g..%g..%g..
   b9e38:	6725 000b 6725 000b 6725 000b 6725 000b     %g..%g..%g..%g..
   b9e48:	6725 000b 6725 000b 6725 000b 6725 000b     %g..%g..%g..%g..
   b9e58:	6725 000b 6725 000b 6725 000b 6725 000b     %g..%g..%g..%g..
   b9e68:	6725 000b 6725 000b 6725 000b 6725 000b     %g..%g..%g..%g..
   b9e78:	6725 000b 6725 000b 6725 000b 6725 000b     %g..%g..%g..%g..
   b9e88:	6725 000b 6725 000b 6725 000b 6725 000b     %g..%g..%g..%g..
   b9e98:	6725 000b 6725 000b 6725 000b 6725 000b     %g..%g..%g..%g..
   b9ea8:	6725 000b 6725 000b 6725 000b 6725 000b     %g..%g..%g..%g..
   b9eb8:	6725 000b 6725 000b 6725 000b 6725 000b     %g..%g..%g..%g..
   b9ec8:	6725 000b 6725 000b 6725 000b 6725 000b     %g..%g..%g..%g..
   b9ed8:	6725 000b 6725 000b 6725 000b 6725 000b     %g..%g..%g..%g..

000b9ee8 <_ZL23BlynkWriteHandlerVector>:
   b9ee8:	6727 000b 4d05 000b 6727 000b 6727 000b     'g...M..'g..'g..
   b9ef8:	6727 000b 6727 000b 6727 000b 6727 000b     'g..'g..'g..'g..
   b9f08:	6727 000b 6727 000b 6727 000b 6727 000b     'g..'g..'g..'g..
   b9f18:	6727 000b 6727 000b 6727 000b 6727 000b     'g..'g..'g..'g..
   b9f28:	6727 000b 6727 000b 6727 000b 6727 000b     'g..'g..'g..'g..
   b9f38:	6727 000b 6727 000b 6727 000b 6727 000b     'g..'g..'g..'g..
   b9f48:	6727 000b 6727 000b 6727 000b 6727 000b     'g..'g..'g..'g..
   b9f58:	6727 000b 6727 000b 6727 000b 6727 000b     'g..'g..'g..'g..
   b9f68:	6727 000b 6727 000b 6727 000b 6727 000b     'g..'g..'g..'g..
   b9f78:	6727 000b 6727 000b 6727 000b 6727 000b     'g..'g..'g..'g..
   b9f88:	6727 000b 6727 000b 6727 000b 6727 000b     'g..'g..'g..'g..
   b9f98:	6727 000b 6727 000b 6727 000b 6727 000b     'g..'g..'g..'g..
   b9fa8:	6727 000b 6727 000b 6727 000b 6727 000b     'g..'g..'g..'g..
   b9fb8:	6727 000b 6727 000b 6727 000b 6727 000b     'g..'g..'g..'g..
   b9fc8:	6727 000b 6727 000b 6727 000b 6727 000b     'g..'g..'g..'g..
   b9fd8:	6727 000b 6727 000b 6727 000b 6727 000b     'g..'g..'g..'g..
   b9fe8:	6727 000b 6727 000b 6727 000b 6727 000b     'g..'g..'g..'g..
   b9ff8:	6727 000b 6727 000b 6727 000b 6727 000b     'g..'g..'g..'g..
   ba008:	6727 000b 6727 000b 6727 000b 6727 000b     'g..'g..'g..'g..
   ba018:	6727 000b 6727 000b 6727 000b 6727 000b     'g..'g..'g..'g..
   ba028:	6727 000b 6727 000b 6727 000b 6727 000b     'g..'g..'g..'g..
   ba038:	6727 000b 6727 000b 6727 000b 6727 000b     'g..'g..'g..'g..
   ba048:	6727 000b 6727 000b 6727 000b 6727 000b     'g..'g..'g..'g..
   ba058:	6727 000b 6727 000b 6727 000b 6727 000b     'g..'g..'g..'g..
   ba068:	6727 000b 6727 000b 6727 000b 6727 000b     'g..'g..'g..'g..
   ba078:	6727 000b 6727 000b 6727 000b 6727 000b     'g..'g..'g..'g..
   ba088:	6727 000b 6727 000b 6727 000b 6727 000b     'g..'g..'g..'g..
   ba098:	6727 000b 6727 000b 6727 000b 6727 000b     'g..'g..'g..'g..
   ba0a8:	6727 000b 6727 000b 6727 000b 6727 000b     'g..'g..'g..'g..
   ba0b8:	6727 000b 6727 000b 6727 000b 6727 000b     'g..'g..'g..'g..
   ba0c8:	6727 000b 6727 000b 6727 000b 6727 000b     'g..'g..'g..'g..
   ba0d8:	6727 000b 6727 000b 6727 000b 6727 000b     'g..'g..'g..'g..

000ba0e8 <_ZTVN5spark13EthernetClassE>:
	...
   ba0f0:	6d4b 000b 6d41 000b 6d37 000b 6d2d 000b     Km..Am..7m..-m..
   ba100:	6d21 000b 6d15 000b 7ef1 000b 7ef9 000b     !m...m...~...~..
   ba110:	6d09 000b 6d01 000b 6cf7 000b 6ced 000b     .m...m...l...l..
   ba120:	7f29 000b                                   )...

000ba124 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   ba124:	0800 1810 2820 3830                         .... (08

000ba12c <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   ba134:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   ba144:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000ba154 <_ZTV9IPAddress>:
	...
   ba15c:	74d1 000b 74c1 000b 74c3 000b               .t...t...t..

000ba168 <_ZTV9USBSerial>:
	...
   ba170:	75fb 000b 7663 000b 7639 000b 7191 000b     .u..cv..9v...q..
   ba180:	762b 000b 75fd 000b 760d 000b 765d 000b     +v...u...v..]v..
   ba190:	761d 000b 75f5 000b                         .v...u..

000ba198 <_ZTV11USARTSerial>:
	...
   ba1a0:	76f5 000b 7761 000b 7739 000b 7191 000b     .v..aw..9w...q..
   ba1b0:	7709 000b 7725 000b 7717 000b 7733 000b     .w..%w...w..3w..
   ba1c0:	76f7 000b 76fb 000b                         .v...v..

000ba1c8 <_ZTV7TwoWire>:
	...
   ba1d0:	7799 000b 77e3 000b 77bb 000b 779b 000b     .w...w...w...w..
   ba1e0:	77c3 000b 77cb 000b 77d3 000b 77db 000b     .w...w...w...w..
   ba1f0:	6977 6972 676e 7200 6365 2076 7265 6f72     wiring.recv erro
   ba200:	2072 203d 6425 0000                         r = %d..

000ba208 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   ba210:	7921 000b 7945 000b 7e2f 000b 7953 000b     !y..Ey../~..Sy..
   ba220:	7925 000b                                   %y..

000ba224 <_ZTV9TCPClient>:
	...
   ba22c:	7351 000b 7369 000b 789d 000b 78b7 000b     Qs..is...x...x..
   ba23c:	7cc5 000b 78e1 000b 7b3b 000b 7915 000b     .|...x..;{...y..
   ba24c:	7bcd 000b 7a0d 000b 7b69 000b 7d79 000b     .{...z..i{..y}..
   ba25c:	7b09 000b 7917 000b 78c9 000b 7959 000b     .{...y...x..Yy..
   ba26c:	79ed 000b                                   .y..

000ba270 <_ZTVN5spark9WiFiClassE>:
	...
   ba278:	7e93 000b 7e89 000b 7e7f 000b 7e35 000b     .~...~...~..5~..
   ba288:	7e73 000b 7e67 000b 7ef1 000b 7ef9 000b     s~..g~...~...~..
   ba298:	7e5b 000b 7e53 000b 7e49 000b 7e3f 000b     [~..S~..I~..?~..
   ba2a8:	7f29 000b                                   )...

000ba2ac <_ZTVN5spark12NetworkClassE>:
	...
   ba2b4:	7eb1 000b 7ebb 000b 7ec5 000b 7ecf 000b     .~...~...~...~..
   ba2c4:	7ed9 000b 7ee5 000b 7ef1 000b 7ef9 000b     .~...~...~...~..
   ba2d4:	7f01 000b 7f0d 000b 7f15 000b 7f1f 000b     ................
   ba2e4:	7f29 000b                                   )...

000ba2e8 <_ZSt7nothrow>:
	...

000ba2e9 <_ZTSSt19_Sp_make_shared_tag>:
   ba2e9:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   ba2f9:	6572 5f64 6174 0067 0000                     red_tag....

000ba304 <_ZTISt19_Sp_make_shared_tag>:
   ba304:	a344 000b a2e9 000b                         D.......

000ba30c <_ZTIN10__cxxabiv117__class_type_infoE>:
   ba30c:	a3a4 000b a318 000b a3c8 000b               ............

000ba318 <_ZTSN10__cxxabiv117__class_type_infoE>:
   ba318:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   ba328:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   ba338:	0045 0000                                   E...

000ba33c <_ZTVN10__cxxabiv117__class_type_infoE>:
   ba33c:	0000 0000 a30c 000b 82cd 000b 82e1 000b     ................
   ba34c:	8475 000b 8475 000b 834b 000b 828d 000b     u...u...K.......
   ba35c:	8333 000b 82f5 000b 82bf 000b               3...........

000ba368 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   ba368:	a3a4 000b a374 000b a30c 000b               ....t.......

000ba374 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   ba374:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   ba384:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   ba394:	666e 456f 0000 0000                         nfoE....

000ba39c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   ba39c:	0000 0000 a368 000b 8375 000b 8389 000b     ....h...u.......
   ba3ac:	8475 000b 8475 000b 834b 000b 828d 000b     u...u...K.......
   ba3bc:	8449 000b 83d5 000b 839d 000b               I...........

000ba3c8 <_ZTISt9type_info>:
   ba3c8:	a344 000b a3d0 000b                         D.......

000ba3d0 <_ZTSSt9type_info>:
   ba3d0:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   ba3e0:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   ba3f0:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   ba400:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   ba410:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   ba420:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   ba430:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   ba440:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   ba450:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   ba460:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000ba471 <_ctype_>:
   ba471:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   ba481:	2020 2020 2020 2020 2020 2020 2020 2020                     
   ba491:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   ba4a1:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   ba4b1:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   ba4c1:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   ba4d1:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   ba4e1:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   ba4f1:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000ba572 <link_const_variable_data_end>:
	...

000ba574 <link_constructors_location>:
   ba574:	000b50c9 	.word	0x000b50c9
   ba578:	000b6d55 	.word	0x000b6d55
   ba57c:	000b6ecd 	.word	0x000b6ecd
   ba580:	000b7181 	.word	0x000b7181
   ba584:	000b730d 	.word	0x000b730d
   ba588:	000b731d 	.word	0x000b731d
   ba58c:	000b737d 	.word	0x000b737d
   ba590:	000b7e9d 	.word	0x000b7e9d
   ba594:	000b8001 	.word	0x000b8001

000ba598 <link_constructors_end>:
	...
